<?xml version='1.0' encoding='ISO-8859-1' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>arrayhandle.h</name>
    <path>/home/murrayc/cvs/gnome216/glibmm/glib/glibmm/</path>
    <filename>arrayhandle_8h</filename>
    <namespace>Glib</namespace>
    <namespace>Glib::Container_Helpers</namespace>
    <class kind="class">Glib::Container_Helpers::ArrayHandleIterator</class>
    <class kind="class">Glib::ArrayHandle</class>
    <member kind="typedef">
      <type>ArrayHandle&lt; Glib::ustring &gt;</type>
      <name>StringArrayHandle</name>
      <anchorfile>group__ContHandles.html</anchorfile>
      <anchor>g8e243b697be740f5f7d4b578ae50db41</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>class.h</name>
    <path>/home/murrayc/cvs/gnome216/glibmm/glib/glibmm/</path>
    <filename>class_8h</filename>
  </compound>
  <compound kind="file">
    <name>containerhandle_shared.h</name>
    <path>/home/murrayc/cvs/gnome216/glibmm/glib/glibmm/</path>
    <filename>containerhandle__shared_8h</filename>
    <namespace>Glib</namespace>
    <namespace>Glib::Container_Helpers</namespace>
    <class kind="class">Glib::Sequence</class>
    <class kind="struct">Glib::Container_Helpers::TypeTraits</class>
    <member kind="enumeration">
      <name>OwnershipType</name>
      <anchor>g64c27560b41710ccf64a3679a3ba3f20</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OWNERSHIP_NONE</name>
      <anchor>gg64c27560b41710ccf64a3679a3ba3f207d594cffcc2d2d6c4313ddb4d6613c79</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OWNERSHIP_SHALLOW</name>
      <anchor>gg64c27560b41710ccf64a3679a3ba3f20448c598cdc37e2de8a162e1020001715</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OWNERSHIP_DEEP</name>
      <anchor>gg64c27560b41710ccf64a3679a3ba3f202a6d6bfadc36f9eda31af79d32928c6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Sequence&lt; Iterator &gt;</type>
      <name>sequence</name>
      <anchorfile>group__ContHandles.html</anchorfile>
      <anchor>g33e5a3a70ef5f7bed112046726ff8b04</anchor>
      <arglist>(Iterator pbegin, Iterator pend)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>containers.h</name>
    <path>/home/murrayc/cvs/gnome216/glibmm/glib/glibmm/</path>
    <filename>containers_8h</filename>
  </compound>
  <compound kind="file">
    <name>convert.h</name>
    <path>/home/murrayc/cvs/gnome216/glibmm/glib/glibmm/</path>
    <filename>convert_8h</filename>
    <namespace>Glib</namespace>
    <class kind="class">Glib::ConvertError</class>
    <class kind="class">Glib::IConv</class>
    <member kind="function">
      <type>bool</type>
      <name>get_charset</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>gbf5fac564c47a7a9ad6037044c3909f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_charset</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>g88965337df48a173a6b013e8243e4631</anchor>
      <arglist>(std::string &amp;charset)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>convert</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>g58f7e4556c436a96c64b186bbc8f7f4c</anchor>
      <arglist>(const std::string &amp;str, const std::string &amp;to_codeset, const std::string &amp;from_codeset)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>convert_with_fallback</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>g40b5aa172fabd1f3dbf50a962d0d351f</anchor>
      <arglist>(const std::string &amp;str, const std::string &amp;to_codeset, const std::string &amp;from_codeset)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>convert_with_fallback</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>gf1b091e4397a7637e884148484b1f71e</anchor>
      <arglist>(const std::string &amp;str, const std::string &amp;to_codeset, const std::string &amp;from_codeset, const Glib::ustring &amp;fallback)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>locale_to_utf8</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>g4517b17f2aad4cd5c0e0640de212d928</anchor>
      <arglist>(const std::string &amp;opsys_string)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>locale_from_utf8</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>gcc062729285890a7e9b22bece6fb987c</anchor>
      <arglist>(const Glib::ustring &amp;utf8_string)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>filename_to_utf8</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>g6cf95dc00505401594260a360d70c17b</anchor>
      <arglist>(const std::string &amp;opsys_string)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>filename_from_utf8</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>g2bd94064ad97b43324a7854b62f0835b</anchor>
      <arglist>(const Glib::ustring &amp;utf8_string)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>filename_from_uri</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>gda23cd7f7dc8eb25e99b867a55551763</anchor>
      <arglist>(const Glib::ustring &amp;uri, Glib::ustring &amp;hostname)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>filename_from_uri</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>gb1cb94f4a4a70bad06b715fb14a252d9</anchor>
      <arglist>(const Glib::ustring &amp;uri)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>filename_to_uri</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>ge1b2f056bde3fbab578c602fe42e3de9</anchor>
      <arglist>(const std::string &amp;filename, const Glib::ustring &amp;hostname)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>filename_to_uri</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>gaf69aec83665229cc06596cf627d9d5a</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>filename_display_basename</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>g05dd67157ad35da4401263247b6f4d81</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>filename_display_name</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>gbc1b404cc965f3da6beecddfe2623afc</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>date.h</name>
    <path>/home/murrayc/cvs/gnome216/glibmm/glib/glibmm/</path>
    <filename>date_8h</filename>
    <namespace>Glib</namespace>
    <class kind="class">Glib::Date</class>
  </compound>
  <compound kind="file">
    <name>debug.h</name>
    <path>/home/murrayc/cvs/gnome216/glibmm/glib/glibmm/</path>
    <filename>debug_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>GLIBMM_DEBUG_REFERENCE</name>
      <anchorfile>debug_8h.html</anchorfile>
      <anchor>51c1d6c48a59f55cf032d660539c5f0c</anchor>
      <arglist>(cppInstance, cInstance)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GLIBMM_DEBUG_UNREFERENCE</name>
      <anchorfile>debug_8h.html</anchorfile>
      <anchor>9909007fb361b64c377500697ec5aa71</anchor>
      <arglist>(cppInstance, cInstance)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>dispatcher.h</name>
    <path>/home/murrayc/cvs/gnome216/glibmm/glib/glibmm/</path>
    <filename>dispatcher_8h</filename>
    <namespace>Glib</namespace>
    <class kind="class">Glib::Dispatcher</class>
  </compound>
  <compound kind="file">
    <name>error.h</name>
    <path>/home/murrayc/cvs/gnome216/glibmm/glib/glibmm/</path>
    <filename>error_8h</filename>
    <namespace>Glib</namespace>
    <class kind="class">Glib::Error</class>
  </compound>
  <compound kind="file">
    <name>exception.h</name>
    <path>/home/murrayc/cvs/gnome216/glibmm/glib/glibmm/</path>
    <filename>exception_8h</filename>
    <namespace>Glib</namespace>
    <class kind="class">Glib::Exception</class>
  </compound>
  <compound kind="file">
    <name>exceptionhandler.h</name>
    <path>/home/murrayc/cvs/gnome216/glibmm/glib/glibmm/</path>
    <filename>exceptionhandler_8h</filename>
    <namespace>Glib</namespace>
    <member kind="function">
      <type>sigc::connection</type>
      <name>add_exception_handler</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>9a79a59cac511993cfea861bebd2f391</anchor>
      <arglist>(const sigc::slot&lt; void &gt; &amp;slot)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fileutils.h</name>
    <path>/home/murrayc/cvs/gnome216/glibmm/glib/glibmm/</path>
    <filename>fileutils_8h</filename>
    <namespace>Glib</namespace>
    <class kind="class">Glib::FileError</class>
    <class kind="class">Glib::DirIterator</class>
    <class kind="class">Glib::Dir</class>
    <member kind="enumeration">
      <name>FileTest</name>
      <anchor>g33c24ccefbd130021f06708763e16ef2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_TEST_IS_REGULAR</name>
      <anchor>gg33c24ccefbd130021f06708763e16ef23181e2e655e765b00dfdb1e1ea443f62</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_TEST_IS_SYMLINK</name>
      <anchor>gg33c24ccefbd130021f06708763e16ef286cda9ff0bf25358070a9bc8b4a186d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_TEST_IS_DIR</name>
      <anchor>gg33c24ccefbd130021f06708763e16ef2d3679641c18e5e4d4578c2122492cea4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_TEST_IS_EXECUTABLE</name>
      <anchor>gg33c24ccefbd130021f06708763e16ef2d9ab64f07fd4fc2105b53b7379265535</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_TEST_EXISTS</name>
      <anchor>gg33c24ccefbd130021f06708763e16ef237c8f223bda6b6ce2875490351989ddd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>FileTest</type>
      <name>operator|</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g8e018d8609ba17b0f6955505a8363bf7</anchor>
      <arglist>(FileTest lhs, FileTest rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileTest</type>
      <name>operator &amp;</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g2e640c1cc390e7d91f6366d65ed084f4</anchor>
      <arglist>(FileTest lhs, FileTest rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileTest</type>
      <name>operator^</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g6c089f23d6bfd92e083edc75519db75e</anchor>
      <arglist>(FileTest lhs, FileTest rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileTest</type>
      <name>operator~</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g948edadd8ee7442b83d37dc3c325f890</anchor>
      <arglist>(FileTest flags)</arglist>
    </member>
    <member kind="function">
      <type>FileTest &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g9a6f5470f667596e897f5bfbd1068283</anchor>
      <arglist>(FileTest &amp;lhs, FileTest rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileTest &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g4e68c8262a74dbde8ca9783ae5a8f72c</anchor>
      <arglist>(FileTest &amp;lhs, FileTest rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileTest &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g2219c78993a5196ca2a435a18e0fc3a7</anchor>
      <arglist>(FileTest &amp;lhs, FileTest rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>file_test</name>
      <anchorfile>group__FileUtils.html</anchorfile>
      <anchor>g0b2fce78896a9a84f7ea3a5646cc7d36</anchor>
      <arglist>(const std::string &amp;filename, FileTest test)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>mkstemp</name>
      <anchorfile>group__FileUtils.html</anchorfile>
      <anchor>ge4c8d716bd109b6b8e1420a8c20b3507</anchor>
      <arglist>(std::string &amp;filename_template)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>file_open_tmp</name>
      <anchorfile>group__FileUtils.html</anchorfile>
      <anchor>ge91f239f1cf0123399374deed54fbf3a</anchor>
      <arglist>(std::string &amp;name_used, const std::string &amp;prefix)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>file_open_tmp</name>
      <anchorfile>group__FileUtils.html</anchorfile>
      <anchor>g682379de4ea119540b4bdc1759e93e1d</anchor>
      <arglist>(std::string &amp;name_used)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>file_get_contents</name>
      <anchorfile>group__FileUtils.html</anchorfile>
      <anchor>g835da54212fe78e833ac55b49150b989</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>helperlist.h</name>
    <path>/home/murrayc/cvs/gnome216/glibmm/glib/glibmm/</path>
    <filename>helperlist_8h</filename>
    <namespace>Glib</namespace>
    <class kind="class">Glib::HelperList</class>
  </compound>
  <compound kind="file">
    <name>i18n-lib.h</name>
    <path>/home/murrayc/cvs/gnome216/glibmm/glib/glibmm/</path>
    <filename>i18n-lib_8h</filename>
  </compound>
  <compound kind="file">
    <name>i18n.h</name>
    <path>/home/murrayc/cvs/gnome216/glibmm/glib/glibmm/</path>
    <filename>i18n_8h</filename>
  </compound>
  <compound kind="file">
    <name>init.h</name>
    <path>/home/murrayc/cvs/gnome216/glibmm/glib/glibmm/</path>
    <filename>init_8h</filename>
    <namespace>Glib</namespace>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>c90aee10d0b90e3d8a96a86b5394f87b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>interface.h</name>
    <path>/home/murrayc/cvs/gnome216/glibmm/glib/glibmm/</path>
    <filename>interface_8h</filename>
    <namespace>Glib</namespace>
    <class kind="class">Glib::Interface</class>
    <member kind="function">
      <type>RefPtr&lt; ObjectBase &gt;</type>
      <name>wrap_interface</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>75643fed688d354848a0379d3da00133</anchor>
      <arglist>(GObject *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>iochannel.h</name>
    <path>/home/murrayc/cvs/gnome216/glibmm/glib/glibmm/</path>
    <filename>iochannel_8h</filename>
    <namespace>Glib</namespace>
    <class kind="class">Glib::IOChannelError</class>
    <class kind="class">Glib::IOChannel</class>
    <member kind="enumeration">
      <name>SeekType</name>
      <anchor>ga3767731311bdba4ef42dc99215e5cda</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SEEK_TYPE_CUR</name>
      <anchor>gga3767731311bdba4ef42dc99215e5cda48f0a394042c3a8e117b2ae64af33960</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SEEK_TYPE_SET</name>
      <anchor>gga3767731311bdba4ef42dc99215e5cda1e0d3b4a03e5dd32f135acc89982889f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SEEK_TYPE_END</name>
      <anchor>gga3767731311bdba4ef42dc99215e5cdafa5ff5cdf7e6623866c717fe49cfbaec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>IOStatus</name>
      <anchor>g23fb251e48485b62a9c2677bb1f87d5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_STATUS_ERROR</name>
      <anchor>gg23fb251e48485b62a9c2677bb1f87d5e121996c81c45593110cd714bb81bc349</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_STATUS_NORMAL</name>
      <anchor>gg23fb251e48485b62a9c2677bb1f87d5ef249c5b8e984c37db0847258aeeae86a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_STATUS_EOF</name>
      <anchor>gg23fb251e48485b62a9c2677bb1f87d5ed42ae91b402716ab4faaec9b0f3823fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_STATUS_AGAIN</name>
      <anchor>gg23fb251e48485b62a9c2677bb1f87d5e5a33609d7ff07e1d711185c0765cf5de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>IOFlags</name>
      <anchor>gee093e5db5bc1ea5738771ba0d1af3b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_FLAG_APPEND</name>
      <anchor>ggee093e5db5bc1ea5738771ba0d1af3b7121e65986f06397730c4c36d09fb4dc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_FLAG_NONBLOCK</name>
      <anchor>ggee093e5db5bc1ea5738771ba0d1af3b73724a778574d25ba0bd83139a80b2c0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_FLAG_IS_READABLE</name>
      <anchor>ggee093e5db5bc1ea5738771ba0d1af3b7162bfe5ccb18465d0f11e954cc4a89d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_FLAG_IS_WRITEABLE</name>
      <anchor>ggee093e5db5bc1ea5738771ba0d1af3b7f9738e0234ae1d1f15c4512d6edb16db</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_FLAG_IS_SEEKABLE</name>
      <anchor>ggee093e5db5bc1ea5738771ba0d1af3b7c1373a306084710994199b3de0137cfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_FLAG_GET_MASK</name>
      <anchor>ggee093e5db5bc1ea5738771ba0d1af3b79431cd6fcef2a716b7d313bd9cde85b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_FLAG_SET_MASK</name>
      <anchor>ggee093e5db5bc1ea5738771ba0d1af3b71d4db9b335a96f503cd491973b162105</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>IOFlags</type>
      <name>operator|</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g0dd0a8800b6311ee8f3867eb27a72ae5</anchor>
      <arglist>(IOFlags lhs, IOFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gc2ecc634f28d057e0b892385e95dcb5b</anchor>
      <arglist>(IOFlags lhs, IOFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOFlags</type>
      <name>operator^</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gd61c57b0678c703e8a14230d18bacff7</anchor>
      <arglist>(IOFlags lhs, IOFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOFlags</type>
      <name>operator~</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g548c1cb09208fef57e5d0b3c992d71b9</anchor>
      <arglist>(IOFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>IOFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gc3539f6df5e0c0658726f4f0573146f9</anchor>
      <arglist>(IOFlags &amp;lhs, IOFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g3269a13b6b2b6ce45d8f65296102acb1</anchor>
      <arglist>(IOFlags &amp;lhs, IOFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g2180a5c566ced37bbeb37050d9632da9</anchor>
      <arglist>(IOFlags &amp;lhs, IOFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; IOChannel &gt;</type>
      <name>wrap</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>671306f4a3a0cae5ab4d7a9d54886592</anchor>
      <arglist>(GIOChannel *gobject, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>keyfile.h</name>
    <path>/home/murrayc/cvs/gnome216/glibmm/glib/glibmm/</path>
    <filename>keyfile_8h</filename>
    <namespace>Glib</namespace>
    <class kind="class">Glib::KeyFileError</class>
    <class kind="class">Glib::KeyFile</class>
    <member kind="enumeration">
      <name>KeyFileFlags</name>
      <anchor>g5866be36312563d91e5a7be27348459b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KEY_FILE_NONE</name>
      <anchor>gg5866be36312563d91e5a7be27348459b06a606cb7b5f244a0f3ad4f5e67b30bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KEY_FILE_KEEP_COMMENTS</name>
      <anchor>gg5866be36312563d91e5a7be27348459b00058fa3d8e271d9ff5e1469dc39dc69</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KEY_FILE_KEEP_TRANSLATIONS</name>
      <anchor>gg5866be36312563d91e5a7be27348459b7ff723c84c930b978dccd6732eebe985</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>KeyFileFlags</type>
      <name>operator|</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gbac5e1493392116b118e4d1048e3fef0</anchor>
      <arglist>(KeyFileFlags lhs, KeyFileFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>KeyFileFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gbdd6dad90b17ad88ba835f313524a307</anchor>
      <arglist>(KeyFileFlags lhs, KeyFileFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>KeyFileFlags</type>
      <name>operator^</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gcc28b21831114895abfdbae6c1908114</anchor>
      <arglist>(KeyFileFlags lhs, KeyFileFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>KeyFileFlags</type>
      <name>operator~</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gb99ff1d7c6d96da2ddfcfd1c4954e9b6</anchor>
      <arglist>(KeyFileFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>KeyFileFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g7096a34594825c90d7b6257935a62eb1</anchor>
      <arglist>(KeyFileFlags &amp;lhs, KeyFileFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>KeyFileFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g5ea1950426a74dffefbb5355764ad9e6</anchor>
      <arglist>(KeyFileFlags &amp;lhs, KeyFileFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>KeyFileFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gc90869f74a743e2f99f55708c28a585d</anchor>
      <arglist>(KeyFileFlags &amp;lhs, KeyFileFlags rhs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>listhandle.h</name>
    <path>/home/murrayc/cvs/gnome216/glibmm/glib/glibmm/</path>
    <filename>listhandle_8h</filename>
    <namespace>Glib</namespace>
    <namespace>Glib::Container_Helpers</namespace>
    <class kind="class">Glib::Container_Helpers::ListHandleIterator</class>
    <class kind="class">Glib::ListHandle</class>
  </compound>
  <compound kind="file">
    <name>main.h</name>
    <path>/home/murrayc/cvs/gnome216/glibmm/glib/glibmm/</path>
    <filename>main_8h</filename>
    <namespace>Glib</namespace>
    <class kind="class">Glib::PollFD</class>
    <class kind="class">Glib::SignalTimeout</class>
    <class kind="class">Glib::SignalIdle</class>
    <class kind="class">Glib::SignalIO</class>
    <class kind="class">Glib::SignalChildWatch</class>
    <class kind="class">Glib::MainContext</class>
    <class kind="class">Glib::MainLoop</class>
    <class kind="class">Glib::Source</class>
    <class kind="class">Glib::TimeoutSource</class>
    <class kind="class">Glib::IdleSource</class>
    <class kind="class">Glib::IOSource</class>
    <member kind="enumvalue">
      <name>PRIORITY_HIGH</name>
      <anchor>gg0c450f82b9e34689e2dda2038ba7834fa3219d7be6fa3282a80d7a850c401db9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRIORITY_DEFAULT</name>
      <anchor>gg0c450f82b9e34689e2dda2038ba7834f597ed3aa6067516c9c752896f3816b5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRIORITY_HIGH_IDLE</name>
      <anchor>gg0c450f82b9e34689e2dda2038ba7834ff2d20696a8afab425c00268d981e9897</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRIORITY_DEFAULT_IDLE</name>
      <anchor>gg0c450f82b9e34689e2dda2038ba7834fe8c1127af0a2dab71f196a957dab8375</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRIORITY_LOW</name>
      <anchor>gg0c450f82b9e34689e2dda2038ba7834fc6034649b50f9f92a69c1e67b92ecfc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>IOCondition</name>
      <anchor>gbd96381793b70d4ae32c725926990918</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_IN</name>
      <anchor>ggbd96381793b70d4ae32c725926990918f244f3e8c1c9525762f3630befd76336</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_OUT</name>
      <anchor>ggbd96381793b70d4ae32c72592699091860f61c8f26f2bb61afd3ad8afd673099</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_PRI</name>
      <anchor>ggbd96381793b70d4ae32c72592699091836bb5411dda1131e5c23e17a8619c820</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERR</name>
      <anchor>ggbd96381793b70d4ae32c7259269909182e402c9fd5879c49ef5359fa4189acd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_HUP</name>
      <anchor>ggbd96381793b70d4ae32c725926990918b5dcc0e24c236c027b041d362dcff35b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_NVAL</name>
      <anchor>ggbd96381793b70d4ae32c725926990918d37b5d6ba6a0c1ad98510f352ac2f885</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>IOCondition</type>
      <name>operator|</name>
      <anchorfile>group__MainLoop.html</anchorfile>
      <anchor>gb5937e9164f36f75ba87fd67903348d5</anchor>
      <arglist>(IOCondition lhs, IOCondition rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOCondition</type>
      <name>operator &amp;</name>
      <anchorfile>group__MainLoop.html</anchorfile>
      <anchor>g1ce6f8c4204f496d7669e987f2e291b8</anchor>
      <arglist>(IOCondition lhs, IOCondition rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOCondition</type>
      <name>operator^</name>
      <anchorfile>group__MainLoop.html</anchorfile>
      <anchor>g6416bbf923045261beb85241fff8ef0d</anchor>
      <arglist>(IOCondition lhs, IOCondition rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOCondition</type>
      <name>operator~</name>
      <anchorfile>group__MainLoop.html</anchorfile>
      <anchor>g85461947d24f306cefd2fe17999deb97</anchor>
      <arglist>(IOCondition flags)</arglist>
    </member>
    <member kind="function">
      <type>IOCondition &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__MainLoop.html</anchorfile>
      <anchor>g8269a01826f8737d98ab0d345a0004f4</anchor>
      <arglist>(IOCondition &amp;lhs, IOCondition rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOCondition &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__MainLoop.html</anchorfile>
      <anchor>gd1f673b77dfb469e7bf71f2f6310e806</anchor>
      <arglist>(IOCondition &amp;lhs, IOCondition rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOCondition &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__MainLoop.html</anchorfile>
      <anchor>g995d6d5d01db67af62661bcd5dfd1ad6</anchor>
      <arglist>(IOCondition &amp;lhs, IOCondition rhs)</arglist>
    </member>
    <member kind="function">
      <type>SignalTimeout</type>
      <name>signal_timeout</name>
      <anchorfile>group__MainLoop.html</anchorfile>
      <anchor>gadb206fcc112f086f9d47c016b1f2175</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SignalIdle</type>
      <name>signal_idle</name>
      <anchorfile>group__MainLoop.html</anchorfile>
      <anchor>g76792522d9680a05e232d3519a25f98d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SignalIO</type>
      <name>signal_io</name>
      <anchorfile>group__MainLoop.html</anchorfile>
      <anchor>gf391654b755a32169d18be4835677376</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SignalChildWatch</type>
      <name>signal_child_watch</name>
      <anchorfile>group__MainLoop.html</anchorfile>
      <anchor>g11ee7db80cc44ece02056a38bb049e3b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>markup.h</name>
    <path>/home/murrayc/cvs/gnome216/glibmm/glib/glibmm/</path>
    <filename>markup_8h</filename>
    <namespace>Glib</namespace>
    <namespace>Glib::Markup</namespace>
    <class kind="class">Glib::MarkupError</class>
    <class kind="class">Glib::Markup::AttributeKeyLess</class>
    <class kind="class">Glib::Markup::Parser</class>
    <class kind="class">Glib::Markup::ParseContext</class>
    <member kind="typedef">
      <type>Glib::MarkupError</type>
      <name>Error</name>
      <anchorfile>group__Markup.html</anchorfile>
      <anchor>g7d0403c76601e7d3ba4641737e094e77</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ParseFlags</name>
      <anchor>ga4fcaf917b6eb2aa085817e83b0a4108</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DO_NOT_USE_THIS_UNSUPPORTED_FLAG</name>
      <anchor>gga4fcaf917b6eb2aa085817e83b0a41083f48cb56dd56d529c9379ae244441e90</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>escape_text</name>
      <anchorfile>group__Markup.html</anchorfile>
      <anchor>gc95c5843d8dada8449f90f2fd635feb1</anchor>
      <arglist>(const Glib::ustring &amp;text)</arglist>
    </member>
    <member kind="function">
      <type>ParseFlags</type>
      <name>operator|</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g330303c9d78eb78547012d549d4bb018</anchor>
      <arglist>(ParseFlags lhs, ParseFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ParseFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g047083096ed55facc653af5bee27ac66</anchor>
      <arglist>(ParseFlags lhs, ParseFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ParseFlags</type>
      <name>operator^</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gb059cb7acda2b29eb2066958fc71951a</anchor>
      <arglist>(ParseFlags lhs, ParseFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ParseFlags</type>
      <name>operator~</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g1fb97b62ae844c056b400e2813a21ee2</anchor>
      <arglist>(ParseFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>ParseFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g6b24d718f166cb352be94ee6e4090296</anchor>
      <arglist>(ParseFlags &amp;lhs, ParseFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ParseFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g084074808cf89b0b36f257af49dc9bac</anchor>
      <arglist>(ParseFlags &amp;lhs, ParseFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ParseFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gf59b9479390c508dff23dba221177bcc</anchor>
      <arglist>(ParseFlags &amp;lhs, ParseFlags rhs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>miscutils.h</name>
    <path>/home/murrayc/cvs/gnome216/glibmm/glib/glibmm/</path>
    <filename>miscutils_8h</filename>
    <namespace>Glib</namespace>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_application_name</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>g9c2f67828083d74925b23c59ab868698</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_application_name</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>g40e45835b7b461cba0f7a10fbb63c0d3</anchor>
      <arglist>(const Glib::ustring &amp;application_name)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_prgname</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>g391655dededb496010eee2e92d0f1fdf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_prgname</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>g7d5c429822c09048892c4dee9c8e08c1</anchor>
      <arglist>(const std::string &amp;prgname)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getenv</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>g5e186fdb08835342a5866b11fe787ebb</anchor>
      <arglist>(const std::string &amp;variable, bool &amp;found)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getenv</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>g8e2c8f250aa7f059956737851ace08f6</anchor>
      <arglist>(const std::string &amp;variable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setenv</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>g862657f21e5a930541d048a920204f59</anchor>
      <arglist>(const std::string &amp;variable, const std::string &amp;value, bool overwrite=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unsetenv</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>g6fb89001630714ec9ee5244cab56343e</anchor>
      <arglist>(const std::string &amp;variable)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_user_name</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>g52964bfd712e8c9e688f668da51f3ed9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_real_name</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>g30692e3263e66868878f535e0b7c9722</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_home_dir</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>g9412ea70c7fea058c03211dac318f8e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_tmp_dir</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>gc42272146fd9320958132f1591d28991</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_current_dir</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>g06d93c95572d6a382b8cc4e09dd5a339</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_user_data_dir</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>g821b704b5ede1583e4057990976d394b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_user_config_dir</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ge517b931f4753abcd48adb2769a8fc48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_user_cache_dir</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ga68121f26e82df1c293c82b89c8998e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>path_is_absolute</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>gd82525f39f7408f97f2c096c4f721b3b</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>path_skip_root</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>g306eee64abc3d28993895b826f4dd533</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>path_get_basename</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>g20ebf2917a7fce5d1901568017b95a35</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>path_get_dirname</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ge03457226c4239a74b83486739521434</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>build_filename</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ga4a70bf050b3f318f87049ed30206a9a</anchor>
      <arglist>(const Glib::ArrayHandle&lt; std::string &gt; &amp;elements)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>build_filename</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>gda06023cc39be3a44eb68e38d6cbea6c</anchor>
      <arglist>(const std::string &amp;elem1, const std::string &amp;elem2)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>build_path</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>g6afc89d45cc34f3cfce4a55f3f5e7afa</anchor>
      <arglist>(const std::string &amp;separator, const Glib::ArrayHandle&lt; std::string &gt; &amp;elements)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>find_program_in_path</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ga4c4ecb9a3eb803ae6d9dee51e1e5b14</anchor>
      <arglist>(const std::string &amp;program)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>module.h</name>
    <path>/home/murrayc/cvs/gnome216/glibmm/glib/glibmm/</path>
    <filename>module_8h</filename>
    <namespace>Glib</namespace>
    <class kind="class">Glib::Module</class>
    <member kind="enumeration">
      <name>ModuleFlags</name>
      <anchor>g502283ffbe523adf38c69905ec8640f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MODULE_BIND_LAZY</name>
      <anchor>gg502283ffbe523adf38c69905ec8640f3cd94d05ef9ba97ceb6f3904b87f5bbfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MODULE_BIND_LOCAL</name>
      <anchor>gg502283ffbe523adf38c69905ec8640f38e5768a91ee8dbf459785dee8b664b72</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MODULE_BIND_MASK</name>
      <anchor>gg502283ffbe523adf38c69905ec8640f39cbf95b359863e9296457cbb0f193169</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ModuleFlags</type>
      <name>operator|</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gde862759d091b90329ba8f85aa2fd010</anchor>
      <arglist>(ModuleFlags lhs, ModuleFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ModuleFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g330585c44ed8bae05e931414481515a1</anchor>
      <arglist>(ModuleFlags lhs, ModuleFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ModuleFlags</type>
      <name>operator^</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g333d93ef372c08c322d27ac05bda0e18</anchor>
      <arglist>(ModuleFlags lhs, ModuleFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ModuleFlags</type>
      <name>operator~</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gaa723a5b4d33e54167f7adbb18746004</anchor>
      <arglist>(ModuleFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>ModuleFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ge9df767ea1ec74b0d9d9acce426a07a8</anchor>
      <arglist>(ModuleFlags &amp;lhs, ModuleFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ModuleFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g5c0dd7eca1f39db3f45ec045cfb2f8f8</anchor>
      <arglist>(ModuleFlags &amp;lhs, ModuleFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ModuleFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g8e73a634c6441630eddf8805b22dd163</anchor>
      <arglist>(ModuleFlags &amp;lhs, ModuleFlags rhs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>object.h</name>
    <path>/home/murrayc/cvs/gnome216/glibmm/glib/glibmm/</path>
    <filename>object_8h</filename>
    <namespace>Glib</namespace>
    <class kind="class">Glib::Object</class>
  </compound>
  <compound kind="file">
    <name>objectbase.h</name>
    <path>/home/murrayc/cvs/gnome216/glibmm/glib/glibmm/</path>
    <filename>objectbase_8h</filename>
    <namespace>Glib</namespace>
    <class kind="class">Glib::ObjectBase</class>
    <member kind="function">
      <type>bool</type>
      <name>_gobject_cppinstance_already_deleted</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>62215893e99ad8dcd9fe12100a4bc7bf</anchor>
      <arglist>(GObject *gobject)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>optioncontext.h</name>
    <path>/home/murrayc/cvs/gnome216/glibmm/glib/glibmm/</path>
    <filename>optioncontext_8h</filename>
    <namespace>Glib</namespace>
    <class kind="class">Glib::OptionError</class>
    <class kind="class">Glib::OptionContext</class>
  </compound>
  <compound kind="file">
    <name>optionentry.h</name>
    <path>/home/murrayc/cvs/gnome216/glibmm/glib/glibmm/</path>
    <filename>optionentry_8h</filename>
    <namespace>Glib</namespace>
    <class kind="class">Glib::OptionEntry</class>
  </compound>
  <compound kind="file">
    <name>optiongroup.h</name>
    <path>/home/murrayc/cvs/gnome216/glibmm/glib/glibmm/</path>
    <filename>optiongroup_8h</filename>
    <namespace>Glib</namespace>
    <class kind="class">Glib::OptionGroup</class>
    <class kind="class">Glib::OptionGroup::CppOptionEntry</class>
  </compound>
  <compound kind="file">
    <name>pattern.h</name>
    <path>/home/murrayc/cvs/gnome216/glibmm/glib/glibmm/</path>
    <filename>pattern_8h</filename>
    <namespace>Glib</namespace>
    <class kind="class">Glib::PatternSpec</class>
    <member kind="typedef">
      <type>_GPatternSpec</type>
      <name>GPatternSpec</name>
      <anchorfile>pattern_8h.html</anchorfile>
      <anchor>3c39d97e1dcfa29a619f51310543e2ca</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>property.h</name>
    <path>/home/murrayc/cvs/gnome216/glibmm/glib/glibmm/</path>
    <filename>property_8h</filename>
    <namespace>Glib</namespace>
    <class kind="class">Glib::PropertyBase</class>
    <class kind="class">Glib::Property</class>
  </compound>
  <compound kind="file">
    <name>propertyproxy.h</name>
    <path>/home/murrayc/cvs/gnome216/glibmm/glib/glibmm/</path>
    <filename>propertyproxy_8h</filename>
    <namespace>Glib</namespace>
    <class kind="class">Glib::PropertyProxy</class>
    <class kind="class">Glib::PropertyProxy_WriteOnly</class>
    <class kind="class">Glib::PropertyProxy_ReadOnly</class>
  </compound>
  <compound kind="file">
    <name>propertyproxy_base.h</name>
    <path>/home/murrayc/cvs/gnome216/glibmm/glib/glibmm/</path>
    <filename>propertyproxy__base_8h</filename>
    <namespace>Glib</namespace>
    <class kind="class">Glib::SignalProxyProperty</class>
    <class kind="class">Glib::PropertyProxy_Base</class>
  </compound>
  <compound kind="file">
    <name>quark.h</name>
    <path>/home/murrayc/cvs/gnome216/glibmm/glib/glibmm/</path>
    <filename>quark_8h</filename>
    <namespace>Glib</namespace>
    <class kind="class">Glib::QueryQuark</class>
    <class kind="class">Glib::Quark</class>
  </compound>
  <compound kind="file">
    <name>random.h</name>
    <path>/home/murrayc/cvs/gnome216/glibmm/glib/glibmm/</path>
    <filename>random_8h</filename>
    <namespace>Glib</namespace>
    <class kind="class">Glib::Rand</class>
    <member kind="typedef">
      <type>_GRand</type>
      <name>GRand</name>
      <anchorfile>random_8h.html</anchorfile>
      <anchor>e538c2f928f2a96cf088e35b095b9ff6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>refptr.h</name>
    <path>/home/murrayc/cvs/gnome216/glibmm/glib/glibmm/</path>
    <filename>refptr_8h</filename>
    <namespace>Glib</namespace>
    <class kind="class">Glib::RefPtr</class>
  </compound>
  <compound kind="file">
    <name>sarray.h</name>
    <path>/home/murrayc/cvs/gnome216/glibmm/glib/glibmm/</path>
    <filename>sarray_8h</filename>
    <namespace>Glib</namespace>
    <member kind="typedef">
      <type>Glib::ArrayHandle&lt; Glib::ustring &gt;</type>
      <name>SArray</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>4e357796ff84955c958209e877211f66</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>shell.h</name>
    <path>/home/murrayc/cvs/gnome216/glibmm/glib/glibmm/</path>
    <filename>shell_8h</filename>
    <namespace>Glib</namespace>
    <class kind="class">Glib::ShellError</class>
    <member kind="function">
      <type>Glib::ArrayHandle&lt; std::string &gt;</type>
      <name>shell_parse_argv</name>
      <anchorfile>group__ShellUtils.html</anchorfile>
      <anchor>gbc52fcb14cfc7a5ba37ca821cc837818</anchor>
      <arglist>(const std::string &amp;command_line)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>shell_quote</name>
      <anchorfile>group__ShellUtils.html</anchorfile>
      <anchor>g55ebfb935f2131b2ae40d339568f568c</anchor>
      <arglist>(const std::string &amp;unquoted_string)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>shell_unquote</name>
      <anchorfile>group__ShellUtils.html</anchorfile>
      <anchor>g449dc37c6ea7e7563740df86e31c263c</anchor>
      <arglist>(const std::string &amp;quoted_string)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>signalproxy.h</name>
    <path>/home/murrayc/cvs/gnome216/glibmm/glib/glibmm/</path>
    <filename>signalproxy_8h</filename>
    <namespace>Glib</namespace>
    <class kind="class">Glib::SignalProxyBase</class>
    <class kind="class">Glib::SignalProxyNormal</class>
    <class kind="class">Glib::SignalProxy0</class>
    <class kind="class">Glib::SignalProxy1</class>
    <class kind="class">Glib::SignalProxy2</class>
    <class kind="class">Glib::SignalProxy3</class>
    <class kind="class">Glib::SignalProxy4</class>
    <class kind="class">Glib::SignalProxy5</class>
    <class kind="class">Glib::SignalProxy6</class>
    <member kind="typedef">
      <type>void(*)</type>
      <name>GCallback</name>
      <anchorfile>signalproxy_8h.html</anchorfile>
      <anchor>4eb7a1152258e2cf66c09b9d4f572364</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="typedef">
      <type>_GObject</type>
      <name>GObject</name>
      <anchorfile>signalproxy_8h.html</anchorfile>
      <anchor>313848a8309d3a04f3ae345620f6be86</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>signalproxy_connectionnode.h</name>
    <path>/home/murrayc/cvs/gnome216/glibmm/glib/glibmm/</path>
    <filename>signalproxy__connectionnode_8h</filename>
    <namespace>Glib</namespace>
    <class kind="class">Glib::SignalProxyConnectionNode</class>
    <member kind="typedef">
      <type>_GObject</type>
      <name>GObject</name>
      <anchorfile>signalproxy__connectionnode_8h.html</anchorfile>
      <anchor>313848a8309d3a04f3ae345620f6be86</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>slisthandle.h</name>
    <path>/home/murrayc/cvs/gnome216/glibmm/glib/glibmm/</path>
    <filename>slisthandle_8h</filename>
    <namespace>Glib</namespace>
    <namespace>Glib::Container_Helpers</namespace>
    <class kind="class">Glib::Container_Helpers::SListHandleIterator</class>
    <class kind="class">Glib::SListHandle</class>
  </compound>
  <compound kind="file">
    <name>spawn.h</name>
    <path>/home/murrayc/cvs/gnome216/glibmm/glib/glibmm/</path>
    <filename>spawn_8h</filename>
    <namespace>Glib</namespace>
    <class kind="class">Glib::SpawnError</class>
    <member kind="typedef">
      <type>GPid</type>
      <name>Pid</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>48d413f720e558ccfc0e5b141fc07f0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>SpawnFlags</name>
      <anchor>g075918988c271e7fb63f1a1d083e26dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_LEAVE_DESCRIPTORS_OPEN</name>
      <anchor>gg075918988c271e7fb63f1a1d083e26dda2a457be3bdc07bbd0d32e1a63264d90</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_DO_NOT_REAP_CHILD</name>
      <anchor>gg075918988c271e7fb63f1a1d083e26dd0ad30b49d46750083ddd1e0643635e85</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_SEARCH_PATH</name>
      <anchor>gg075918988c271e7fb63f1a1d083e26dd341e5cb2803eb06a0f2f0431d6305e04</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_STDOUT_TO_DEV_NULL</name>
      <anchor>gg075918988c271e7fb63f1a1d083e26dd450919630c2ce753374d1d05760bb205</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_STDERR_TO_DEV_NULL</name>
      <anchor>gg075918988c271e7fb63f1a1d083e26dd5ae7fa0d4f6a0bdfc37adeb578634491</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_CHILD_INHERITS_STDIN</name>
      <anchor>gg075918988c271e7fb63f1a1d083e26dd9fb3c6cfddb2ef201f7b11829da8b5d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_FILE_AND_ARGV_ZERO</name>
      <anchor>gg075918988c271e7fb63f1a1d083e26dd55dc12133953441059847e8633227a84</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SpawnFlags</type>
      <name>operator|</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gba6cac919da111ebf69667bf9f8006ff</anchor>
      <arglist>(SpawnFlags lhs, SpawnFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SpawnFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g807af191d1776c33e82c9f6c8228c488</anchor>
      <arglist>(SpawnFlags lhs, SpawnFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SpawnFlags</type>
      <name>operator^</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g84449a9a461b381f88f65435ef8389ec</anchor>
      <arglist>(SpawnFlags lhs, SpawnFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SpawnFlags</type>
      <name>operator~</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g065f45ca68d1397febf331293e4cc4de</anchor>
      <arglist>(SpawnFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>SpawnFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gbbe289c910b34a158f8dc22bb0b0095f</anchor>
      <arglist>(SpawnFlags &amp;lhs, SpawnFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SpawnFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g044d7f5c8c7183fc673d61661b269380</anchor>
      <arglist>(SpawnFlags &amp;lhs, SpawnFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SpawnFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g40166fcca8eb8ec5b148c82444553927</anchor>
      <arglist>(SpawnFlags &amp;lhs, SpawnFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spawn_async_with_pipes</name>
      <anchorfile>group__Spawn.html</anchorfile>
      <anchor>g0a530eed9f6343ea1d51cb8ec8051ce7</anchor>
      <arglist>(const std::string &amp;working_directory, const Glib::ArrayHandle&lt; std::string &gt; &amp;argv, const Glib::ArrayHandle&lt; std::string &gt; &amp;envp, SpawnFlags flags=SpawnFlags(0), const sigc::slot&lt; void &gt; &amp;child_setup=sigc::slot&lt; void &gt;(), Pid *child_pid=0, int *standard_input=0, int *standard_output=0, int *standard_error=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spawn_async_with_pipes</name>
      <anchorfile>group__Spawn.html</anchorfile>
      <anchor>g36b7c1d110d10f86f3ef5d6e10db206f</anchor>
      <arglist>(const std::string &amp;working_directory, const Glib::ArrayHandle&lt; std::string &gt; &amp;argv, SpawnFlags flags=SpawnFlags(0), const sigc::slot&lt; void &gt; &amp;child_setup=sigc::slot&lt; void &gt;(), Pid *child_pid=0, int *standard_input=0, int *standard_output=0, int *standard_error=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spawn_async</name>
      <anchorfile>group__Spawn.html</anchorfile>
      <anchor>g5d42ba801678215f3820382388df32b0</anchor>
      <arglist>(const std::string &amp;working_directory, const Glib::ArrayHandle&lt; std::string &gt; &amp;argv, const Glib::ArrayHandle&lt; std::string &gt; &amp;envp, SpawnFlags flags=SpawnFlags(0), const sigc::slot&lt; void &gt; &amp;child_setup=sigc::slot&lt; void &gt;(), Pid *child_pid=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spawn_async</name>
      <anchorfile>group__Spawn.html</anchorfile>
      <anchor>g0c4e1708989b50fb34266504cc038ee6</anchor>
      <arglist>(const std::string &amp;working_directory, const Glib::ArrayHandle&lt; std::string &gt; &amp;argv, SpawnFlags flags=SpawnFlags(0), const sigc::slot&lt; void &gt; &amp;child_setup=sigc::slot&lt; void &gt;(), Pid *child_pid=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spawn_sync</name>
      <anchorfile>group__Spawn.html</anchorfile>
      <anchor>gd4fbf31fdb5536b104f4f75bf58c60e1</anchor>
      <arglist>(const std::string &amp;working_directory, const Glib::ArrayHandle&lt; std::string &gt; &amp;argv, const Glib::ArrayHandle&lt; std::string &gt; &amp;envp, SpawnFlags flags=SpawnFlags(0), const sigc::slot&lt; void &gt; &amp;child_setup=sigc::slot&lt; void &gt;(), std::string *standard_output=0, std::string *standard_error=0, int *exit_status=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spawn_sync</name>
      <anchorfile>group__Spawn.html</anchorfile>
      <anchor>gcc157258907be90b58184baeebc9c740</anchor>
      <arglist>(const std::string &amp;working_directory, const Glib::ArrayHandle&lt; std::string &gt; &amp;argv, SpawnFlags flags=SpawnFlags(0), const sigc::slot&lt; void &gt; &amp;child_setup=sigc::slot&lt; void &gt;(), std::string *standard_output=0, std::string *standard_error=0, int *exit_status=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spawn_command_line_async</name>
      <anchorfile>group__Spawn.html</anchorfile>
      <anchor>g648167a4af607f87763f1334fe5a472f</anchor>
      <arglist>(const std::string &amp;command_line)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spawn_command_line_sync</name>
      <anchorfile>group__Spawn.html</anchorfile>
      <anchor>g713bdb79396eda85ad186cb2db89564f</anchor>
      <arglist>(const std::string &amp;command_line, std::string *standard_output=0, std::string *standard_error=0, int *exit_status=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spawn_close_pid</name>
      <anchorfile>group__Spawn.html</anchorfile>
      <anchor>gaea8f41c7a08af3b2919ce64fd0c27e5</anchor>
      <arglist>(Pid pid)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>streamiochannel.h</name>
    <path>/home/murrayc/cvs/gnome216/glibmm/glib/glibmm/</path>
    <filename>streamiochannel_8h</filename>
    <namespace>Glib</namespace>
    <class kind="class">Glib::StreamIOChannel</class>
  </compound>
  <compound kind="file">
    <name>stringutils.h</name>
    <path>/home/murrayc/cvs/gnome216/glibmm/glib/glibmm/</path>
    <filename>stringutils_8h</filename>
    <namespace>Glib</namespace>
    <namespace>Glib::Ascii</namespace>
    <member kind="function">
      <type>bool</type>
      <name>str_has_prefix</name>
      <anchorfile>group__StringUtils.html</anchorfile>
      <anchor>g6b7e8354049756e92a97554a107618ac</anchor>
      <arglist>(const std::string &amp;str, const std::string &amp;prefix)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>str_has_suffix</name>
      <anchorfile>group__StringUtils.html</anchorfile>
      <anchor>g5c4e380ffc6617ac61ca92e203e45630</anchor>
      <arglist>(const std::string &amp;str, const std::string &amp;suffix)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>strtod</name>
      <anchorfile>group__StringUtils.html</anchorfile>
      <anchor>ga44aba9faa6575d4881b1fe779464f6b</anchor>
      <arglist>(const std::string &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>strtod</name>
      <anchorfile>group__StringUtils.html</anchorfile>
      <anchor>g6465a8320d790115c41a2c76d1d3233c</anchor>
      <arglist>(const std::string &amp;str, std::string::size_type &amp;end_index, std::string::size_type start_index=0)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>dtostr</name>
      <anchorfile>group__StringUtils.html</anchorfile>
      <anchor>gc740e6c99bca5896ccbfc12b621491ac</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>strescape</name>
      <anchorfile>group__StringUtils.html</anchorfile>
      <anchor>g35e288b5ce34cb15eeec907421d2b77c</anchor>
      <arglist>(const std::string &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>strescape</name>
      <anchorfile>group__StringUtils.html</anchorfile>
      <anchor>gd24f3547c8d6b3ec56d7f5805a11d6ab</anchor>
      <arglist>(const std::string &amp;source, const std::string &amp;exceptions)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>strcompress</name>
      <anchorfile>group__StringUtils.html</anchorfile>
      <anchor>g85cd83bd40baf0119aac3ff0a9a5e7b2</anchor>
      <arglist>(const std::string &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>strerror</name>
      <anchorfile>group__StringUtils.html</anchorfile>
      <anchor>g1eb869894996c91c0f69dbff96714c71</anchor>
      <arglist>(int errnum)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>strsignal</name>
      <anchorfile>group__StringUtils.html</anchorfile>
      <anchor>g44ce9f689aff8abe1e3073b209f360d3</anchor>
      <arglist>(int signum)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>thread.h</name>
    <path>/home/murrayc/cvs/gnome216/glibmm/glib/glibmm/</path>
    <filename>thread_8h</filename>
    <namespace>Glib</namespace>
    <class kind="class">Glib::ThreadError</class>
    <class kind="class">Glib::Thread</class>
    <class kind="class">Glib::Thread::Exit</class>
    <class kind="struct">Glib::StaticMutex</class>
    <class kind="class">Glib::Mutex</class>
    <class kind="class">Glib::Mutex::Lock</class>
    <class kind="struct">Glib::StaticRecMutex</class>
    <class kind="class">Glib::RecMutex</class>
    <class kind="class">Glib::RecMutex::Lock</class>
    <class kind="struct">Glib::StaticRWLock</class>
    <class kind="class">Glib::RWLock</class>
    <class kind="class">Glib::RWLock::ReaderLock</class>
    <class kind="class">Glib::RWLock::WriterLock</class>
    <class kind="class">Glib::Cond</class>
    <class kind="struct">Glib::StaticPrivate</class>
    <class kind="class">Glib::Private</class>
    <member kind="define">
      <type>#define</type>
      <name>GLIBMM_STATIC_MUTEX_INIT</name>
      <anchorfile>thread_8h.html</anchorfile>
      <anchor>5b1b115d491997555a22bce7256cd9b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GLIBMM_STATIC_REC_MUTEX_INIT</name>
      <anchorfile>thread_8h.html</anchorfile>
      <anchor>2c8e79288c96d87c64769786c733a439</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GLIBMM_STATIC_RW_LOCK_INIT</name>
      <anchorfile>thread_8h.html</anchorfile>
      <anchor>be9bd8aefb468fcda2a3945bf9d23c2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GLIBMM_STATIC_PRIVATE_INIT</name>
      <anchorfile>thread_8h.html</anchorfile>
      <anchor>2697c638215d761f0d59b1fb76965234</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ThreadPriority</name>
      <anchor>g9b87dca6496b6ad53baec9ca01318448</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>THREAD_PRIORITY_LOW</name>
      <anchor>gg9b87dca6496b6ad53baec9ca01318448035a7bdc6a5b5eae6f644ed2605e8a37</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>THREAD_PRIORITY_NORMAL</name>
      <anchor>gg9b87dca6496b6ad53baec9ca013184486216bb25baaaca32642841ade911a92e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>THREAD_PRIORITY_HIGH</name>
      <anchor>gg9b87dca6496b6ad53baec9ca01318448ef77081535e90116b203ce3b3b0fe523</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>THREAD_PRIORITY_URGENT</name>
      <anchor>gg9b87dca6496b6ad53baec9ca013184485b79355bbd59c508995af57e0ed39a94</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>NotLock</name>
      <anchor>g2dd111336e3b057b51ca5871795fffa4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_LOCK</name>
      <anchor>gg2dd111336e3b057b51ca5871795fffa49681fb4e85e62ba64e39a12526eaa840</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>TryLock</name>
      <anchor>g7441a36336ea4cdb35c0fddbf3f97b19</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRY_LOCK</name>
      <anchor>gg7441a36336ea4cdb35c0fddbf3f97b19df6b2565785992ff637cbc453988841d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>thread_init</name>
      <anchorfile>group__Threads.html</anchorfile>
      <anchor>gb26d01c776801f1fff00753e97af4fc7</anchor>
      <arglist>(GThreadFunctions *vtable=0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>thread_supported</name>
      <anchorfile>group__Threads.html</anchorfile>
      <anchor>gd59d126f6197035e6f6a31e7f4d87818</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>threadpool.h</name>
    <path>/home/murrayc/cvs/gnome216/glibmm/glib/glibmm/</path>
    <filename>threadpool_8h</filename>
    <namespace>Glib</namespace>
    <class kind="class">Glib::ThreadPool</class>
    <member kind="typedef">
      <type>_GThreadPool</type>
      <name>GThreadPool</name>
      <anchorfile>threadpool_8h.html</anchorfile>
      <anchor>4a5d6bc787e17cf7a86262811f4515e4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>timer.h</name>
    <path>/home/murrayc/cvs/gnome216/glibmm/glib/glibmm/</path>
    <filename>timer_8h</filename>
    <namespace>Glib</namespace>
    <class kind="class">Glib::Timer</class>
    <member kind="typedef">
      <type>_GTimer</type>
      <name>GTimer</name>
      <anchorfile>timer_8h.html</anchorfile>
      <anchor>1a3f571b5e6926bf94c0317114267a7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>usleep</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>5d75264c8b47f13fb33f973b0d4fc73e</anchor>
      <arglist>(unsigned long microseconds)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>timeval.h</name>
    <path>/home/murrayc/cvs/gnome216/glibmm/glib/glibmm/</path>
    <filename>timeval_8h</filename>
    <namespace>Glib</namespace>
    <class kind="struct">Glib::TimeVal</class>
  </compound>
  <compound kind="file">
    <name>unicode.h</name>
    <path>/home/murrayc/cvs/gnome216/glibmm/glib/glibmm/</path>
    <filename>unicode_8h</filename>
    <namespace>Glib</namespace>
    <namespace>Glib::Unicode</namespace>
    <namespace>Glib::Ascii</namespace>
    <member kind="enumeration">
      <name>UnicodeType</name>
      <anchor>gdfbb414be3a4d127146fdca66dc7a46e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_CONTROL</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46ec280382585f1014b43ed228760e7c558</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_FORMAT</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46eaedc3e279c1c7e01f1bec907bbe313ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_UNASSIGNED</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46efc32abac3afbe8380d54790f178fd3de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_PRIVATE_USE</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46e5ca14907043380b1e9d725671bc71a56</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_SURROGATE</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46e0b99b4f93ef273ea4c49fb82970f5e54</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_LOWERCASE_LETTER</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46edb83c3e23724b6ef15888c6527a063bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_MODIFIER_LETTER</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46ee6e48ddd5b4eacb4cbf67fa902743458</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_OTHER_LETTER</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46e57ced328464824fe23113e7b98a4ae61</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_TITLECASE_LETTER</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46eb72e09c06a5aeffccdd94d5695dfcbc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_UPPERCASE_LETTER</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46e8f344db3f8e39ed99bc2c9665ab96c89</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_COMBINING_MARK</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46e5d22c0c4d39d68b815dccd52bb5ff01c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_ENCLOSING_MARK</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46e4508b84626068a2dbf23a69b96475e6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_NON_SPACING_MARK</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46e857864a5d1c145cc3ff8ccba54834f19</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_DECIMAL_NUMBER</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46ee75e5f353bc068ec3d8bf2555c540995</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_LETTER_NUMBER</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46e19811baedb3dbc8afddde43d00eb3cd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_OTHER_NUMBER</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46e45a259cec90b0ada120fe7116be422b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_CONNECT_PUNCTUATION</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46e649c83b23fb3d9bd7bf1803858cc5afe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_DASH_PUNCTUATION</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46ea1169c4e20b3a47f597005f84f9fa7fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_CLOSE_PUNCTUATION</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46e1ffaf2aac92ca1e818cf3e26b8301b90</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_FINAL_PUNCTUATION</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46eb549f212a3f340bd660a962b298409ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_INITIAL_PUNCTUATION</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46eb247e5e7480ecbf382b2128c600b8720</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_OTHER_PUNCTUATION</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46e5c9416f9219bf9282c49b7ca831f0c9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_OPEN_PUNCTUATION</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46e806e11a7f8d1a0b0688a0237ad1fa190</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_CURRENCY_SYMBOL</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46e40b40c2bb5d39acee2b81327e2efb905</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_MODIFIER_SYMBOL</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46e5b693a82d2e497a2b13cae8d5668097c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_MATH_SYMBOL</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46e28100e9fa5a262bbd32b973303746490</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_OTHER_SYMBOL</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46e298582645a73c91d191b7e1dc61d214f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_LINE_SEPARATOR</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46ed7650a40ddf3741e87a1039eba56b1a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_PARAGRAPH_SEPARATOR</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46e5b3c71c265af11b331d0ec4240af1c8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_SPACE_SEPARATOR</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46ec2eafb967dc62399aeb5ff27c8896b0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UnicodeBreakType</name>
      <anchor>g1af1a717c84d71aa4aabc9fc77b4d0ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_MANDATORY</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0ea37c762c3c7b080f5795ed6f828231923</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_CARRIAGE_RETURN</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0ea6b7c9d7a0ac78d14cf06b18bfeb2ccf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_LINE_FEED</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0ea7839936b879938c5056bdb55eb0b6b7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_COMBINING_MARK</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0ea014f326eb07effe48f1b771459caa7c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_SURROGATE</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0ea032b712c48700209c7cc414ca88cda34</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_ZERO_WIDTH_SPACE</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0eadb5ff8a11c4e596677d161903c732c56</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_INSEPARABLE</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0ea38f51c8283586493a3ebd45fa3b0113e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_NON_BREAKING_GLUE</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0ea47784c7e2cd80f6ac179de7f7a3f54e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_CONTINGENT</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0eae80d6fef8acf765da47c8235e39f4896</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_SPACE</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0eab37a6597dbf2e248b610769be7e5cb3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_AFTER</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0eada4027a9bfc5ffdf90e3be612adad7aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_BEFORE</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0eab1efcdcd3d6ecb55dff58a2e2ee1b9e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_BEFORE_AND_AFTER</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0eaafce05d8590e1b40ec427f8f78cf15ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_HYPHEN</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0ea7e6dd69fc00fdc42ab091a2916426dbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_NON_STARTER</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0eabe412d94a1f7d9e92cc5a20f0b549626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_OPEN_PUNCTUATION</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0ea52ebd39d1b02dfd368992a2ef8e7fa7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_CLOSE_PUNCTUATION</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0ead1284afc0511ab69aa18554b8306fbca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_QUOTATION</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0ea8fe57a799eacc3299fd256285dd1246d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_EXCLAMATION</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0eaf628849c1e5b531c022e12695c1f6f5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_IDEOGRAPHIC</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0ea22047a88734e9fe1e9e0fef994cfb20b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_NUMERIC</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0ea50a61c3c53da7558d08c1fcbcfc3b138</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_INFIX_SEPARATOR</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0ea07f3d0d76db141033eff38ee7577ffd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_SYMBOL</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0eafc02ec4862f016b6c2da35592f6cd62b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_ALPHABETIC</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0eaea27a8970e74f93f485d45f6a1684586</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_PREFIX</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0ea580794ffc9992e65666adce0611eecb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_POSTFIX</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0ea7ca3941d5dea03a5c824ae55212db01a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_COMPLEX_CONTEXT</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0ea3a96b8e59ba5815700d33c1f6006a339</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_AMBIGUOUS</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0eae79244811e61b30eb68ee02dc45f1c09</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_UNKNOWN</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0eaeb94f98b2233fae0afb38bf115b4b42d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_NEXT_LINE</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0ea7ffad3080f483a6b97680db786836ced</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_WORD_JOINER</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0ea9a74e7d947f75ef93d4e3aacebdb898b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>AsciiType</name>
      <anchor>g2e5a690ed07dfaa6f9ad9f1c57acd787</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASCII_ALNUM</name>
      <anchor>gg2e5a690ed07dfaa6f9ad9f1c57acd787f7d63a99479102b5391b44f631b5f009</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASCII_ALPHA</name>
      <anchor>gg2e5a690ed07dfaa6f9ad9f1c57acd787c87947c729ac3c3f9f58b0ca28460152</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASCII_CNTRL</name>
      <anchor>gg2e5a690ed07dfaa6f9ad9f1c57acd7872e19c57ce5a6eac38d911a86cc44a2fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASCII_DIGIT</name>
      <anchor>gg2e5a690ed07dfaa6f9ad9f1c57acd7879acd9a82d0670a3eb0377db782f48853</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASCII_GRAPH</name>
      <anchor>gg2e5a690ed07dfaa6f9ad9f1c57acd7872ecdbe5137af423fce73ff2bbb34d625</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASCII_LOWER</name>
      <anchor>gg2e5a690ed07dfaa6f9ad9f1c57acd787875d3cb7494e1548db0d37ab44d4057e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASCII_PRINT</name>
      <anchor>gg2e5a690ed07dfaa6f9ad9f1c57acd7879b1775043a8043d994c0c0ab890e86c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASCII_PUNCT</name>
      <anchor>gg2e5a690ed07dfaa6f9ad9f1c57acd787d3416d8662560db626259013ff72c58f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASCII_SPACE</name>
      <anchor>gg2e5a690ed07dfaa6f9ad9f1c57acd7877d7a68814efba3cf3d294475123413ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASCII_UPPER</name>
      <anchor>gg2e5a690ed07dfaa6f9ad9f1c57acd7875ae30681069b2ab88eed13e358c08090</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASCII_XDIGIT</name>
      <anchor>gg2e5a690ed07dfaa6f9ad9f1c57acd787d78490a35d65839f2f06449e7e472337</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>NormalizeMode</name>
      <anchor>g18199b64f406e397627a4e7fc799f848</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NORMALIZE_DEFAULT</name>
      <anchor>gg18199b64f406e397627a4e7fc799f848cbaee513b23e0066962df2e540cd4c99</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NORMALIZE_NFD</name>
      <anchor>gg18199b64f406e397627a4e7fc799f848169a0ae0910535038d8d403f874f0b5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NORMALIZE_DEFAULT_COMPOSE</name>
      <anchor>gg18199b64f406e397627a4e7fc799f848d9fb4be6b95958030771b4e8cba4144c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NORMALIZE_NFC</name>
      <anchor>gg18199b64f406e397627a4e7fc799f84820e4b8b42b12a7972ca4f6c84030978d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NORMALIZE_ALL</name>
      <anchor>gg18199b64f406e397627a4e7fc799f848a1cf5911572000f5273dc46fe2c5b270</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NORMALIZE_NFKD</name>
      <anchor>gg18199b64f406e397627a4e7fc799f848995775ef324bbd76a91a74c7f2686867</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NORMALIZE_ALL_COMPOSE</name>
      <anchor>gg18199b64f406e397627a4e7fc799f8487c98a2300648a33ca0ebc87fed999ca5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NORMALIZE_NFKC</name>
      <anchor>gg18199b64f406e397627a4e7fc799f848a7f62ac84c5ed8a8868cbb49a889dd98</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>AsciiType</type>
      <name>operator|</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g5bc1518eb5547dbb8af77b944ccaa048</anchor>
      <arglist>(AsciiType lhs, AsciiType rhs)</arglist>
    </member>
    <member kind="function">
      <type>AsciiType</type>
      <name>operator &amp;</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ge25c16ef876bb93950203cff88ffd89c</anchor>
      <arglist>(AsciiType lhs, AsciiType rhs)</arglist>
    </member>
    <member kind="function">
      <type>AsciiType</type>
      <name>operator^</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g682a545ca2e86b3e162305e4f14fa8d5</anchor>
      <arglist>(AsciiType lhs, AsciiType rhs)</arglist>
    </member>
    <member kind="function">
      <type>AsciiType</type>
      <name>operator~</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gd7ea47582094c6d092a8f485e1e709c6</anchor>
      <arglist>(AsciiType flags)</arglist>
    </member>
    <member kind="function">
      <type>AsciiType &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g69bba23f4c9a83c268d0599f241b8ebe</anchor>
      <arglist>(AsciiType &amp;lhs, AsciiType rhs)</arglist>
    </member>
    <member kind="function">
      <type>AsciiType &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ge3a9f95c99ce7e8f80ae78f4a8fd33cb</anchor>
      <arglist>(AsciiType &amp;lhs, AsciiType rhs)</arglist>
    </member>
    <member kind="function">
      <type>AsciiType &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gc1b0239e539cf250333fe0adc04dbb41</anchor>
      <arglist>(AsciiType &amp;lhs, AsciiType rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>validate</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>b64054c4576955fd0285dae603fad4bc</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isalnum</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>bd50a6139564bb0d2351855470d1a69b</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isalpha</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>9620b1df5b96a81a44cebbee81b2f09a</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>iscntrl</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>937030a624b77cf949f95c0e9a8c6461</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isdigit</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>1f82bfebc6c5094bfb6372a6ba4c4019</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isgraph</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>8c3c04d4dcdafc485266a393da455ee3</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>islower</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>eef7ef9a28faaa25215b1c5e94bab1dd</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isprint</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>e4d9f8199f86bd64d269854dffb92008</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ispunct</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>b81127c9fc1a6ddc04f3f7171c23111b</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isspace</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>a78d1b888a48ab92ddcbc6122592478f</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isupper</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>042c4000427af2f777150f5d88f3d154</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isxdigit</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>059de050d5449076c62756a490c91eba</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>istitle</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>083a3cf6b6fd165b0e272ad1e4c6ac33</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isdefined</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>8d4c5c43e6892e7567d3e30f817ff9a2</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>iswide</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>fa1f9e1a5bcba3dc2e2c6bf4d39620c7</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>gunichar</type>
      <name>toupper</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>1abe6ec99b03e1a4eb4462251e088e85</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>gunichar</type>
      <name>tolower</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>0b6fd738acb468a21fd83e66af9b67a8</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>gunichar</type>
      <name>totitle</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>5c4a3831dfd19f0a05aaea992795f939</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>digit_value</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>5cf00f04bd69129448f48cd278bff522</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>xdigit_value</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>8f036631847c5058f13196a9f815822b</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>Glib::UnicodeType</type>
      <name>type</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>042d1c3fdb1a22daf647211210af80c3</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>Glib::UnicodeBreakType</type>
      <name>break_type</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>c426083d525f1e30e4b5bff28962575b</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isalnum</name>
      <anchorfile>namespaceGlib_1_1Ascii.html</anchorfile>
      <anchor>237f239d63fea6102675733dc5ad4532</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isalpha</name>
      <anchorfile>namespaceGlib_1_1Ascii.html</anchorfile>
      <anchor>0b553edea22d284c188942fab794cc78</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>iscntrl</name>
      <anchorfile>namespaceGlib_1_1Ascii.html</anchorfile>
      <anchor>fa8fe78a0c26cc3827c6240785aa135d</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isdigit</name>
      <anchorfile>namespaceGlib_1_1Ascii.html</anchorfile>
      <anchor>65a4e1ccf3858e96bcedc19d2f4b11dd</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isgraph</name>
      <anchorfile>namespaceGlib_1_1Ascii.html</anchorfile>
      <anchor>7f484ef6bd6d06df723e31b357f868a3</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>islower</name>
      <anchorfile>namespaceGlib_1_1Ascii.html</anchorfile>
      <anchor>cae72029ba931a9921a685f5a9aae892</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isprint</name>
      <anchorfile>namespaceGlib_1_1Ascii.html</anchorfile>
      <anchor>8157fffa4686d541c5953fc8e12f5cfa</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ispunct</name>
      <anchorfile>namespaceGlib_1_1Ascii.html</anchorfile>
      <anchor>7fb86bc4209b57cfb3c4f52b841d73e4</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isspace</name>
      <anchorfile>namespaceGlib_1_1Ascii.html</anchorfile>
      <anchor>a09ae30b62f155b8921cc9982342a314</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isupper</name>
      <anchorfile>namespaceGlib_1_1Ascii.html</anchorfile>
      <anchor>7f02fe9caa1467a4cfd4de81b9f29ac5</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isxdigit</name>
      <anchorfile>namespaceGlib_1_1Ascii.html</anchorfile>
      <anchor>d56e2eca24891cbfbc94c5466f33ba7e</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>tolower</name>
      <anchorfile>namespaceGlib_1_1Ascii.html</anchorfile>
      <anchor>441978a247c1dc46bbe7159fa25c4365</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>toupper</name>
      <anchorfile>namespaceGlib_1_1Ascii.html</anchorfile>
      <anchor>ffdbf0a8cc3cf286605a0ead51e524f6</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>digit_value</name>
      <anchorfile>namespaceGlib_1_1Ascii.html</anchorfile>
      <anchor>597106ad0bd771bef0698ca1482db880</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>xdigit_value</name>
      <anchorfile>namespaceGlib_1_1Ascii.html</anchorfile>
      <anchor>06d4bb1120cb8b48f7a8a4f1e9aeab53</anchor>
      <arglist>(char c)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ustring.h</name>
    <path>/home/murrayc/cvs/gnome216/glibmm/glib/glibmm/</path>
    <filename>ustring_8h</filename>
    <namespace>Glib</namespace>
    <class kind="class">Glib::ustring_Iterator</class>
    <class kind="class">Glib::ustring</class>
    <member kind="function">
      <type>gunichar</type>
      <name>get_unichar_from_std_iterator</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>b29e9e1caba4f61fddb0dfef56203255</anchor>
      <arglist>(std::string::const_iterator pos) G_GNUC_PURE</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>utility.h</name>
    <path>/home/murrayc/cvs/gnome216/glibmm/glib/glibmm/</path>
    <filename>utility_8h</filename>
  </compound>
  <compound kind="file">
    <name>value.h</name>
    <path>/home/murrayc/cvs/gnome216/glibmm/glib/glibmm/</path>
    <filename>value_8h</filename>
    <namespace>Glib</namespace>
    <class kind="class">Glib::ValueBase</class>
    <class kind="class">Glib::ValueBase_Boxed</class>
    <class kind="class">Glib::ValueBase_Object</class>
    <class kind="class">Glib::ValueBase_Enum</class>
    <class kind="class">Glib::ValueBase_Flags</class>
    <class kind="class">Glib::ValueBase_String</class>
    <class kind="class">Glib::Value_Boxed</class>
    <class kind="class">Glib::Value&lt; std::string &gt;</class>
    <class kind="class">Glib::Value&lt; Glib::ustring &gt;</class>
    <class kind="class">Glib::Value_Enum</class>
    <class kind="class">Glib::Value_Flags</class>
    <member kind="define">
      <type>#define</type>
      <name>_GLIBMM_VALUE_H_INCLUDE_VALUE_CUSTOM_H</name>
      <anchorfile>value_8h.html</anchorfile>
      <anchor>96bb56abb7b9b78918d36048571fdfc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_GLIBMM_VALUE_H_INCLUDE_VALUE_BASICTYPES_H</name>
      <anchorfile>value_8h.html</anchorfile>
      <anchor>d9e26fc49d9c36be84dcd4c96c77a177</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>value_basictypes.h</name>
    <path>/home/murrayc/cvs/gnome216/glibmm/glib/glibmm/</path>
    <filename>value__basictypes_8h</filename>
    <namespace>Glib</namespace>
    <class kind="class">Glib::Value&lt; bool &gt;</class>
    <class kind="class">Glib::Value&lt; char &gt;</class>
    <class kind="class">Glib::Value&lt; unsigned char &gt;</class>
    <class kind="class">Glib::Value&lt; int &gt;</class>
    <class kind="class">Glib::Value&lt; unsigned int &gt;</class>
    <class kind="class">Glib::Value&lt; long &gt;</class>
    <class kind="class">Glib::Value&lt; unsigned long &gt;</class>
    <class kind="class">Glib::Value&lt; long long &gt;</class>
    <class kind="class">Glib::Value&lt; unsigned long long &gt;</class>
    <class kind="class">Glib::Value&lt; float &gt;</class>
    <class kind="class">Glib::Value&lt; double &gt;</class>
    <class kind="class">Glib::Value&lt; void * &gt;</class>
  </compound>
  <compound kind="file">
    <name>value_custom.h</name>
    <path>/home/murrayc/cvs/gnome216/glibmm/glib/glibmm/</path>
    <filename>value__custom_8h</filename>
    <namespace>Glib</namespace>
    <class kind="class">Glib::Value_Pointer</class>
    <class kind="class">Glib::Value</class>
    <class kind="class">Glib::Value&lt; T * &gt;</class>
    <class kind="class">Glib::Value&lt; const T * &gt;</class>
  </compound>
  <compound kind="file">
    <name>wrap.h</name>
    <path>/home/murrayc/cvs/gnome216/glibmm/glib/glibmm/</path>
    <filename>wrap_8h</filename>
    <namespace>Glib</namespace>
    <member kind="typedef">
      <type>Glib::ObjectBase *(*)</type>
      <name>WrapNewFunction</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ea55a844eba9e824e9445a26cfdcd465</anchor>
      <arglist>(GObject *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wrap_register_init</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>17035ac5c11853e9038628ae31b5633d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wrap_register_cleanup</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>81058a22c4c6b1c5604ea65ba05ad364</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wrap_register</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>fd0875fdbef4a91772a0d6ab569d6212</anchor>
      <arglist>(GType type, WrapNewFunction func)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ObjectBase *</type>
      <name>wrap_auto</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>54d01f444df296511babfe2ee153368d</anchor>
      <arglist>(GObject *object, bool take_copy=false)</arglist>
    </member>
    <member kind="function">
      <type>T::BaseObjectType *</type>
      <name>unwrap</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>104920ed41b79c0b3b0aeaf3ed63d84b</anchor>
      <arglist>(T *ptr)</arglist>
    </member>
    <member kind="function">
      <type>const T::BaseObjectType *</type>
      <name>unwrap</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>666f8c59e1804aeb02f48ff940fa602c</anchor>
      <arglist>(const T *ptr)</arglist>
    </member>
    <member kind="function">
      <type>T::BaseObjectType *</type>
      <name>unwrap</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>5bbf90603746c170d0a99cef59bbe2d0</anchor>
      <arglist>(const Glib::RefPtr&lt; T &gt; &amp;ptr)</arglist>
    </member>
    <member kind="function">
      <type>const T::BaseObjectType *</type>
      <name>unwrap</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>5bd5ddd4c962f4a26bf52a3ec783e8c5</anchor>
      <arglist>(const Glib::RefPtr&lt; const T &gt; &amp;ptr)</arglist>
    </member>
    <member kind="function">
      <type>T::BaseObjectType *</type>
      <name>unwrap_copy</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>6cdcc90e63b4650a8f03f72bce01902a</anchor>
      <arglist>(const Glib::RefPtr&lt; T &gt; &amp;ptr)</arglist>
    </member>
    <member kind="function">
      <type>const T::BaseObjectType *</type>
      <name>unwrap_copy</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>d344713e5c0ac8ee6a46f9d04181a60e</anchor>
      <arglist>(const Glib::RefPtr&lt; const T &gt; &amp;ptr)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>ContHandles</name>
    <title>Generic container converters</title>
    <filename>group__ContHandles.html</filename>
    <subgroup>ContHelpers</subgroup>
    <class kind="class">Glib::ArrayHandle</class>
    <class kind="class">Glib::Sequence</class>
    <class kind="class">Glib::ListHandle</class>
    <class kind="class">Glib::SListHandle</class>
    <member kind="typedef">
      <type>ArrayHandle&lt; Glib::ustring &gt;</type>
      <name>StringArrayHandle</name>
      <anchorfile>group__ContHandles.html</anchorfile>
      <anchor>g8e243b697be740f5f7d4b578ae50db41</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>OwnershipType</name>
      <anchor>g64c27560b41710ccf64a3679a3ba3f20</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OWNERSHIP_NONE</name>
      <anchor>gg64c27560b41710ccf64a3679a3ba3f207d594cffcc2d2d6c4313ddb4d6613c79</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OWNERSHIP_SHALLOW</name>
      <anchor>gg64c27560b41710ccf64a3679a3ba3f20448c598cdc37e2de8a162e1020001715</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OWNERSHIP_DEEP</name>
      <anchor>gg64c27560b41710ccf64a3679a3ba3f202a6d6bfadc36f9eda31af79d32928c6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Sequence&lt; Iterator &gt;</type>
      <name>sequence</name>
      <anchorfile>group__ContHandles.html</anchorfile>
      <anchor>g33e5a3a70ef5f7bed112046726ff8b04</anchor>
      <arglist>(Iterator pbegin, Iterator pend)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>ContHelpers</name>
    <title>Helper classes</title>
    <filename>group__ContHelpers.html</filename>
    <class kind="class">Glib::Container_Helpers::ArrayHandleIterator</class>
    <class kind="struct">Glib::Container_Helpers::TypeTraits</class>
    <class kind="class">Glib::Container_Helpers::ListHandleIterator</class>
    <class kind="class">Glib::Container_Helpers::SListHandleIterator</class>
  </compound>
  <compound kind="group">
    <name>CharsetConv</name>
    <title>Character Set Conversion</title>
    <filename>group__CharsetConv.html</filename>
    <class kind="class">Glib::ConvertError</class>
    <class kind="class">Glib::IConv</class>
    <member kind="function">
      <type>bool</type>
      <name>get_charset</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>gbf5fac564c47a7a9ad6037044c3909f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_charset</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>g88965337df48a173a6b013e8243e4631</anchor>
      <arglist>(std::string &amp;charset)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>convert</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>g58f7e4556c436a96c64b186bbc8f7f4c</anchor>
      <arglist>(const std::string &amp;str, const std::string &amp;to_codeset, const std::string &amp;from_codeset)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>convert_with_fallback</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>g40b5aa172fabd1f3dbf50a962d0d351f</anchor>
      <arglist>(const std::string &amp;str, const std::string &amp;to_codeset, const std::string &amp;from_codeset)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>convert_with_fallback</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>gf1b091e4397a7637e884148484b1f71e</anchor>
      <arglist>(const std::string &amp;str, const std::string &amp;to_codeset, const std::string &amp;from_codeset, const Glib::ustring &amp;fallback)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>locale_to_utf8</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>g4517b17f2aad4cd5c0e0640de212d928</anchor>
      <arglist>(const std::string &amp;opsys_string)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>locale_from_utf8</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>gcc062729285890a7e9b22bece6fb987c</anchor>
      <arglist>(const Glib::ustring &amp;utf8_string)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>filename_to_utf8</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>g6cf95dc00505401594260a360d70c17b</anchor>
      <arglist>(const std::string &amp;opsys_string)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>filename_from_utf8</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>g2bd94064ad97b43324a7854b62f0835b</anchor>
      <arglist>(const Glib::ustring &amp;utf8_string)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>filename_from_uri</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>gda23cd7f7dc8eb25e99b867a55551763</anchor>
      <arglist>(const Glib::ustring &amp;uri, Glib::ustring &amp;hostname)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>filename_from_uri</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>gb1cb94f4a4a70bad06b715fb14a252d9</anchor>
      <arglist>(const Glib::ustring &amp;uri)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>filename_to_uri</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>ge1b2f056bde3fbab578c602fe42e3de9</anchor>
      <arglist>(const std::string &amp;filename, const Glib::ustring &amp;hostname)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>filename_to_uri</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>gaf69aec83665229cc06596cf627d9d5a</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>filename_display_basename</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>g05dd67157ad35da4401263247b6f4d81</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>filename_display_name</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>gbc1b404cc965f3da6beecddfe2623afc</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>FileUtils</name>
    <title>File Utilities</title>
    <filename>group__FileUtils.html</filename>
    <class kind="class">Glib::FileError</class>
    <class kind="class">Glib::DirIterator</class>
    <class kind="class">Glib::Dir</class>
    <member kind="function">
      <type>bool</type>
      <name>file_test</name>
      <anchorfile>group__FileUtils.html</anchorfile>
      <anchor>g0b2fce78896a9a84f7ea3a5646cc7d36</anchor>
      <arglist>(const std::string &amp;filename, FileTest test)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>mkstemp</name>
      <anchorfile>group__FileUtils.html</anchorfile>
      <anchor>ge4c8d716bd109b6b8e1420a8c20b3507</anchor>
      <arglist>(std::string &amp;filename_template)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>file_open_tmp</name>
      <anchorfile>group__FileUtils.html</anchorfile>
      <anchor>ge91f239f1cf0123399374deed54fbf3a</anchor>
      <arglist>(std::string &amp;name_used, const std::string &amp;prefix)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>file_open_tmp</name>
      <anchorfile>group__FileUtils.html</anchorfile>
      <anchor>g682379de4ea119540b4bdc1759e93e1d</anchor>
      <arglist>(std::string &amp;name_used)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>file_get_contents</name>
      <anchorfile>group__FileUtils.html</anchorfile>
      <anchor>g835da54212fe78e833ac55b49150b989</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>MainLoop</name>
    <title>The Main Event Loop</title>
    <filename>group__MainLoop.html</filename>
    <class kind="class">Glib::PollFD</class>
    <class kind="class">Glib::SignalTimeout</class>
    <class kind="class">Glib::SignalIdle</class>
    <class kind="class">Glib::SignalIO</class>
    <class kind="class">Glib::SignalChildWatch</class>
    <class kind="class">Glib::MainContext</class>
    <class kind="class">Glib::MainLoop</class>
    <class kind="class">Glib::Source</class>
    <class kind="class">Glib::TimeoutSource</class>
    <class kind="class">Glib::IdleSource</class>
    <class kind="class">Glib::IOSource</class>
    <member kind="enumvalue">
      <name>PRIORITY_HIGH</name>
      <anchor>gg0c450f82b9e34689e2dda2038ba7834fa3219d7be6fa3282a80d7a850c401db9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRIORITY_DEFAULT</name>
      <anchor>gg0c450f82b9e34689e2dda2038ba7834f597ed3aa6067516c9c752896f3816b5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRIORITY_HIGH_IDLE</name>
      <anchor>gg0c450f82b9e34689e2dda2038ba7834ff2d20696a8afab425c00268d981e9897</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRIORITY_DEFAULT_IDLE</name>
      <anchor>gg0c450f82b9e34689e2dda2038ba7834fe8c1127af0a2dab71f196a957dab8375</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRIORITY_LOW</name>
      <anchor>gg0c450f82b9e34689e2dda2038ba7834fc6034649b50f9f92a69c1e67b92ecfc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>IOCondition</name>
      <anchor>gbd96381793b70d4ae32c725926990918</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_IN</name>
      <anchor>ggbd96381793b70d4ae32c725926990918f244f3e8c1c9525762f3630befd76336</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_OUT</name>
      <anchor>ggbd96381793b70d4ae32c72592699091860f61c8f26f2bb61afd3ad8afd673099</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_PRI</name>
      <anchor>ggbd96381793b70d4ae32c72592699091836bb5411dda1131e5c23e17a8619c820</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERR</name>
      <anchor>ggbd96381793b70d4ae32c7259269909182e402c9fd5879c49ef5359fa4189acd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_HUP</name>
      <anchor>ggbd96381793b70d4ae32c725926990918b5dcc0e24c236c027b041d362dcff35b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_NVAL</name>
      <anchor>ggbd96381793b70d4ae32c725926990918d37b5d6ba6a0c1ad98510f352ac2f885</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>IOCondition</type>
      <name>operator|</name>
      <anchorfile>group__MainLoop.html</anchorfile>
      <anchor>gb5937e9164f36f75ba87fd67903348d5</anchor>
      <arglist>(IOCondition lhs, IOCondition rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOCondition</type>
      <name>operator &amp;</name>
      <anchorfile>group__MainLoop.html</anchorfile>
      <anchor>g1ce6f8c4204f496d7669e987f2e291b8</anchor>
      <arglist>(IOCondition lhs, IOCondition rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOCondition</type>
      <name>operator^</name>
      <anchorfile>group__MainLoop.html</anchorfile>
      <anchor>g6416bbf923045261beb85241fff8ef0d</anchor>
      <arglist>(IOCondition lhs, IOCondition rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOCondition</type>
      <name>operator~</name>
      <anchorfile>group__MainLoop.html</anchorfile>
      <anchor>g85461947d24f306cefd2fe17999deb97</anchor>
      <arglist>(IOCondition flags)</arglist>
    </member>
    <member kind="function">
      <type>IOCondition &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__MainLoop.html</anchorfile>
      <anchor>g8269a01826f8737d98ab0d345a0004f4</anchor>
      <arglist>(IOCondition &amp;lhs, IOCondition rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOCondition &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__MainLoop.html</anchorfile>
      <anchor>gd1f673b77dfb469e7bf71f2f6310e806</anchor>
      <arglist>(IOCondition &amp;lhs, IOCondition rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOCondition &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__MainLoop.html</anchorfile>
      <anchor>g995d6d5d01db67af62661bcd5dfd1ad6</anchor>
      <arglist>(IOCondition &amp;lhs, IOCondition rhs)</arglist>
    </member>
    <member kind="function">
      <type>SignalTimeout</type>
      <name>signal_timeout</name>
      <anchorfile>group__MainLoop.html</anchorfile>
      <anchor>gadb206fcc112f086f9d47c016b1f2175</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SignalIdle</type>
      <name>signal_idle</name>
      <anchorfile>group__MainLoop.html</anchorfile>
      <anchor>g76792522d9680a05e232d3519a25f98d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SignalIO</type>
      <name>signal_io</name>
      <anchorfile>group__MainLoop.html</anchorfile>
      <anchor>gf391654b755a32169d18be4835677376</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SignalChildWatch</type>
      <name>signal_child_watch</name>
      <anchorfile>group__MainLoop.html</anchorfile>
      <anchor>g11ee7db80cc44ece02056a38bb049e3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; MainContext &gt;</type>
      <name>wrap</name>
      <anchorfile>group__MainLoop.html</anchorfile>
      <anchor>g043c5714afbad2745b27301dd58470a4</anchor>
      <arglist>(GMainContext *gobject, bool take_copy=false)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; MainLoop &gt;</type>
      <name>wrap</name>
      <anchorfile>group__MainLoop.html</anchorfile>
      <anchor>g22ea72cda4ef327ca03fb72d6a3bea89</anchor>
      <arglist>(GMainLoop *gobject, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>Markup</name>
    <title>Simple XML Subset Parser</title>
    <filename>group__Markup.html</filename>
    <class kind="class">Glib::MarkupError</class>
    <class kind="class">Glib::Markup::AttributeKeyLess</class>
    <class kind="class">Glib::Markup::Parser</class>
    <class kind="class">Glib::Markup::ParseContext</class>
    <member kind="typedef">
      <type>Glib::MarkupError</type>
      <name>Error</name>
      <anchorfile>group__Markup.html</anchorfile>
      <anchor>g7d0403c76601e7d3ba4641737e094e77</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BAD_UTF8</name>
      <anchorfile>group__Markup.html</anchorfile>
      <anchor>g1422c4a583441bbe490b8ed47d7fe1a730c6a6f1fcf9249db2692abc39b34c48</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>EMPTY</name>
      <anchorfile>group__Markup.html</anchorfile>
      <anchor>g1422c4a583441bbe490b8ed47d7fe1a75b3981a2a475d8b0ab4481c931c816dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PARSE</name>
      <anchorfile>group__Markup.html</anchorfile>
      <anchor>g1422c4a583441bbe490b8ed47d7fe1a7db7227e7bfab9c3409b7f5ce7da8075c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNKNOWN_ELEMENT</name>
      <anchorfile>group__Markup.html</anchorfile>
      <anchor>g1422c4a583441bbe490b8ed47d7fe1a72a63efd807b6e40451b57e128b34d9f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNKNOWN_ATTRIBUTE</name>
      <anchorfile>group__Markup.html</anchorfile>
      <anchor>g1422c4a583441bbe490b8ed47d7fe1a7ef0a541fa2885ffc56d0703a55afa735</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>INVALID_CONTENT</name>
      <anchorfile>group__Markup.html</anchorfile>
      <anchor>g1422c4a583441bbe490b8ed47d7fe1a74051754fb4e8f11408fe06445e99761e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>escape_text</name>
      <anchorfile>group__Markup.html</anchorfile>
      <anchor>gc95c5843d8dada8449f90f2fd635feb1</anchor>
      <arglist>(const Glib::ustring &amp;text)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>MiscUtils</name>
    <title>Miscellaneous Utility Functions</title>
    <filename>group__MiscUtils.html</filename>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_application_name</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>g9c2f67828083d74925b23c59ab868698</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_application_name</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>g40e45835b7b461cba0f7a10fbb63c0d3</anchor>
      <arglist>(const Glib::ustring &amp;application_name)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_prgname</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>g391655dededb496010eee2e92d0f1fdf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_prgname</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>g7d5c429822c09048892c4dee9c8e08c1</anchor>
      <arglist>(const std::string &amp;prgname)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getenv</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>g5e186fdb08835342a5866b11fe787ebb</anchor>
      <arglist>(const std::string &amp;variable, bool &amp;found)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getenv</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>g8e2c8f250aa7f059956737851ace08f6</anchor>
      <arglist>(const std::string &amp;variable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setenv</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>g862657f21e5a930541d048a920204f59</anchor>
      <arglist>(const std::string &amp;variable, const std::string &amp;value, bool overwrite=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unsetenv</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>g6fb89001630714ec9ee5244cab56343e</anchor>
      <arglist>(const std::string &amp;variable)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_user_name</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>g52964bfd712e8c9e688f668da51f3ed9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_real_name</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>g30692e3263e66868878f535e0b7c9722</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_home_dir</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>g9412ea70c7fea058c03211dac318f8e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_tmp_dir</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>gc42272146fd9320958132f1591d28991</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_current_dir</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>g06d93c95572d6a382b8cc4e09dd5a339</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_user_data_dir</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>g821b704b5ede1583e4057990976d394b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_user_config_dir</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ge517b931f4753abcd48adb2769a8fc48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_user_cache_dir</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ga68121f26e82df1c293c82b89c8998e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>path_is_absolute</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>gd82525f39f7408f97f2c096c4f721b3b</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>path_skip_root</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>g306eee64abc3d28993895b826f4dd533</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>path_get_basename</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>g20ebf2917a7fce5d1901568017b95a35</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>path_get_dirname</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ge03457226c4239a74b83486739521434</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>build_filename</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ga4a70bf050b3f318f87049ed30206a9a</anchor>
      <arglist>(const Glib::ArrayHandle&lt; std::string &gt; &amp;elements)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>build_filename</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>gda06023cc39be3a44eb68e38d6cbea6c</anchor>
      <arglist>(const std::string &amp;elem1, const std::string &amp;elem2)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>build_path</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>g6afc89d45cc34f3cfce4a55f3f5e7afa</anchor>
      <arglist>(const std::string &amp;separator, const Glib::ArrayHandle&lt; std::string &gt; &amp;elements)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>find_program_in_path</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ga4c4ecb9a3eb803ae6d9dee51e1e5b14</anchor>
      <arglist>(const std::string &amp;program)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>PatternMatching</name>
    <title>Glob-style Pattern Matching</title>
    <filename>group__PatternMatching.html</filename>
    <class kind="class">Glib::PatternSpec</class>
  </compound>
  <compound kind="group">
    <name>Random</name>
    <title>Random Numbers</title>
    <filename>group__Random.html</filename>
    <class kind="class">Glib::Rand</class>
  </compound>
  <compound kind="group">
    <name>ShellUtils</name>
    <title>Shell-related Utilities</title>
    <filename>group__ShellUtils.html</filename>
    <class kind="class">Glib::ShellError</class>
    <member kind="function">
      <type>Glib::ArrayHandle&lt; std::string &gt;</type>
      <name>shell_parse_argv</name>
      <anchorfile>group__ShellUtils.html</anchorfile>
      <anchor>gbc52fcb14cfc7a5ba37ca821cc837818</anchor>
      <arglist>(const std::string &amp;command_line)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>shell_quote</name>
      <anchorfile>group__ShellUtils.html</anchorfile>
      <anchor>g55ebfb935f2131b2ae40d339568f568c</anchor>
      <arglist>(const std::string &amp;unquoted_string)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>shell_unquote</name>
      <anchorfile>group__ShellUtils.html</anchorfile>
      <anchor>g449dc37c6ea7e7563740df86e31c263c</anchor>
      <arglist>(const std::string &amp;quoted_string)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>Spawn</name>
    <title>Spawning Processes</title>
    <filename>group__Spawn.html</filename>
    <class kind="class">Glib::SpawnError</class>
    <member kind="function">
      <type>void</type>
      <name>spawn_async_with_pipes</name>
      <anchorfile>group__Spawn.html</anchorfile>
      <anchor>g0a530eed9f6343ea1d51cb8ec8051ce7</anchor>
      <arglist>(const std::string &amp;working_directory, const Glib::ArrayHandle&lt; std::string &gt; &amp;argv, const Glib::ArrayHandle&lt; std::string &gt; &amp;envp, SpawnFlags flags=SpawnFlags(0), const sigc::slot&lt; void &gt; &amp;child_setup=sigc::slot&lt; void &gt;(), Pid *child_pid=0, int *standard_input=0, int *standard_output=0, int *standard_error=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spawn_async_with_pipes</name>
      <anchorfile>group__Spawn.html</anchorfile>
      <anchor>g36b7c1d110d10f86f3ef5d6e10db206f</anchor>
      <arglist>(const std::string &amp;working_directory, const Glib::ArrayHandle&lt; std::string &gt; &amp;argv, SpawnFlags flags=SpawnFlags(0), const sigc::slot&lt; void &gt; &amp;child_setup=sigc::slot&lt; void &gt;(), Pid *child_pid=0, int *standard_input=0, int *standard_output=0, int *standard_error=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spawn_async</name>
      <anchorfile>group__Spawn.html</anchorfile>
      <anchor>g5d42ba801678215f3820382388df32b0</anchor>
      <arglist>(const std::string &amp;working_directory, const Glib::ArrayHandle&lt; std::string &gt; &amp;argv, const Glib::ArrayHandle&lt; std::string &gt; &amp;envp, SpawnFlags flags=SpawnFlags(0), const sigc::slot&lt; void &gt; &amp;child_setup=sigc::slot&lt; void &gt;(), Pid *child_pid=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spawn_async</name>
      <anchorfile>group__Spawn.html</anchorfile>
      <anchor>g0c4e1708989b50fb34266504cc038ee6</anchor>
      <arglist>(const std::string &amp;working_directory, const Glib::ArrayHandle&lt; std::string &gt; &amp;argv, SpawnFlags flags=SpawnFlags(0), const sigc::slot&lt; void &gt; &amp;child_setup=sigc::slot&lt; void &gt;(), Pid *child_pid=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spawn_sync</name>
      <anchorfile>group__Spawn.html</anchorfile>
      <anchor>gd4fbf31fdb5536b104f4f75bf58c60e1</anchor>
      <arglist>(const std::string &amp;working_directory, const Glib::ArrayHandle&lt; std::string &gt; &amp;argv, const Glib::ArrayHandle&lt; std::string &gt; &amp;envp, SpawnFlags flags=SpawnFlags(0), const sigc::slot&lt; void &gt; &amp;child_setup=sigc::slot&lt; void &gt;(), std::string *standard_output=0, std::string *standard_error=0, int *exit_status=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spawn_sync</name>
      <anchorfile>group__Spawn.html</anchorfile>
      <anchor>gcc157258907be90b58184baeebc9c740</anchor>
      <arglist>(const std::string &amp;working_directory, const Glib::ArrayHandle&lt; std::string &gt; &amp;argv, SpawnFlags flags=SpawnFlags(0), const sigc::slot&lt; void &gt; &amp;child_setup=sigc::slot&lt; void &gt;(), std::string *standard_output=0, std::string *standard_error=0, int *exit_status=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spawn_command_line_async</name>
      <anchorfile>group__Spawn.html</anchorfile>
      <anchor>g648167a4af607f87763f1334fe5a472f</anchor>
      <arglist>(const std::string &amp;command_line)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spawn_command_line_sync</name>
      <anchorfile>group__Spawn.html</anchorfile>
      <anchor>g713bdb79396eda85ad186cb2db89564f</anchor>
      <arglist>(const std::string &amp;command_line, std::string *standard_output=0, std::string *standard_error=0, int *exit_status=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spawn_close_pid</name>
      <anchorfile>group__Spawn.html</anchorfile>
      <anchor>gaea8f41c7a08af3b2919ce64fd0c27e5</anchor>
      <arglist>(Pid pid)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>StringUtils</name>
    <title>String Utility Functions</title>
    <filename>group__StringUtils.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>str_has_prefix</name>
      <anchorfile>group__StringUtils.html</anchorfile>
      <anchor>g6b7e8354049756e92a97554a107618ac</anchor>
      <arglist>(const std::string &amp;str, const std::string &amp;prefix)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>str_has_suffix</name>
      <anchorfile>group__StringUtils.html</anchorfile>
      <anchor>g5c4e380ffc6617ac61ca92e203e45630</anchor>
      <arglist>(const std::string &amp;str, const std::string &amp;suffix)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>strtod</name>
      <anchorfile>group__StringUtils.html</anchorfile>
      <anchor>ga44aba9faa6575d4881b1fe779464f6b</anchor>
      <arglist>(const std::string &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>strtod</name>
      <anchorfile>group__StringUtils.html</anchorfile>
      <anchor>g6465a8320d790115c41a2c76d1d3233c</anchor>
      <arglist>(const std::string &amp;str, std::string::size_type &amp;end_index, std::string::size_type start_index=0)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>dtostr</name>
      <anchorfile>group__StringUtils.html</anchorfile>
      <anchor>gc740e6c99bca5896ccbfc12b621491ac</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>strescape</name>
      <anchorfile>group__StringUtils.html</anchorfile>
      <anchor>g35e288b5ce34cb15eeec907421d2b77c</anchor>
      <arglist>(const std::string &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>strescape</name>
      <anchorfile>group__StringUtils.html</anchorfile>
      <anchor>gd24f3547c8d6b3ec56d7f5805a11d6ab</anchor>
      <arglist>(const std::string &amp;source, const std::string &amp;exceptions)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>strcompress</name>
      <anchorfile>group__StringUtils.html</anchorfile>
      <anchor>g85cd83bd40baf0119aac3ff0a9a5e7b2</anchor>
      <arglist>(const std::string &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>strerror</name>
      <anchorfile>group__StringUtils.html</anchorfile>
      <anchor>g1eb869894996c91c0f69dbff96714c71</anchor>
      <arglist>(int errnum)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>strsignal</name>
      <anchorfile>group__StringUtils.html</anchorfile>
      <anchor>g44ce9f689aff8abe1e3073b209f360d3</anchor>
      <arglist>(int signum)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>Threads</name>
    <title>Threads</title>
    <filename>group__Threads.html</filename>
    <class kind="class">Glib::Dispatcher</class>
    <class kind="class">Glib::ThreadError</class>
    <class kind="class">Glib::Thread</class>
    <class kind="class">Glib::Thread::Exit</class>
    <class kind="struct">Glib::StaticMutex</class>
    <class kind="class">Glib::Mutex</class>
    <class kind="class">Glib::Mutex::Lock</class>
    <class kind="struct">Glib::StaticRecMutex</class>
    <class kind="class">Glib::RecMutex</class>
    <class kind="class">Glib::RecMutex::Lock</class>
    <class kind="struct">Glib::StaticRWLock</class>
    <class kind="class">Glib::RWLock</class>
    <class kind="class">Glib::RWLock::ReaderLock</class>
    <class kind="class">Glib::RWLock::WriterLock</class>
    <class kind="class">Glib::Cond</class>
    <class kind="struct">Glib::StaticPrivate</class>
    <class kind="class">Glib::Private</class>
    <member kind="enumeration">
      <name>NotLock</name>
      <anchor>g2dd111336e3b057b51ca5871795fffa4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_LOCK</name>
      <anchor>gg2dd111336e3b057b51ca5871795fffa49681fb4e85e62ba64e39a12526eaa840</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>TryLock</name>
      <anchor>g7441a36336ea4cdb35c0fddbf3f97b19</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRY_LOCK</name>
      <anchor>gg7441a36336ea4cdb35c0fddbf3f97b19df6b2565785992ff637cbc453988841d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>thread_init</name>
      <anchorfile>group__Threads.html</anchorfile>
      <anchor>gb26d01c776801f1fff00753e97af4fc7</anchor>
      <arglist>(GThreadFunctions *vtable=0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>thread_supported</name>
      <anchorfile>group__Threads.html</anchorfile>
      <anchor>gd59d126f6197035e6f6a31e7f4d87818</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Thread *</type>
      <name>wrap</name>
      <anchorfile>group__Threads.html</anchorfile>
      <anchor>g6bfbb3119eaac9fa8cb725aa1e82f61e</anchor>
      <arglist>(GThread *gobject)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>ThreadPools</name>
    <title>Thread Pools</title>
    <filename>group__ThreadPools.html</filename>
    <class kind="class">Glib::ThreadPool</class>
  </compound>
  <compound kind="group">
    <name>Unicode</name>
    <title>Unicode Manipulation</title>
    <filename>group__Unicode.html</filename>
    <namespace>Glib::Unicode</namespace>
    <namespace>Glib::Ascii</namespace>
  </compound>
  <compound kind="group">
    <name>glibmmValue</name>
    <title>Generic Values</title>
    <filename>group__glibmmValue.html</filename>
    <class kind="class">Glib::ValueBase</class>
    <class kind="class">Glib::ValueBase_Boxed</class>
    <class kind="class">Glib::ValueBase_Object</class>
    <class kind="class">Glib::ValueBase_Enum</class>
    <class kind="class">Glib::ValueBase_Flags</class>
    <class kind="class">Glib::ValueBase_String</class>
    <class kind="class">Glib::Value_Boxed</class>
    <class kind="class">Glib::Value&lt; std::string &gt;</class>
    <class kind="class">Glib::Value&lt; Glib::ustring &gt;</class>
    <class kind="class">Glib::Value_Enum</class>
    <class kind="class">Glib::Value_Flags</class>
    <class kind="class">Glib::Value&lt; bool &gt;</class>
    <class kind="class">Glib::Value&lt; char &gt;</class>
    <class kind="class">Glib::Value&lt; unsigned char &gt;</class>
    <class kind="class">Glib::Value&lt; int &gt;</class>
    <class kind="class">Glib::Value&lt; unsigned int &gt;</class>
    <class kind="class">Glib::Value&lt; long &gt;</class>
    <class kind="class">Glib::Value&lt; unsigned long &gt;</class>
    <class kind="class">Glib::Value&lt; long long &gt;</class>
    <class kind="class">Glib::Value&lt; unsigned long long &gt;</class>
    <class kind="class">Glib::Value&lt; float &gt;</class>
    <class kind="class">Glib::Value&lt; double &gt;</class>
    <class kind="class">Glib::Value&lt; void * &gt;</class>
    <class kind="class">Glib::Value_Pointer</class>
    <class kind="class">Glib::Value</class>
    <class kind="class">Glib::Value&lt; T * &gt;</class>
    <class kind="class">Glib::Value&lt; const T * &gt;</class>
  </compound>
  <compound kind="group">
    <name>glibmmEnums</name>
    <title>Enums and Flags</title>
    <filename>group__glibmmEnums.html</filename>
    <member kind="enumeration">
      <name>Month</name>
      <anchor>g9781abc52ad49766808898743e44031f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_MONTH</name>
      <anchor>gg9781abc52ad49766808898743e44031f3c180cbd1a72ac6c1193374f07478043</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JANUARY</name>
      <anchor>gg9781abc52ad49766808898743e44031fdcae78391f0081dd887dbd5c62ce9e18</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FEBRUARY</name>
      <anchor>gg9781abc52ad49766808898743e44031ffbb90abf68464b8e14a764cef1ced1e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MARCH</name>
      <anchor>gg9781abc52ad49766808898743e44031faf1909bbb4cbf9a02db828ab35e52ce3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>APRIL</name>
      <anchor>gg9781abc52ad49766808898743e44031f879774f2eee3f8807bbd8e3c25e3c5b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAY</name>
      <anchor>gg9781abc52ad49766808898743e44031f9da639bcfe895324daded17f4600116b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JUNE</name>
      <anchor>gg9781abc52ad49766808898743e44031faab22ac997e15a34995118694f8cbd2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JULY</name>
      <anchor>gg9781abc52ad49766808898743e44031fe6d2bfb5bd12aace37808b1f5fe53afb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AUGUST</name>
      <anchor>gg9781abc52ad49766808898743e44031f846063b97ea9c5dd82cae8718bb75df1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SEPTEMBER</name>
      <anchor>gg9781abc52ad49766808898743e44031fa7e563e8689c07fac8f60f9f68f6cebb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OCTOBER</name>
      <anchor>gg9781abc52ad49766808898743e44031f3c5a2a9a7bfcc9b7cbd57b89856c4989</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOVEMBER</name>
      <anchor>gg9781abc52ad49766808898743e44031fc21038623ac787c4c94010d2334f6c8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DECEMBER</name>
      <anchor>gg9781abc52ad49766808898743e44031f2aed3776c7cb74418206e52677f394c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Weekday</name>
      <anchor>g073c9f49a289b2036eb226bcdf16a2f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_WEEKDAY</name>
      <anchor>gg073c9f49a289b2036eb226bcdf16a2f10b852cafa7e3b36f3b87c8acd796be89</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MONDAY</name>
      <anchor>gg073c9f49a289b2036eb226bcdf16a2f1c75c38cdbe0d1a25346de7d5a1919f12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TUESDAY</name>
      <anchor>gg073c9f49a289b2036eb226bcdf16a2f13f573dae7a781f9f380b0adecdc068fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WEDNESDAY</name>
      <anchor>gg073c9f49a289b2036eb226bcdf16a2f1b91831a000325a1ad3dd881f0db708e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>THURSDAY</name>
      <anchor>gg073c9f49a289b2036eb226bcdf16a2f1c2be9a407f81cac5ef82ec308aa23cc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FRIDAY</name>
      <anchor>gg073c9f49a289b2036eb226bcdf16a2f1d86f5fb6fa5f0f99e8f6980d5d78ceae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SATURDAY</name>
      <anchor>gg073c9f49a289b2036eb226bcdf16a2f1a8703e1dd1d78272012d603e8ded6807</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUNDAY</name>
      <anchor>gg073c9f49a289b2036eb226bcdf16a2f1c0ae61753cd0be03a4cee4ff0b209fb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>DMY</name>
      <anchor>gc803072d86bbc2ce1f7d558c94f41ae1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DAY</name>
      <anchor>ggc803072d86bbc2ce1f7d558c94f41ae1340ad04532a2d66518f8eefdf1ac1b27</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MONTH</name>
      <anchor>ggc803072d86bbc2ce1f7d558c94f41ae19da8611c47d68fe95d9026cf162bb350</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>YEAR</name>
      <anchor>ggc803072d86bbc2ce1f7d558c94f41ae18eec7a614a99a9640e578862c13b5682</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>FileTest</name>
      <anchor>g33c24ccefbd130021f06708763e16ef2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_TEST_IS_REGULAR</name>
      <anchor>gg33c24ccefbd130021f06708763e16ef23181e2e655e765b00dfdb1e1ea443f62</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_TEST_IS_SYMLINK</name>
      <anchor>gg33c24ccefbd130021f06708763e16ef286cda9ff0bf25358070a9bc8b4a186d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_TEST_IS_DIR</name>
      <anchor>gg33c24ccefbd130021f06708763e16ef2d3679641c18e5e4d4578c2122492cea4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_TEST_IS_EXECUTABLE</name>
      <anchor>gg33c24ccefbd130021f06708763e16ef2d9ab64f07fd4fc2105b53b7379265535</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_TEST_EXISTS</name>
      <anchor>gg33c24ccefbd130021f06708763e16ef237c8f223bda6b6ce2875490351989ddd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>SeekType</name>
      <anchor>ga3767731311bdba4ef42dc99215e5cda</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SEEK_TYPE_CUR</name>
      <anchor>gga3767731311bdba4ef42dc99215e5cda48f0a394042c3a8e117b2ae64af33960</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SEEK_TYPE_SET</name>
      <anchor>gga3767731311bdba4ef42dc99215e5cda1e0d3b4a03e5dd32f135acc89982889f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SEEK_TYPE_END</name>
      <anchor>gga3767731311bdba4ef42dc99215e5cdafa5ff5cdf7e6623866c717fe49cfbaec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>IOStatus</name>
      <anchor>g23fb251e48485b62a9c2677bb1f87d5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_STATUS_ERROR</name>
      <anchor>gg23fb251e48485b62a9c2677bb1f87d5e121996c81c45593110cd714bb81bc349</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_STATUS_NORMAL</name>
      <anchor>gg23fb251e48485b62a9c2677bb1f87d5ef249c5b8e984c37db0847258aeeae86a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_STATUS_EOF</name>
      <anchor>gg23fb251e48485b62a9c2677bb1f87d5ed42ae91b402716ab4faaec9b0f3823fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_STATUS_AGAIN</name>
      <anchor>gg23fb251e48485b62a9c2677bb1f87d5e5a33609d7ff07e1d711185c0765cf5de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>IOFlags</name>
      <anchor>gee093e5db5bc1ea5738771ba0d1af3b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_FLAG_APPEND</name>
      <anchor>ggee093e5db5bc1ea5738771ba0d1af3b7121e65986f06397730c4c36d09fb4dc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_FLAG_NONBLOCK</name>
      <anchor>ggee093e5db5bc1ea5738771ba0d1af3b73724a778574d25ba0bd83139a80b2c0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_FLAG_IS_READABLE</name>
      <anchor>ggee093e5db5bc1ea5738771ba0d1af3b7162bfe5ccb18465d0f11e954cc4a89d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_FLAG_IS_WRITEABLE</name>
      <anchor>ggee093e5db5bc1ea5738771ba0d1af3b7f9738e0234ae1d1f15c4512d6edb16db</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_FLAG_IS_SEEKABLE</name>
      <anchor>ggee093e5db5bc1ea5738771ba0d1af3b7c1373a306084710994199b3de0137cfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_FLAG_GET_MASK</name>
      <anchor>ggee093e5db5bc1ea5738771ba0d1af3b79431cd6fcef2a716b7d313bd9cde85b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_FLAG_SET_MASK</name>
      <anchor>ggee093e5db5bc1ea5738771ba0d1af3b71d4db9b335a96f503cd491973b162105</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>KeyFileFlags</name>
      <anchor>g5866be36312563d91e5a7be27348459b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KEY_FILE_NONE</name>
      <anchor>gg5866be36312563d91e5a7be27348459b06a606cb7b5f244a0f3ad4f5e67b30bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KEY_FILE_KEEP_COMMENTS</name>
      <anchor>gg5866be36312563d91e5a7be27348459b00058fa3d8e271d9ff5e1469dc39dc69</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KEY_FILE_KEEP_TRANSLATIONS</name>
      <anchor>gg5866be36312563d91e5a7be27348459b7ff723c84c930b978dccd6732eebe985</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ParseFlags</name>
      <anchor>ga4fcaf917b6eb2aa085817e83b0a4108</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DO_NOT_USE_THIS_UNSUPPORTED_FLAG</name>
      <anchor>gga4fcaf917b6eb2aa085817e83b0a41083f48cb56dd56d529c9379ae244441e90</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ModuleFlags</name>
      <anchor>g502283ffbe523adf38c69905ec8640f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MODULE_BIND_LAZY</name>
      <anchor>gg502283ffbe523adf38c69905ec8640f3cd94d05ef9ba97ceb6f3904b87f5bbfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MODULE_BIND_LOCAL</name>
      <anchor>gg502283ffbe523adf38c69905ec8640f38e5768a91ee8dbf459785dee8b664b72</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MODULE_BIND_MASK</name>
      <anchor>gg502283ffbe523adf38c69905ec8640f39cbf95b359863e9296457cbb0f193169</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>SpawnFlags</name>
      <anchor>g075918988c271e7fb63f1a1d083e26dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_LEAVE_DESCRIPTORS_OPEN</name>
      <anchor>gg075918988c271e7fb63f1a1d083e26dda2a457be3bdc07bbd0d32e1a63264d90</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_DO_NOT_REAP_CHILD</name>
      <anchor>gg075918988c271e7fb63f1a1d083e26dd0ad30b49d46750083ddd1e0643635e85</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_SEARCH_PATH</name>
      <anchor>gg075918988c271e7fb63f1a1d083e26dd341e5cb2803eb06a0f2f0431d6305e04</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_STDOUT_TO_DEV_NULL</name>
      <anchor>gg075918988c271e7fb63f1a1d083e26dd450919630c2ce753374d1d05760bb205</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_STDERR_TO_DEV_NULL</name>
      <anchor>gg075918988c271e7fb63f1a1d083e26dd5ae7fa0d4f6a0bdfc37adeb578634491</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_CHILD_INHERITS_STDIN</name>
      <anchor>gg075918988c271e7fb63f1a1d083e26dd9fb3c6cfddb2ef201f7b11829da8b5d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_FILE_AND_ARGV_ZERO</name>
      <anchor>gg075918988c271e7fb63f1a1d083e26dd55dc12133953441059847e8633227a84</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ThreadPriority</name>
      <anchor>g9b87dca6496b6ad53baec9ca01318448</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>THREAD_PRIORITY_LOW</name>
      <anchor>gg9b87dca6496b6ad53baec9ca01318448035a7bdc6a5b5eae6f644ed2605e8a37</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>THREAD_PRIORITY_NORMAL</name>
      <anchor>gg9b87dca6496b6ad53baec9ca013184486216bb25baaaca32642841ade911a92e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>THREAD_PRIORITY_HIGH</name>
      <anchor>gg9b87dca6496b6ad53baec9ca01318448ef77081535e90116b203ce3b3b0fe523</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>THREAD_PRIORITY_URGENT</name>
      <anchor>gg9b87dca6496b6ad53baec9ca013184485b79355bbd59c508995af57e0ed39a94</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UnicodeType</name>
      <anchor>gdfbb414be3a4d127146fdca66dc7a46e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_CONTROL</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46ec280382585f1014b43ed228760e7c558</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_FORMAT</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46eaedc3e279c1c7e01f1bec907bbe313ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_UNASSIGNED</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46efc32abac3afbe8380d54790f178fd3de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_PRIVATE_USE</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46e5ca14907043380b1e9d725671bc71a56</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_SURROGATE</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46e0b99b4f93ef273ea4c49fb82970f5e54</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_LOWERCASE_LETTER</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46edb83c3e23724b6ef15888c6527a063bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_MODIFIER_LETTER</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46ee6e48ddd5b4eacb4cbf67fa902743458</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_OTHER_LETTER</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46e57ced328464824fe23113e7b98a4ae61</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_TITLECASE_LETTER</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46eb72e09c06a5aeffccdd94d5695dfcbc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_UPPERCASE_LETTER</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46e8f344db3f8e39ed99bc2c9665ab96c89</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_COMBINING_MARK</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46e5d22c0c4d39d68b815dccd52bb5ff01c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_ENCLOSING_MARK</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46e4508b84626068a2dbf23a69b96475e6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_NON_SPACING_MARK</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46e857864a5d1c145cc3ff8ccba54834f19</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_DECIMAL_NUMBER</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46ee75e5f353bc068ec3d8bf2555c540995</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_LETTER_NUMBER</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46e19811baedb3dbc8afddde43d00eb3cd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_OTHER_NUMBER</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46e45a259cec90b0ada120fe7116be422b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_CONNECT_PUNCTUATION</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46e649c83b23fb3d9bd7bf1803858cc5afe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_DASH_PUNCTUATION</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46ea1169c4e20b3a47f597005f84f9fa7fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_CLOSE_PUNCTUATION</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46e1ffaf2aac92ca1e818cf3e26b8301b90</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_FINAL_PUNCTUATION</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46eb549f212a3f340bd660a962b298409ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_INITIAL_PUNCTUATION</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46eb247e5e7480ecbf382b2128c600b8720</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_OTHER_PUNCTUATION</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46e5c9416f9219bf9282c49b7ca831f0c9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_OPEN_PUNCTUATION</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46e806e11a7f8d1a0b0688a0237ad1fa190</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_CURRENCY_SYMBOL</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46e40b40c2bb5d39acee2b81327e2efb905</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_MODIFIER_SYMBOL</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46e5b693a82d2e497a2b13cae8d5668097c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_MATH_SYMBOL</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46e28100e9fa5a262bbd32b973303746490</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_OTHER_SYMBOL</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46e298582645a73c91d191b7e1dc61d214f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_LINE_SEPARATOR</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46ed7650a40ddf3741e87a1039eba56b1a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_PARAGRAPH_SEPARATOR</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46e5b3c71c265af11b331d0ec4240af1c8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_SPACE_SEPARATOR</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46ec2eafb967dc62399aeb5ff27c8896b0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UnicodeBreakType</name>
      <anchor>g1af1a717c84d71aa4aabc9fc77b4d0ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_MANDATORY</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0ea37c762c3c7b080f5795ed6f828231923</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_CARRIAGE_RETURN</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0ea6b7c9d7a0ac78d14cf06b18bfeb2ccf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_LINE_FEED</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0ea7839936b879938c5056bdb55eb0b6b7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_COMBINING_MARK</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0ea014f326eb07effe48f1b771459caa7c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_SURROGATE</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0ea032b712c48700209c7cc414ca88cda34</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_ZERO_WIDTH_SPACE</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0eadb5ff8a11c4e596677d161903c732c56</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_INSEPARABLE</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0ea38f51c8283586493a3ebd45fa3b0113e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_NON_BREAKING_GLUE</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0ea47784c7e2cd80f6ac179de7f7a3f54e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_CONTINGENT</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0eae80d6fef8acf765da47c8235e39f4896</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_SPACE</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0eab37a6597dbf2e248b610769be7e5cb3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_AFTER</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0eada4027a9bfc5ffdf90e3be612adad7aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_BEFORE</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0eab1efcdcd3d6ecb55dff58a2e2ee1b9e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_BEFORE_AND_AFTER</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0eaafce05d8590e1b40ec427f8f78cf15ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_HYPHEN</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0ea7e6dd69fc00fdc42ab091a2916426dbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_NON_STARTER</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0eabe412d94a1f7d9e92cc5a20f0b549626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_OPEN_PUNCTUATION</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0ea52ebd39d1b02dfd368992a2ef8e7fa7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_CLOSE_PUNCTUATION</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0ead1284afc0511ab69aa18554b8306fbca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_QUOTATION</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0ea8fe57a799eacc3299fd256285dd1246d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_EXCLAMATION</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0eaf628849c1e5b531c022e12695c1f6f5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_IDEOGRAPHIC</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0ea22047a88734e9fe1e9e0fef994cfb20b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_NUMERIC</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0ea50a61c3c53da7558d08c1fcbcfc3b138</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_INFIX_SEPARATOR</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0ea07f3d0d76db141033eff38ee7577ffd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_SYMBOL</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0eafc02ec4862f016b6c2da35592f6cd62b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_ALPHABETIC</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0eaea27a8970e74f93f485d45f6a1684586</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_PREFIX</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0ea580794ffc9992e65666adce0611eecb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_POSTFIX</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0ea7ca3941d5dea03a5c824ae55212db01a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_COMPLEX_CONTEXT</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0ea3a96b8e59ba5815700d33c1f6006a339</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_AMBIGUOUS</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0eae79244811e61b30eb68ee02dc45f1c09</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_UNKNOWN</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0eaeb94f98b2233fae0afb38bf115b4b42d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_NEXT_LINE</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0ea7ffad3080f483a6b97680db786836ced</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_WORD_JOINER</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0ea9a74e7d947f75ef93d4e3aacebdb898b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>AsciiType</name>
      <anchor>g2e5a690ed07dfaa6f9ad9f1c57acd787</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASCII_ALNUM</name>
      <anchor>gg2e5a690ed07dfaa6f9ad9f1c57acd787f7d63a99479102b5391b44f631b5f009</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASCII_ALPHA</name>
      <anchor>gg2e5a690ed07dfaa6f9ad9f1c57acd787c87947c729ac3c3f9f58b0ca28460152</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASCII_CNTRL</name>
      <anchor>gg2e5a690ed07dfaa6f9ad9f1c57acd7872e19c57ce5a6eac38d911a86cc44a2fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASCII_DIGIT</name>
      <anchor>gg2e5a690ed07dfaa6f9ad9f1c57acd7879acd9a82d0670a3eb0377db782f48853</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASCII_GRAPH</name>
      <anchor>gg2e5a690ed07dfaa6f9ad9f1c57acd7872ecdbe5137af423fce73ff2bbb34d625</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASCII_LOWER</name>
      <anchor>gg2e5a690ed07dfaa6f9ad9f1c57acd787875d3cb7494e1548db0d37ab44d4057e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASCII_PRINT</name>
      <anchor>gg2e5a690ed07dfaa6f9ad9f1c57acd7879b1775043a8043d994c0c0ab890e86c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASCII_PUNCT</name>
      <anchor>gg2e5a690ed07dfaa6f9ad9f1c57acd787d3416d8662560db626259013ff72c58f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASCII_SPACE</name>
      <anchor>gg2e5a690ed07dfaa6f9ad9f1c57acd7877d7a68814efba3cf3d294475123413ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASCII_UPPER</name>
      <anchor>gg2e5a690ed07dfaa6f9ad9f1c57acd7875ae30681069b2ab88eed13e358c08090</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASCII_XDIGIT</name>
      <anchor>gg2e5a690ed07dfaa6f9ad9f1c57acd787d78490a35d65839f2f06449e7e472337</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>NormalizeMode</name>
      <anchor>g18199b64f406e397627a4e7fc799f848</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NORMALIZE_DEFAULT</name>
      <anchor>gg18199b64f406e397627a4e7fc799f848cbaee513b23e0066962df2e540cd4c99</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NORMALIZE_NFD</name>
      <anchor>gg18199b64f406e397627a4e7fc799f848169a0ae0910535038d8d403f874f0b5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NORMALIZE_DEFAULT_COMPOSE</name>
      <anchor>gg18199b64f406e397627a4e7fc799f848d9fb4be6b95958030771b4e8cba4144c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NORMALIZE_NFC</name>
      <anchor>gg18199b64f406e397627a4e7fc799f84820e4b8b42b12a7972ca4f6c84030978d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NORMALIZE_ALL</name>
      <anchor>gg18199b64f406e397627a4e7fc799f848a1cf5911572000f5273dc46fe2c5b270</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NORMALIZE_NFKD</name>
      <anchor>gg18199b64f406e397627a4e7fc799f848995775ef324bbd76a91a74c7f2686867</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NORMALIZE_ALL_COMPOSE</name>
      <anchor>gg18199b64f406e397627a4e7fc799f8487c98a2300648a33ca0ebc87fed999ca5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NORMALIZE_NFKC</name>
      <anchor>gg18199b64f406e397627a4e7fc799f848a7f62ac84c5ed8a8868cbb49a889dd98</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>FileTest</type>
      <name>operator|</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g8e018d8609ba17b0f6955505a8363bf7</anchor>
      <arglist>(FileTest lhs, FileTest rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileTest</type>
      <name>operator &amp;</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g2e640c1cc390e7d91f6366d65ed084f4</anchor>
      <arglist>(FileTest lhs, FileTest rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileTest</type>
      <name>operator^</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g6c089f23d6bfd92e083edc75519db75e</anchor>
      <arglist>(FileTest lhs, FileTest rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileTest</type>
      <name>operator~</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g948edadd8ee7442b83d37dc3c325f890</anchor>
      <arglist>(FileTest flags)</arglist>
    </member>
    <member kind="function">
      <type>FileTest &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g9a6f5470f667596e897f5bfbd1068283</anchor>
      <arglist>(FileTest &amp;lhs, FileTest rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileTest &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g4e68c8262a74dbde8ca9783ae5a8f72c</anchor>
      <arglist>(FileTest &amp;lhs, FileTest rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileTest &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g2219c78993a5196ca2a435a18e0fc3a7</anchor>
      <arglist>(FileTest &amp;lhs, FileTest rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOFlags</type>
      <name>operator|</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g0dd0a8800b6311ee8f3867eb27a72ae5</anchor>
      <arglist>(IOFlags lhs, IOFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gc2ecc634f28d057e0b892385e95dcb5b</anchor>
      <arglist>(IOFlags lhs, IOFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOFlags</type>
      <name>operator^</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gd61c57b0678c703e8a14230d18bacff7</anchor>
      <arglist>(IOFlags lhs, IOFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOFlags</type>
      <name>operator~</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g548c1cb09208fef57e5d0b3c992d71b9</anchor>
      <arglist>(IOFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>IOFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gc3539f6df5e0c0658726f4f0573146f9</anchor>
      <arglist>(IOFlags &amp;lhs, IOFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g3269a13b6b2b6ce45d8f65296102acb1</anchor>
      <arglist>(IOFlags &amp;lhs, IOFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g2180a5c566ced37bbeb37050d9632da9</anchor>
      <arglist>(IOFlags &amp;lhs, IOFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>KeyFileFlags</type>
      <name>operator|</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gbac5e1493392116b118e4d1048e3fef0</anchor>
      <arglist>(KeyFileFlags lhs, KeyFileFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>KeyFileFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gbdd6dad90b17ad88ba835f313524a307</anchor>
      <arglist>(KeyFileFlags lhs, KeyFileFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>KeyFileFlags</type>
      <name>operator^</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gcc28b21831114895abfdbae6c1908114</anchor>
      <arglist>(KeyFileFlags lhs, KeyFileFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>KeyFileFlags</type>
      <name>operator~</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gb99ff1d7c6d96da2ddfcfd1c4954e9b6</anchor>
      <arglist>(KeyFileFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>KeyFileFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g7096a34594825c90d7b6257935a62eb1</anchor>
      <arglist>(KeyFileFlags &amp;lhs, KeyFileFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>KeyFileFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g5ea1950426a74dffefbb5355764ad9e6</anchor>
      <arglist>(KeyFileFlags &amp;lhs, KeyFileFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>KeyFileFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gc90869f74a743e2f99f55708c28a585d</anchor>
      <arglist>(KeyFileFlags &amp;lhs, KeyFileFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ParseFlags</type>
      <name>operator|</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g330303c9d78eb78547012d549d4bb018</anchor>
      <arglist>(ParseFlags lhs, ParseFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ParseFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g047083096ed55facc653af5bee27ac66</anchor>
      <arglist>(ParseFlags lhs, ParseFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ParseFlags</type>
      <name>operator^</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gb059cb7acda2b29eb2066958fc71951a</anchor>
      <arglist>(ParseFlags lhs, ParseFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ParseFlags</type>
      <name>operator~</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g1fb97b62ae844c056b400e2813a21ee2</anchor>
      <arglist>(ParseFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>ParseFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g6b24d718f166cb352be94ee6e4090296</anchor>
      <arglist>(ParseFlags &amp;lhs, ParseFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ParseFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g084074808cf89b0b36f257af49dc9bac</anchor>
      <arglist>(ParseFlags &amp;lhs, ParseFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ParseFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gf59b9479390c508dff23dba221177bcc</anchor>
      <arglist>(ParseFlags &amp;lhs, ParseFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ModuleFlags</type>
      <name>operator|</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gde862759d091b90329ba8f85aa2fd010</anchor>
      <arglist>(ModuleFlags lhs, ModuleFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ModuleFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g330585c44ed8bae05e931414481515a1</anchor>
      <arglist>(ModuleFlags lhs, ModuleFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ModuleFlags</type>
      <name>operator^</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g333d93ef372c08c322d27ac05bda0e18</anchor>
      <arglist>(ModuleFlags lhs, ModuleFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ModuleFlags</type>
      <name>operator~</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gaa723a5b4d33e54167f7adbb18746004</anchor>
      <arglist>(ModuleFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>ModuleFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ge9df767ea1ec74b0d9d9acce426a07a8</anchor>
      <arglist>(ModuleFlags &amp;lhs, ModuleFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ModuleFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g5c0dd7eca1f39db3f45ec045cfb2f8f8</anchor>
      <arglist>(ModuleFlags &amp;lhs, ModuleFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ModuleFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g8e73a634c6441630eddf8805b22dd163</anchor>
      <arglist>(ModuleFlags &amp;lhs, ModuleFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SpawnFlags</type>
      <name>operator|</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gba6cac919da111ebf69667bf9f8006ff</anchor>
      <arglist>(SpawnFlags lhs, SpawnFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SpawnFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g807af191d1776c33e82c9f6c8228c488</anchor>
      <arglist>(SpawnFlags lhs, SpawnFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SpawnFlags</type>
      <name>operator^</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g84449a9a461b381f88f65435ef8389ec</anchor>
      <arglist>(SpawnFlags lhs, SpawnFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SpawnFlags</type>
      <name>operator~</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g065f45ca68d1397febf331293e4cc4de</anchor>
      <arglist>(SpawnFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>SpawnFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gbbe289c910b34a158f8dc22bb0b0095f</anchor>
      <arglist>(SpawnFlags &amp;lhs, SpawnFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SpawnFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g044d7f5c8c7183fc673d61661b269380</anchor>
      <arglist>(SpawnFlags &amp;lhs, SpawnFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SpawnFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g40166fcca8eb8ec5b148c82444553927</anchor>
      <arglist>(SpawnFlags &amp;lhs, SpawnFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>AsciiType</type>
      <name>operator|</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g5bc1518eb5547dbb8af77b944ccaa048</anchor>
      <arglist>(AsciiType lhs, AsciiType rhs)</arglist>
    </member>
    <member kind="function">
      <type>AsciiType</type>
      <name>operator &amp;</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ge25c16ef876bb93950203cff88ffd89c</anchor>
      <arglist>(AsciiType lhs, AsciiType rhs)</arglist>
    </member>
    <member kind="function">
      <type>AsciiType</type>
      <name>operator^</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g682a545ca2e86b3e162305e4f14fa8d5</anchor>
      <arglist>(AsciiType lhs, AsciiType rhs)</arglist>
    </member>
    <member kind="function">
      <type>AsciiType</type>
      <name>operator~</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gd7ea47582094c6d092a8f485e1e709c6</anchor>
      <arglist>(AsciiType flags)</arglist>
    </member>
    <member kind="function">
      <type>AsciiType &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g69bba23f4c9a83c268d0599f241b8ebe</anchor>
      <arglist>(AsciiType &amp;lhs, AsciiType rhs)</arglist>
    </member>
    <member kind="function">
      <type>AsciiType &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ge3a9f95c99ce7e8f80ae78f4a8fd33cb</anchor>
      <arglist>(AsciiType &amp;lhs, AsciiType rhs)</arglist>
    </member>
    <member kind="function">
      <type>AsciiType &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gc1b0239e539cf250333fe0adc04dbb41</anchor>
      <arglist>(AsciiType &amp;lhs, AsciiType rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GTimeVal</name>
    <filename>classGTimeVal.html</filename>
  </compound>
  <compound kind="class">
    <name>sigc::trackable</name>
    <filename>classsigc_1_1trackable.html</filename>
  </compound>
  <compound kind="class">
    <name>static const bool</name>
    <filename>classstatic_01const_01bool.html</filename>
  </compound>
  <compound kind="class">
    <name>static const std::size_t</name>
    <filename>classstatic_01const_01std_1_1size__t.html</filename>
  </compound>
  <compound kind="namespace">
    <name>Glib</name>
    <filename>namespaceGlib.html</filename>
    <class kind="class">Glib::ArrayHandle</class>
    <class kind="class">Glib::Sequence</class>
    <class kind="class">Glib::ConvertError</class>
    <class kind="class">Glib::IConv</class>
    <class kind="class">Glib::Date</class>
    <class kind="class">Glib::Dispatcher</class>
    <class kind="class">Glib::Error</class>
    <class kind="class">Glib::Exception</class>
    <class kind="class">Glib::FileError</class>
    <class kind="class">Glib::DirIterator</class>
    <class kind="class">Glib::Dir</class>
    <class kind="class">Glib::HelperList</class>
    <class kind="class">Glib::Interface</class>
    <class kind="class">Glib::IOChannelError</class>
    <class kind="class">Glib::IOChannel</class>
    <class kind="class">Glib::KeyFileError</class>
    <class kind="class">Glib::KeyFile</class>
    <class kind="class">Glib::ListHandle</class>
    <class kind="class">Glib::PollFD</class>
    <class kind="class">Glib::SignalTimeout</class>
    <class kind="class">Glib::SignalIdle</class>
    <class kind="class">Glib::SignalIO</class>
    <class kind="class">Glib::SignalChildWatch</class>
    <class kind="class">Glib::MainContext</class>
    <class kind="class">Glib::MainLoop</class>
    <class kind="class">Glib::Source</class>
    <class kind="class">Glib::TimeoutSource</class>
    <class kind="class">Glib::IdleSource</class>
    <class kind="class">Glib::IOSource</class>
    <class kind="class">Glib::MarkupError</class>
    <class kind="class">Glib::Module</class>
    <class kind="class">Glib::Object</class>
    <class kind="class">Glib::ObjectBase</class>
    <class kind="class">Glib::OptionError</class>
    <class kind="class">Glib::OptionContext</class>
    <class kind="class">Glib::OptionEntry</class>
    <class kind="class">Glib::OptionGroup</class>
    <class kind="class">Glib::PatternSpec</class>
    <class kind="class">Glib::PropertyBase</class>
    <class kind="class">Glib::Property</class>
    <class kind="class">Glib::PropertyProxy</class>
    <class kind="class">Glib::PropertyProxy_WriteOnly</class>
    <class kind="class">Glib::PropertyProxy_ReadOnly</class>
    <class kind="class">Glib::SignalProxyProperty</class>
    <class kind="class">Glib::PropertyProxy_Base</class>
    <class kind="class">Glib::QueryQuark</class>
    <class kind="class">Glib::Quark</class>
    <class kind="class">Glib::Rand</class>
    <class kind="class">Glib::RefPtr</class>
    <class kind="class">Glib::ShellError</class>
    <class kind="class">Glib::SignalProxyBase</class>
    <class kind="class">Glib::SignalProxyNormal</class>
    <class kind="class">Glib::SignalProxy0</class>
    <class kind="class">Glib::SignalProxy1</class>
    <class kind="class">Glib::SignalProxy2</class>
    <class kind="class">Glib::SignalProxy3</class>
    <class kind="class">Glib::SignalProxy4</class>
    <class kind="class">Glib::SignalProxy5</class>
    <class kind="class">Glib::SignalProxy6</class>
    <class kind="class">Glib::SignalProxyConnectionNode</class>
    <class kind="class">Glib::SListHandle</class>
    <class kind="class">Glib::SpawnError</class>
    <class kind="class">Glib::StreamIOChannel</class>
    <class kind="class">Glib::ThreadError</class>
    <class kind="class">Glib::Thread</class>
    <class kind="struct">Glib::StaticMutex</class>
    <class kind="class">Glib::Mutex</class>
    <class kind="struct">Glib::StaticRecMutex</class>
    <class kind="class">Glib::RecMutex</class>
    <class kind="struct">Glib::StaticRWLock</class>
    <class kind="class">Glib::RWLock</class>
    <class kind="class">Glib::Cond</class>
    <class kind="struct">Glib::StaticPrivate</class>
    <class kind="class">Glib::Private</class>
    <class kind="class">Glib::ThreadPool</class>
    <class kind="class">Glib::Timer</class>
    <class kind="struct">Glib::TimeVal</class>
    <class kind="class">Glib::ustring_Iterator</class>
    <class kind="class">Glib::ustring</class>
    <class kind="class">Glib::ValueBase</class>
    <class kind="class">Glib::ValueBase_Boxed</class>
    <class kind="class">Glib::ValueBase_Object</class>
    <class kind="class">Glib::ValueBase_Enum</class>
    <class kind="class">Glib::ValueBase_Flags</class>
    <class kind="class">Glib::ValueBase_String</class>
    <class kind="class">Glib::Value_Boxed</class>
    <class kind="class">Glib::Value_Enum</class>
    <class kind="class">Glib::Value_Flags</class>
    <class kind="class">Glib::Value&lt; bool &gt;</class>
    <class kind="class">Glib::Value&lt; char &gt;</class>
    <class kind="class">Glib::Value&lt; unsigned char &gt;</class>
    <class kind="class">Glib::Value&lt; int &gt;</class>
    <class kind="class">Glib::Value&lt; unsigned int &gt;</class>
    <class kind="class">Glib::Value&lt; long &gt;</class>
    <class kind="class">Glib::Value&lt; unsigned long &gt;</class>
    <class kind="class">Glib::Value&lt; long long &gt;</class>
    <class kind="class">Glib::Value&lt; unsigned long long &gt;</class>
    <class kind="class">Glib::Value&lt; float &gt;</class>
    <class kind="class">Glib::Value&lt; double &gt;</class>
    <class kind="class">Glib::Value&lt; void * &gt;</class>
    <class kind="class">Glib::Value_Pointer</class>
    <class kind="class">Glib::Value</class>
    <class kind="class">Glib::Value&lt; T * &gt;</class>
    <class kind="class">Glib::Value&lt; const T * &gt;</class>
    <class kind="class">Glib::Value&lt; std::string &gt;</class>
    <class kind="class">Glib::Value&lt; Glib::ustring &gt;</class>
    <namespace>Glib::Ascii</namespace>
    <namespace>Glib::Container_Helpers</namespace>
    <namespace>Glib::Markup</namespace>
    <namespace>Glib::Unicode</namespace>
    <member kind="typedef">
      <type>ArrayHandle&lt; Glib::ustring &gt;</type>
      <name>StringArrayHandle</name>
      <anchorfile>group__ContHandles.html</anchorfile>
      <anchor>g8e243b697be740f5f7d4b578ae50db41</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Glib::ArrayHandle&lt; Glib::ustring &gt;</type>
      <name>SArray</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>4e357796ff84955c958209e877211f66</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GPid</type>
      <name>Pid</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>48d413f720e558ccfc0e5b141fc07f0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Glib::ObjectBase *(*)</type>
      <name>WrapNewFunction</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ea55a844eba9e824e9445a26cfdcd465</anchor>
      <arglist>(GObject *)</arglist>
    </member>
    <member kind="enumeration">
      <name>OwnershipType</name>
      <anchor>g64c27560b41710ccf64a3679a3ba3f20</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OWNERSHIP_NONE</name>
      <anchor>gg64c27560b41710ccf64a3679a3ba3f207d594cffcc2d2d6c4313ddb4d6613c79</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OWNERSHIP_SHALLOW</name>
      <anchor>gg64c27560b41710ccf64a3679a3ba3f20448c598cdc37e2de8a162e1020001715</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OWNERSHIP_DEEP</name>
      <anchor>gg64c27560b41710ccf64a3679a3ba3f202a6d6bfadc36f9eda31af79d32928c6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>FileTest</name>
      <anchor>g33c24ccefbd130021f06708763e16ef2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_TEST_IS_REGULAR</name>
      <anchor>gg33c24ccefbd130021f06708763e16ef23181e2e655e765b00dfdb1e1ea443f62</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_TEST_IS_SYMLINK</name>
      <anchor>gg33c24ccefbd130021f06708763e16ef286cda9ff0bf25358070a9bc8b4a186d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_TEST_IS_DIR</name>
      <anchor>gg33c24ccefbd130021f06708763e16ef2d3679641c18e5e4d4578c2122492cea4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_TEST_IS_EXECUTABLE</name>
      <anchor>gg33c24ccefbd130021f06708763e16ef2d9ab64f07fd4fc2105b53b7379265535</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_TEST_EXISTS</name>
      <anchor>gg33c24ccefbd130021f06708763e16ef237c8f223bda6b6ce2875490351989ddd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>SeekType</name>
      <anchor>ga3767731311bdba4ef42dc99215e5cda</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SEEK_TYPE_CUR</name>
      <anchor>gga3767731311bdba4ef42dc99215e5cda48f0a394042c3a8e117b2ae64af33960</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SEEK_TYPE_SET</name>
      <anchor>gga3767731311bdba4ef42dc99215e5cda1e0d3b4a03e5dd32f135acc89982889f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SEEK_TYPE_END</name>
      <anchor>gga3767731311bdba4ef42dc99215e5cdafa5ff5cdf7e6623866c717fe49cfbaec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>IOStatus</name>
      <anchor>g23fb251e48485b62a9c2677bb1f87d5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_STATUS_ERROR</name>
      <anchor>gg23fb251e48485b62a9c2677bb1f87d5e121996c81c45593110cd714bb81bc349</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_STATUS_NORMAL</name>
      <anchor>gg23fb251e48485b62a9c2677bb1f87d5ef249c5b8e984c37db0847258aeeae86a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_STATUS_EOF</name>
      <anchor>gg23fb251e48485b62a9c2677bb1f87d5ed42ae91b402716ab4faaec9b0f3823fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_STATUS_AGAIN</name>
      <anchor>gg23fb251e48485b62a9c2677bb1f87d5e5a33609d7ff07e1d711185c0765cf5de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>IOFlags</name>
      <anchor>gee093e5db5bc1ea5738771ba0d1af3b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_FLAG_APPEND</name>
      <anchor>ggee093e5db5bc1ea5738771ba0d1af3b7121e65986f06397730c4c36d09fb4dc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_FLAG_NONBLOCK</name>
      <anchor>ggee093e5db5bc1ea5738771ba0d1af3b73724a778574d25ba0bd83139a80b2c0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_FLAG_IS_READABLE</name>
      <anchor>ggee093e5db5bc1ea5738771ba0d1af3b7162bfe5ccb18465d0f11e954cc4a89d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_FLAG_IS_WRITEABLE</name>
      <anchor>ggee093e5db5bc1ea5738771ba0d1af3b7f9738e0234ae1d1f15c4512d6edb16db</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_FLAG_IS_SEEKABLE</name>
      <anchor>ggee093e5db5bc1ea5738771ba0d1af3b7c1373a306084710994199b3de0137cfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_FLAG_GET_MASK</name>
      <anchor>ggee093e5db5bc1ea5738771ba0d1af3b79431cd6fcef2a716b7d313bd9cde85b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_FLAG_SET_MASK</name>
      <anchor>ggee093e5db5bc1ea5738771ba0d1af3b71d4db9b335a96f503cd491973b162105</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>KeyFileFlags</name>
      <anchor>g5866be36312563d91e5a7be27348459b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KEY_FILE_NONE</name>
      <anchor>gg5866be36312563d91e5a7be27348459b06a606cb7b5f244a0f3ad4f5e67b30bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KEY_FILE_KEEP_COMMENTS</name>
      <anchor>gg5866be36312563d91e5a7be27348459b00058fa3d8e271d9ff5e1469dc39dc69</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KEY_FILE_KEEP_TRANSLATIONS</name>
      <anchor>gg5866be36312563d91e5a7be27348459b7ff723c84c930b978dccd6732eebe985</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRIORITY_HIGH</name>
      <anchor>gg0c450f82b9e34689e2dda2038ba7834fa3219d7be6fa3282a80d7a850c401db9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRIORITY_DEFAULT</name>
      <anchor>gg0c450f82b9e34689e2dda2038ba7834f597ed3aa6067516c9c752896f3816b5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRIORITY_HIGH_IDLE</name>
      <anchor>gg0c450f82b9e34689e2dda2038ba7834ff2d20696a8afab425c00268d981e9897</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRIORITY_DEFAULT_IDLE</name>
      <anchor>gg0c450f82b9e34689e2dda2038ba7834fe8c1127af0a2dab71f196a957dab8375</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRIORITY_LOW</name>
      <anchor>gg0c450f82b9e34689e2dda2038ba7834fc6034649b50f9f92a69c1e67b92ecfc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>IOCondition</name>
      <anchor>gbd96381793b70d4ae32c725926990918</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_IN</name>
      <anchor>ggbd96381793b70d4ae32c725926990918f244f3e8c1c9525762f3630befd76336</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_OUT</name>
      <anchor>ggbd96381793b70d4ae32c72592699091860f61c8f26f2bb61afd3ad8afd673099</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_PRI</name>
      <anchor>ggbd96381793b70d4ae32c72592699091836bb5411dda1131e5c23e17a8619c820</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERR</name>
      <anchor>ggbd96381793b70d4ae32c7259269909182e402c9fd5879c49ef5359fa4189acd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_HUP</name>
      <anchor>ggbd96381793b70d4ae32c725926990918b5dcc0e24c236c027b041d362dcff35b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_NVAL</name>
      <anchor>ggbd96381793b70d4ae32c725926990918d37b5d6ba6a0c1ad98510f352ac2f885</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ModuleFlags</name>
      <anchor>g502283ffbe523adf38c69905ec8640f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MODULE_BIND_LAZY</name>
      <anchor>gg502283ffbe523adf38c69905ec8640f3cd94d05ef9ba97ceb6f3904b87f5bbfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MODULE_BIND_LOCAL</name>
      <anchor>gg502283ffbe523adf38c69905ec8640f38e5768a91ee8dbf459785dee8b664b72</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MODULE_BIND_MASK</name>
      <anchor>gg502283ffbe523adf38c69905ec8640f39cbf95b359863e9296457cbb0f193169</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>SpawnFlags</name>
      <anchor>g075918988c271e7fb63f1a1d083e26dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_LEAVE_DESCRIPTORS_OPEN</name>
      <anchor>gg075918988c271e7fb63f1a1d083e26dda2a457be3bdc07bbd0d32e1a63264d90</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_DO_NOT_REAP_CHILD</name>
      <anchor>gg075918988c271e7fb63f1a1d083e26dd0ad30b49d46750083ddd1e0643635e85</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_SEARCH_PATH</name>
      <anchor>gg075918988c271e7fb63f1a1d083e26dd341e5cb2803eb06a0f2f0431d6305e04</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_STDOUT_TO_DEV_NULL</name>
      <anchor>gg075918988c271e7fb63f1a1d083e26dd450919630c2ce753374d1d05760bb205</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_STDERR_TO_DEV_NULL</name>
      <anchor>gg075918988c271e7fb63f1a1d083e26dd5ae7fa0d4f6a0bdfc37adeb578634491</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_CHILD_INHERITS_STDIN</name>
      <anchor>gg075918988c271e7fb63f1a1d083e26dd9fb3c6cfddb2ef201f7b11829da8b5d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_FILE_AND_ARGV_ZERO</name>
      <anchor>gg075918988c271e7fb63f1a1d083e26dd55dc12133953441059847e8633227a84</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ThreadPriority</name>
      <anchor>g9b87dca6496b6ad53baec9ca01318448</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>THREAD_PRIORITY_LOW</name>
      <anchor>gg9b87dca6496b6ad53baec9ca01318448035a7bdc6a5b5eae6f644ed2605e8a37</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>THREAD_PRIORITY_NORMAL</name>
      <anchor>gg9b87dca6496b6ad53baec9ca013184486216bb25baaaca32642841ade911a92e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>THREAD_PRIORITY_HIGH</name>
      <anchor>gg9b87dca6496b6ad53baec9ca01318448ef77081535e90116b203ce3b3b0fe523</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>THREAD_PRIORITY_URGENT</name>
      <anchor>gg9b87dca6496b6ad53baec9ca013184485b79355bbd59c508995af57e0ed39a94</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>NotLock</name>
      <anchor>g2dd111336e3b057b51ca5871795fffa4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_LOCK</name>
      <anchor>gg2dd111336e3b057b51ca5871795fffa49681fb4e85e62ba64e39a12526eaa840</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>TryLock</name>
      <anchor>g7441a36336ea4cdb35c0fddbf3f97b19</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRY_LOCK</name>
      <anchor>gg7441a36336ea4cdb35c0fddbf3f97b19df6b2565785992ff637cbc453988841d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UnicodeType</name>
      <anchor>gdfbb414be3a4d127146fdca66dc7a46e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_CONTROL</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46ec280382585f1014b43ed228760e7c558</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_FORMAT</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46eaedc3e279c1c7e01f1bec907bbe313ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_UNASSIGNED</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46efc32abac3afbe8380d54790f178fd3de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_PRIVATE_USE</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46e5ca14907043380b1e9d725671bc71a56</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_SURROGATE</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46e0b99b4f93ef273ea4c49fb82970f5e54</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_LOWERCASE_LETTER</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46edb83c3e23724b6ef15888c6527a063bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_MODIFIER_LETTER</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46ee6e48ddd5b4eacb4cbf67fa902743458</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_OTHER_LETTER</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46e57ced328464824fe23113e7b98a4ae61</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_TITLECASE_LETTER</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46eb72e09c06a5aeffccdd94d5695dfcbc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_UPPERCASE_LETTER</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46e8f344db3f8e39ed99bc2c9665ab96c89</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_COMBINING_MARK</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46e5d22c0c4d39d68b815dccd52bb5ff01c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_ENCLOSING_MARK</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46e4508b84626068a2dbf23a69b96475e6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_NON_SPACING_MARK</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46e857864a5d1c145cc3ff8ccba54834f19</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_DECIMAL_NUMBER</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46ee75e5f353bc068ec3d8bf2555c540995</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_LETTER_NUMBER</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46e19811baedb3dbc8afddde43d00eb3cd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_OTHER_NUMBER</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46e45a259cec90b0ada120fe7116be422b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_CONNECT_PUNCTUATION</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46e649c83b23fb3d9bd7bf1803858cc5afe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_DASH_PUNCTUATION</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46ea1169c4e20b3a47f597005f84f9fa7fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_CLOSE_PUNCTUATION</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46e1ffaf2aac92ca1e818cf3e26b8301b90</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_FINAL_PUNCTUATION</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46eb549f212a3f340bd660a962b298409ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_INITIAL_PUNCTUATION</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46eb247e5e7480ecbf382b2128c600b8720</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_OTHER_PUNCTUATION</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46e5c9416f9219bf9282c49b7ca831f0c9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_OPEN_PUNCTUATION</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46e806e11a7f8d1a0b0688a0237ad1fa190</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_CURRENCY_SYMBOL</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46e40b40c2bb5d39acee2b81327e2efb905</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_MODIFIER_SYMBOL</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46e5b693a82d2e497a2b13cae8d5668097c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_MATH_SYMBOL</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46e28100e9fa5a262bbd32b973303746490</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_OTHER_SYMBOL</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46e298582645a73c91d191b7e1dc61d214f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_LINE_SEPARATOR</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46ed7650a40ddf3741e87a1039eba56b1a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_PARAGRAPH_SEPARATOR</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46e5b3c71c265af11b331d0ec4240af1c8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_SPACE_SEPARATOR</name>
      <anchor>ggdfbb414be3a4d127146fdca66dc7a46ec2eafb967dc62399aeb5ff27c8896b0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UnicodeBreakType</name>
      <anchor>g1af1a717c84d71aa4aabc9fc77b4d0ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_MANDATORY</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0ea37c762c3c7b080f5795ed6f828231923</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_CARRIAGE_RETURN</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0ea6b7c9d7a0ac78d14cf06b18bfeb2ccf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_LINE_FEED</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0ea7839936b879938c5056bdb55eb0b6b7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_COMBINING_MARK</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0ea014f326eb07effe48f1b771459caa7c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_SURROGATE</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0ea032b712c48700209c7cc414ca88cda34</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_ZERO_WIDTH_SPACE</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0eadb5ff8a11c4e596677d161903c732c56</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_INSEPARABLE</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0ea38f51c8283586493a3ebd45fa3b0113e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_NON_BREAKING_GLUE</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0ea47784c7e2cd80f6ac179de7f7a3f54e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_CONTINGENT</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0eae80d6fef8acf765da47c8235e39f4896</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_SPACE</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0eab37a6597dbf2e248b610769be7e5cb3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_AFTER</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0eada4027a9bfc5ffdf90e3be612adad7aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_BEFORE</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0eab1efcdcd3d6ecb55dff58a2e2ee1b9e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_BEFORE_AND_AFTER</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0eaafce05d8590e1b40ec427f8f78cf15ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_HYPHEN</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0ea7e6dd69fc00fdc42ab091a2916426dbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_NON_STARTER</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0eabe412d94a1f7d9e92cc5a20f0b549626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_OPEN_PUNCTUATION</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0ea52ebd39d1b02dfd368992a2ef8e7fa7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_CLOSE_PUNCTUATION</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0ead1284afc0511ab69aa18554b8306fbca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_QUOTATION</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0ea8fe57a799eacc3299fd256285dd1246d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_EXCLAMATION</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0eaf628849c1e5b531c022e12695c1f6f5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_IDEOGRAPHIC</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0ea22047a88734e9fe1e9e0fef994cfb20b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_NUMERIC</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0ea50a61c3c53da7558d08c1fcbcfc3b138</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_INFIX_SEPARATOR</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0ea07f3d0d76db141033eff38ee7577ffd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_SYMBOL</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0eafc02ec4862f016b6c2da35592f6cd62b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_ALPHABETIC</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0eaea27a8970e74f93f485d45f6a1684586</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_PREFIX</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0ea580794ffc9992e65666adce0611eecb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_POSTFIX</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0ea7ca3941d5dea03a5c824ae55212db01a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_COMPLEX_CONTEXT</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0ea3a96b8e59ba5815700d33c1f6006a339</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_AMBIGUOUS</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0eae79244811e61b30eb68ee02dc45f1c09</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_UNKNOWN</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0eaeb94f98b2233fae0afb38bf115b4b42d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_NEXT_LINE</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0ea7ffad3080f483a6b97680db786836ced</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_WORD_JOINER</name>
      <anchor>gg1af1a717c84d71aa4aabc9fc77b4d0ea9a74e7d947f75ef93d4e3aacebdb898b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>AsciiType</name>
      <anchor>g2e5a690ed07dfaa6f9ad9f1c57acd787</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASCII_ALNUM</name>
      <anchor>gg2e5a690ed07dfaa6f9ad9f1c57acd787f7d63a99479102b5391b44f631b5f009</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASCII_ALPHA</name>
      <anchor>gg2e5a690ed07dfaa6f9ad9f1c57acd787c87947c729ac3c3f9f58b0ca28460152</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASCII_CNTRL</name>
      <anchor>gg2e5a690ed07dfaa6f9ad9f1c57acd7872e19c57ce5a6eac38d911a86cc44a2fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASCII_DIGIT</name>
      <anchor>gg2e5a690ed07dfaa6f9ad9f1c57acd7879acd9a82d0670a3eb0377db782f48853</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASCII_GRAPH</name>
      <anchor>gg2e5a690ed07dfaa6f9ad9f1c57acd7872ecdbe5137af423fce73ff2bbb34d625</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASCII_LOWER</name>
      <anchor>gg2e5a690ed07dfaa6f9ad9f1c57acd787875d3cb7494e1548db0d37ab44d4057e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASCII_PRINT</name>
      <anchor>gg2e5a690ed07dfaa6f9ad9f1c57acd7879b1775043a8043d994c0c0ab890e86c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASCII_PUNCT</name>
      <anchor>gg2e5a690ed07dfaa6f9ad9f1c57acd787d3416d8662560db626259013ff72c58f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASCII_SPACE</name>
      <anchor>gg2e5a690ed07dfaa6f9ad9f1c57acd7877d7a68814efba3cf3d294475123413ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASCII_UPPER</name>
      <anchor>gg2e5a690ed07dfaa6f9ad9f1c57acd7875ae30681069b2ab88eed13e358c08090</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASCII_XDIGIT</name>
      <anchor>gg2e5a690ed07dfaa6f9ad9f1c57acd787d78490a35d65839f2f06449e7e472337</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>NormalizeMode</name>
      <anchor>g18199b64f406e397627a4e7fc799f848</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NORMALIZE_DEFAULT</name>
      <anchor>gg18199b64f406e397627a4e7fc799f848cbaee513b23e0066962df2e540cd4c99</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NORMALIZE_NFD</name>
      <anchor>gg18199b64f406e397627a4e7fc799f848169a0ae0910535038d8d403f874f0b5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NORMALIZE_DEFAULT_COMPOSE</name>
      <anchor>gg18199b64f406e397627a4e7fc799f848d9fb4be6b95958030771b4e8cba4144c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NORMALIZE_NFC</name>
      <anchor>gg18199b64f406e397627a4e7fc799f84820e4b8b42b12a7972ca4f6c84030978d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NORMALIZE_ALL</name>
      <anchor>gg18199b64f406e397627a4e7fc799f848a1cf5911572000f5273dc46fe2c5b270</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NORMALIZE_NFKD</name>
      <anchor>gg18199b64f406e397627a4e7fc799f848995775ef324bbd76a91a74c7f2686867</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NORMALIZE_ALL_COMPOSE</name>
      <anchor>gg18199b64f406e397627a4e7fc799f8487c98a2300648a33ca0ebc87fed999ca5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NORMALIZE_NFKC</name>
      <anchor>gg18199b64f406e397627a4e7fc799f848a7f62ac84c5ed8a8868cbb49a889dd98</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Sequence&lt; Iterator &gt;</type>
      <name>sequence</name>
      <anchorfile>group__ContHandles.html</anchorfile>
      <anchor>g33e5a3a70ef5f7bed112046726ff8b04</anchor>
      <arglist>(Iterator pbegin, Iterator pend)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_charset</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>gbf5fac564c47a7a9ad6037044c3909f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_charset</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>g88965337df48a173a6b013e8243e4631</anchor>
      <arglist>(std::string &amp;charset)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>convert</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>g58f7e4556c436a96c64b186bbc8f7f4c</anchor>
      <arglist>(const std::string &amp;str, const std::string &amp;to_codeset, const std::string &amp;from_codeset)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>convert_with_fallback</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>g40b5aa172fabd1f3dbf50a962d0d351f</anchor>
      <arglist>(const std::string &amp;str, const std::string &amp;to_codeset, const std::string &amp;from_codeset)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>convert_with_fallback</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>gf1b091e4397a7637e884148484b1f71e</anchor>
      <arglist>(const std::string &amp;str, const std::string &amp;to_codeset, const std::string &amp;from_codeset, const Glib::ustring &amp;fallback)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>locale_to_utf8</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>g4517b17f2aad4cd5c0e0640de212d928</anchor>
      <arglist>(const std::string &amp;opsys_string)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>locale_from_utf8</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>gcc062729285890a7e9b22bece6fb987c</anchor>
      <arglist>(const Glib::ustring &amp;utf8_string)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>filename_to_utf8</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>g6cf95dc00505401594260a360d70c17b</anchor>
      <arglist>(const std::string &amp;opsys_string)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>filename_from_utf8</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>g2bd94064ad97b43324a7854b62f0835b</anchor>
      <arglist>(const Glib::ustring &amp;utf8_string)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>filename_from_uri</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>gda23cd7f7dc8eb25e99b867a55551763</anchor>
      <arglist>(const Glib::ustring &amp;uri, Glib::ustring &amp;hostname)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>filename_from_uri</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>gb1cb94f4a4a70bad06b715fb14a252d9</anchor>
      <arglist>(const Glib::ustring &amp;uri)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>filename_to_uri</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>ge1b2f056bde3fbab578c602fe42e3de9</anchor>
      <arglist>(const std::string &amp;filename, const Glib::ustring &amp;hostname)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>filename_to_uri</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>gaf69aec83665229cc06596cf627d9d5a</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>filename_display_basename</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>g05dd67157ad35da4401263247b6f4d81</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>filename_display_name</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>gbc1b404cc965f3da6beecddfe2623afc</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>sigc::connection</type>
      <name>add_exception_handler</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>9a79a59cac511993cfea861bebd2f391</anchor>
      <arglist>(const sigc::slot&lt; void &gt; &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>FileTest</type>
      <name>operator|</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g8e018d8609ba17b0f6955505a8363bf7</anchor>
      <arglist>(FileTest lhs, FileTest rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileTest</type>
      <name>operator &amp;</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g2e640c1cc390e7d91f6366d65ed084f4</anchor>
      <arglist>(FileTest lhs, FileTest rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileTest</type>
      <name>operator^</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g6c089f23d6bfd92e083edc75519db75e</anchor>
      <arglist>(FileTest lhs, FileTest rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileTest</type>
      <name>operator~</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g948edadd8ee7442b83d37dc3c325f890</anchor>
      <arglist>(FileTest flags)</arglist>
    </member>
    <member kind="function">
      <type>FileTest &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g9a6f5470f667596e897f5bfbd1068283</anchor>
      <arglist>(FileTest &amp;lhs, FileTest rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileTest &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g4e68c8262a74dbde8ca9783ae5a8f72c</anchor>
      <arglist>(FileTest &amp;lhs, FileTest rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileTest &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g2219c78993a5196ca2a435a18e0fc3a7</anchor>
      <arglist>(FileTest &amp;lhs, FileTest rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>file_test</name>
      <anchorfile>group__FileUtils.html</anchorfile>
      <anchor>g0b2fce78896a9a84f7ea3a5646cc7d36</anchor>
      <arglist>(const std::string &amp;filename, FileTest test)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>mkstemp</name>
      <anchorfile>group__FileUtils.html</anchorfile>
      <anchor>ge4c8d716bd109b6b8e1420a8c20b3507</anchor>
      <arglist>(std::string &amp;filename_template)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>file_open_tmp</name>
      <anchorfile>group__FileUtils.html</anchorfile>
      <anchor>ge91f239f1cf0123399374deed54fbf3a</anchor>
      <arglist>(std::string &amp;name_used, const std::string &amp;prefix)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>file_open_tmp</name>
      <anchorfile>group__FileUtils.html</anchorfile>
      <anchor>g682379de4ea119540b4bdc1759e93e1d</anchor>
      <arglist>(std::string &amp;name_used)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>file_get_contents</name>
      <anchorfile>group__FileUtils.html</anchorfile>
      <anchor>g835da54212fe78e833ac55b49150b989</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>c90aee10d0b90e3d8a96a86b5394f87b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RefPtr&lt; ObjectBase &gt;</type>
      <name>wrap_interface</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>75643fed688d354848a0379d3da00133</anchor>
      <arglist>(GObject *object, bool take_copy=false)</arglist>
    </member>
    <member kind="function">
      <type>IOFlags</type>
      <name>operator|</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g0dd0a8800b6311ee8f3867eb27a72ae5</anchor>
      <arglist>(IOFlags lhs, IOFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gc2ecc634f28d057e0b892385e95dcb5b</anchor>
      <arglist>(IOFlags lhs, IOFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOFlags</type>
      <name>operator^</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gd61c57b0678c703e8a14230d18bacff7</anchor>
      <arglist>(IOFlags lhs, IOFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOFlags</type>
      <name>operator~</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g548c1cb09208fef57e5d0b3c992d71b9</anchor>
      <arglist>(IOFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>IOFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gc3539f6df5e0c0658726f4f0573146f9</anchor>
      <arglist>(IOFlags &amp;lhs, IOFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g3269a13b6b2b6ce45d8f65296102acb1</anchor>
      <arglist>(IOFlags &amp;lhs, IOFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g2180a5c566ced37bbeb37050d9632da9</anchor>
      <arglist>(IOFlags &amp;lhs, IOFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; IOChannel &gt;</type>
      <name>wrap</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>671306f4a3a0cae5ab4d7a9d54886592</anchor>
      <arglist>(GIOChannel *gobject, bool take_copy=false)</arglist>
    </member>
    <member kind="function">
      <type>KeyFileFlags</type>
      <name>operator|</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gbac5e1493392116b118e4d1048e3fef0</anchor>
      <arglist>(KeyFileFlags lhs, KeyFileFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>KeyFileFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gbdd6dad90b17ad88ba835f313524a307</anchor>
      <arglist>(KeyFileFlags lhs, KeyFileFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>KeyFileFlags</type>
      <name>operator^</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gcc28b21831114895abfdbae6c1908114</anchor>
      <arglist>(KeyFileFlags lhs, KeyFileFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>KeyFileFlags</type>
      <name>operator~</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gb99ff1d7c6d96da2ddfcfd1c4954e9b6</anchor>
      <arglist>(KeyFileFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>KeyFileFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g7096a34594825c90d7b6257935a62eb1</anchor>
      <arglist>(KeyFileFlags &amp;lhs, KeyFileFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>KeyFileFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g5ea1950426a74dffefbb5355764ad9e6</anchor>
      <arglist>(KeyFileFlags &amp;lhs, KeyFileFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>KeyFileFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gc90869f74a743e2f99f55708c28a585d</anchor>
      <arglist>(KeyFileFlags &amp;lhs, KeyFileFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOCondition</type>
      <name>operator|</name>
      <anchorfile>group__MainLoop.html</anchorfile>
      <anchor>gb5937e9164f36f75ba87fd67903348d5</anchor>
      <arglist>(IOCondition lhs, IOCondition rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOCondition</type>
      <name>operator &amp;</name>
      <anchorfile>group__MainLoop.html</anchorfile>
      <anchor>g1ce6f8c4204f496d7669e987f2e291b8</anchor>
      <arglist>(IOCondition lhs, IOCondition rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOCondition</type>
      <name>operator^</name>
      <anchorfile>group__MainLoop.html</anchorfile>
      <anchor>g6416bbf923045261beb85241fff8ef0d</anchor>
      <arglist>(IOCondition lhs, IOCondition rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOCondition</type>
      <name>operator~</name>
      <anchorfile>group__MainLoop.html</anchorfile>
      <anchor>g85461947d24f306cefd2fe17999deb97</anchor>
      <arglist>(IOCondition flags)</arglist>
    </member>
    <member kind="function">
      <type>IOCondition &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__MainLoop.html</anchorfile>
      <anchor>g8269a01826f8737d98ab0d345a0004f4</anchor>
      <arglist>(IOCondition &amp;lhs, IOCondition rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOCondition &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__MainLoop.html</anchorfile>
      <anchor>gd1f673b77dfb469e7bf71f2f6310e806</anchor>
      <arglist>(IOCondition &amp;lhs, IOCondition rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOCondition &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__MainLoop.html</anchorfile>
      <anchor>g995d6d5d01db67af62661bcd5dfd1ad6</anchor>
      <arglist>(IOCondition &amp;lhs, IOCondition rhs)</arglist>
    </member>
    <member kind="function">
      <type>SignalTimeout</type>
      <name>signal_timeout</name>
      <anchorfile>group__MainLoop.html</anchorfile>
      <anchor>gadb206fcc112f086f9d47c016b1f2175</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SignalIdle</type>
      <name>signal_idle</name>
      <anchorfile>group__MainLoop.html</anchorfile>
      <anchor>g76792522d9680a05e232d3519a25f98d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SignalIO</type>
      <name>signal_io</name>
      <anchorfile>group__MainLoop.html</anchorfile>
      <anchor>gf391654b755a32169d18be4835677376</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SignalChildWatch</type>
      <name>signal_child_watch</name>
      <anchorfile>group__MainLoop.html</anchorfile>
      <anchor>g11ee7db80cc44ece02056a38bb049e3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_application_name</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>g9c2f67828083d74925b23c59ab868698</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_application_name</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>g40e45835b7b461cba0f7a10fbb63c0d3</anchor>
      <arglist>(const Glib::ustring &amp;application_name)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_prgname</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>g391655dededb496010eee2e92d0f1fdf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_prgname</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>g7d5c429822c09048892c4dee9c8e08c1</anchor>
      <arglist>(const std::string &amp;prgname)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getenv</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>g5e186fdb08835342a5866b11fe787ebb</anchor>
      <arglist>(const std::string &amp;variable, bool &amp;found)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getenv</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>g8e2c8f250aa7f059956737851ace08f6</anchor>
      <arglist>(const std::string &amp;variable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setenv</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>g862657f21e5a930541d048a920204f59</anchor>
      <arglist>(const std::string &amp;variable, const std::string &amp;value, bool overwrite=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unsetenv</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>g6fb89001630714ec9ee5244cab56343e</anchor>
      <arglist>(const std::string &amp;variable)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_user_name</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>g52964bfd712e8c9e688f668da51f3ed9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_real_name</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>g30692e3263e66868878f535e0b7c9722</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_home_dir</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>g9412ea70c7fea058c03211dac318f8e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_tmp_dir</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>gc42272146fd9320958132f1591d28991</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_current_dir</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>g06d93c95572d6a382b8cc4e09dd5a339</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_user_data_dir</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>g821b704b5ede1583e4057990976d394b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_user_config_dir</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ge517b931f4753abcd48adb2769a8fc48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_user_cache_dir</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ga68121f26e82df1c293c82b89c8998e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>path_is_absolute</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>gd82525f39f7408f97f2c096c4f721b3b</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>path_skip_root</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>g306eee64abc3d28993895b826f4dd533</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>path_get_basename</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>g20ebf2917a7fce5d1901568017b95a35</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>path_get_dirname</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ge03457226c4239a74b83486739521434</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>build_filename</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ga4a70bf050b3f318f87049ed30206a9a</anchor>
      <arglist>(const Glib::ArrayHandle&lt; std::string &gt; &amp;elements)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>build_filename</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>gda06023cc39be3a44eb68e38d6cbea6c</anchor>
      <arglist>(const std::string &amp;elem1, const std::string &amp;elem2)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>build_path</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>g6afc89d45cc34f3cfce4a55f3f5e7afa</anchor>
      <arglist>(const std::string &amp;separator, const Glib::ArrayHandle&lt; std::string &gt; &amp;elements)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>find_program_in_path</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ga4c4ecb9a3eb803ae6d9dee51e1e5b14</anchor>
      <arglist>(const std::string &amp;program)</arglist>
    </member>
    <member kind="function">
      <type>ModuleFlags</type>
      <name>operator|</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gde862759d091b90329ba8f85aa2fd010</anchor>
      <arglist>(ModuleFlags lhs, ModuleFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ModuleFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g330585c44ed8bae05e931414481515a1</anchor>
      <arglist>(ModuleFlags lhs, ModuleFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ModuleFlags</type>
      <name>operator^</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g333d93ef372c08c322d27ac05bda0e18</anchor>
      <arglist>(ModuleFlags lhs, ModuleFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ModuleFlags</type>
      <name>operator~</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gaa723a5b4d33e54167f7adbb18746004</anchor>
      <arglist>(ModuleFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>ModuleFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ge9df767ea1ec74b0d9d9acce426a07a8</anchor>
      <arglist>(ModuleFlags &amp;lhs, ModuleFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ModuleFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g5c0dd7eca1f39db3f45ec045cfb2f8f8</anchor>
      <arglist>(ModuleFlags &amp;lhs, ModuleFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ModuleFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g8e73a634c6441630eddf8805b22dd163</anchor>
      <arglist>(ModuleFlags &amp;lhs, ModuleFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>_gobject_cppinstance_already_deleted</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>62215893e99ad8dcd9fe12100a4bc7bf</anchor>
      <arglist>(GObject *gobject)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ArrayHandle&lt; std::string &gt;</type>
      <name>shell_parse_argv</name>
      <anchorfile>group__ShellUtils.html</anchorfile>
      <anchor>gbc52fcb14cfc7a5ba37ca821cc837818</anchor>
      <arglist>(const std::string &amp;command_line)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>shell_quote</name>
      <anchorfile>group__ShellUtils.html</anchorfile>
      <anchor>g55ebfb935f2131b2ae40d339568f568c</anchor>
      <arglist>(const std::string &amp;unquoted_string)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>shell_unquote</name>
      <anchorfile>group__ShellUtils.html</anchorfile>
      <anchor>g449dc37c6ea7e7563740df86e31c263c</anchor>
      <arglist>(const std::string &amp;quoted_string)</arglist>
    </member>
    <member kind="function">
      <type>SpawnFlags</type>
      <name>operator|</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gba6cac919da111ebf69667bf9f8006ff</anchor>
      <arglist>(SpawnFlags lhs, SpawnFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SpawnFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g807af191d1776c33e82c9f6c8228c488</anchor>
      <arglist>(SpawnFlags lhs, SpawnFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SpawnFlags</type>
      <name>operator^</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g84449a9a461b381f88f65435ef8389ec</anchor>
      <arglist>(SpawnFlags lhs, SpawnFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SpawnFlags</type>
      <name>operator~</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g065f45ca68d1397febf331293e4cc4de</anchor>
      <arglist>(SpawnFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>SpawnFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gbbe289c910b34a158f8dc22bb0b0095f</anchor>
      <arglist>(SpawnFlags &amp;lhs, SpawnFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SpawnFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g044d7f5c8c7183fc673d61661b269380</anchor>
      <arglist>(SpawnFlags &amp;lhs, SpawnFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SpawnFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g40166fcca8eb8ec5b148c82444553927</anchor>
      <arglist>(SpawnFlags &amp;lhs, SpawnFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spawn_async_with_pipes</name>
      <anchorfile>group__Spawn.html</anchorfile>
      <anchor>g0a530eed9f6343ea1d51cb8ec8051ce7</anchor>
      <arglist>(const std::string &amp;working_directory, const Glib::ArrayHandle&lt; std::string &gt; &amp;argv, const Glib::ArrayHandle&lt; std::string &gt; &amp;envp, SpawnFlags flags=SpawnFlags(0), const sigc::slot&lt; void &gt; &amp;child_setup=sigc::slot&lt; void &gt;(), Pid *child_pid=0, int *standard_input=0, int *standard_output=0, int *standard_error=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spawn_async_with_pipes</name>
      <anchorfile>group__Spawn.html</anchorfile>
      <anchor>g36b7c1d110d10f86f3ef5d6e10db206f</anchor>
      <arglist>(const std::string &amp;working_directory, const Glib::ArrayHandle&lt; std::string &gt; &amp;argv, SpawnFlags flags=SpawnFlags(0), const sigc::slot&lt; void &gt; &amp;child_setup=sigc::slot&lt; void &gt;(), Pid *child_pid=0, int *standard_input=0, int *standard_output=0, int *standard_error=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spawn_async</name>
      <anchorfile>group__Spawn.html</anchorfile>
      <anchor>g5d42ba801678215f3820382388df32b0</anchor>
      <arglist>(const std::string &amp;working_directory, const Glib::ArrayHandle&lt; std::string &gt; &amp;argv, const Glib::ArrayHandle&lt; std::string &gt; &amp;envp, SpawnFlags flags=SpawnFlags(0), const sigc::slot&lt; void &gt; &amp;child_setup=sigc::slot&lt; void &gt;(), Pid *child_pid=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spawn_async</name>
      <anchorfile>group__Spawn.html</anchorfile>
      <anchor>g0c4e1708989b50fb34266504cc038ee6</anchor>
      <arglist>(const std::string &amp;working_directory, const Glib::ArrayHandle&lt; std::string &gt; &amp;argv, SpawnFlags flags=SpawnFlags(0), const sigc::slot&lt; void &gt; &amp;child_setup=sigc::slot&lt; void &gt;(), Pid *child_pid=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spawn_sync</name>
      <anchorfile>group__Spawn.html</anchorfile>
      <anchor>gd4fbf31fdb5536b104f4f75bf58c60e1</anchor>
      <arglist>(const std::string &amp;working_directory, const Glib::ArrayHandle&lt; std::string &gt; &amp;argv, const Glib::ArrayHandle&lt; std::string &gt; &amp;envp, SpawnFlags flags=SpawnFlags(0), const sigc::slot&lt; void &gt; &amp;child_setup=sigc::slot&lt; void &gt;(), std::string *standard_output=0, std::string *standard_error=0, int *exit_status=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spawn_sync</name>
      <anchorfile>group__Spawn.html</anchorfile>
      <anchor>gcc157258907be90b58184baeebc9c740</anchor>
      <arglist>(const std::string &amp;working_directory, const Glib::ArrayHandle&lt; std::string &gt; &amp;argv, SpawnFlags flags=SpawnFlags(0), const sigc::slot&lt; void &gt; &amp;child_setup=sigc::slot&lt; void &gt;(), std::string *standard_output=0, std::string *standard_error=0, int *exit_status=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spawn_command_line_async</name>
      <anchorfile>group__Spawn.html</anchorfile>
      <anchor>g648167a4af607f87763f1334fe5a472f</anchor>
      <arglist>(const std::string &amp;command_line)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spawn_command_line_sync</name>
      <anchorfile>group__Spawn.html</anchorfile>
      <anchor>g713bdb79396eda85ad186cb2db89564f</anchor>
      <arglist>(const std::string &amp;command_line, std::string *standard_output=0, std::string *standard_error=0, int *exit_status=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spawn_close_pid</name>
      <anchorfile>group__Spawn.html</anchorfile>
      <anchor>gaea8f41c7a08af3b2919ce64fd0c27e5</anchor>
      <arglist>(Pid pid)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>str_has_prefix</name>
      <anchorfile>group__StringUtils.html</anchorfile>
      <anchor>g6b7e8354049756e92a97554a107618ac</anchor>
      <arglist>(const std::string &amp;str, const std::string &amp;prefix)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>str_has_suffix</name>
      <anchorfile>group__StringUtils.html</anchorfile>
      <anchor>g5c4e380ffc6617ac61ca92e203e45630</anchor>
      <arglist>(const std::string &amp;str, const std::string &amp;suffix)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>strescape</name>
      <anchorfile>group__StringUtils.html</anchorfile>
      <anchor>g35e288b5ce34cb15eeec907421d2b77c</anchor>
      <arglist>(const std::string &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>strescape</name>
      <anchorfile>group__StringUtils.html</anchorfile>
      <anchor>gd24f3547c8d6b3ec56d7f5805a11d6ab</anchor>
      <arglist>(const std::string &amp;source, const std::string &amp;exceptions)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>strcompress</name>
      <anchorfile>group__StringUtils.html</anchorfile>
      <anchor>g85cd83bd40baf0119aac3ff0a9a5e7b2</anchor>
      <arglist>(const std::string &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>strerror</name>
      <anchorfile>group__StringUtils.html</anchorfile>
      <anchor>g1eb869894996c91c0f69dbff96714c71</anchor>
      <arglist>(int errnum)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>strsignal</name>
      <anchorfile>group__StringUtils.html</anchorfile>
      <anchor>g44ce9f689aff8abe1e3073b209f360d3</anchor>
      <arglist>(int signum)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>thread_init</name>
      <anchorfile>group__Threads.html</anchorfile>
      <anchor>gb26d01c776801f1fff00753e97af4fc7</anchor>
      <arglist>(GThreadFunctions *vtable=0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>thread_supported</name>
      <anchorfile>group__Threads.html</anchorfile>
      <anchor>gd59d126f6197035e6f6a31e7f4d87818</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>usleep</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>5d75264c8b47f13fb33f973b0d4fc73e</anchor>
      <arglist>(unsigned long microseconds)</arglist>
    </member>
    <member kind="function">
      <type>AsciiType</type>
      <name>operator|</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g5bc1518eb5547dbb8af77b944ccaa048</anchor>
      <arglist>(AsciiType lhs, AsciiType rhs)</arglist>
    </member>
    <member kind="function">
      <type>AsciiType</type>
      <name>operator &amp;</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ge25c16ef876bb93950203cff88ffd89c</anchor>
      <arglist>(AsciiType lhs, AsciiType rhs)</arglist>
    </member>
    <member kind="function">
      <type>AsciiType</type>
      <name>operator^</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g682a545ca2e86b3e162305e4f14fa8d5</anchor>
      <arglist>(AsciiType lhs, AsciiType rhs)</arglist>
    </member>
    <member kind="function">
      <type>AsciiType</type>
      <name>operator~</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gd7ea47582094c6d092a8f485e1e709c6</anchor>
      <arglist>(AsciiType flags)</arglist>
    </member>
    <member kind="function">
      <type>AsciiType &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g69bba23f4c9a83c268d0599f241b8ebe</anchor>
      <arglist>(AsciiType &amp;lhs, AsciiType rhs)</arglist>
    </member>
    <member kind="function">
      <type>AsciiType &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ge3a9f95c99ce7e8f80ae78f4a8fd33cb</anchor>
      <arglist>(AsciiType &amp;lhs, AsciiType rhs)</arglist>
    </member>
    <member kind="function">
      <type>AsciiType &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gc1b0239e539cf250333fe0adc04dbb41</anchor>
      <arglist>(AsciiType &amp;lhs, AsciiType rhs)</arglist>
    </member>
    <member kind="function">
      <type>gunichar</type>
      <name>get_unichar_from_std_iterator</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>b29e9e1caba4f61fddb0dfef56203255</anchor>
      <arglist>(std::string::const_iterator pos) G_GNUC_PURE</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wrap_register_init</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>17035ac5c11853e9038628ae31b5633d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wrap_register_cleanup</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>81058a22c4c6b1c5604ea65ba05ad364</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wrap_register</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>fd0875fdbef4a91772a0d6ab569d6212</anchor>
      <arglist>(GType type, WrapNewFunction func)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ObjectBase *</type>
      <name>wrap_auto</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>54d01f444df296511babfe2ee153368d</anchor>
      <arglist>(GObject *object, bool take_copy=false)</arglist>
    </member>
    <member kind="function">
      <type>T::BaseObjectType *</type>
      <name>unwrap</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>104920ed41b79c0b3b0aeaf3ed63d84b</anchor>
      <arglist>(T *ptr)</arglist>
    </member>
    <member kind="function">
      <type>const T::BaseObjectType *</type>
      <name>unwrap</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>666f8c59e1804aeb02f48ff940fa602c</anchor>
      <arglist>(const T *ptr)</arglist>
    </member>
    <member kind="function">
      <type>T::BaseObjectType *</type>
      <name>unwrap</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>5bbf90603746c170d0a99cef59bbe2d0</anchor>
      <arglist>(const Glib::RefPtr&lt; T &gt; &amp;ptr)</arglist>
    </member>
    <member kind="function">
      <type>const T::BaseObjectType *</type>
      <name>unwrap</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>5bd5ddd4c962f4a26bf52a3ec783e8c5</anchor>
      <arglist>(const Glib::RefPtr&lt; const T &gt; &amp;ptr)</arglist>
    </member>
    <member kind="function">
      <type>T::BaseObjectType *</type>
      <name>unwrap_copy</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>6cdcc90e63b4650a8f03f72bce01902a</anchor>
      <arglist>(const Glib::RefPtr&lt; T &gt; &amp;ptr)</arglist>
    </member>
    <member kind="function">
      <type>const T::BaseObjectType *</type>
      <name>unwrap_copy</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>d344713e5c0ac8ee6a46f9d04181a60e</anchor>
      <arglist>(const Glib::RefPtr&lt; const T &gt; &amp;ptr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::ArrayHandle</name>
    <filename>classGlib_1_1ArrayHandle.html</filename>
    <templarg>T</templarg>
    <templarg>Tr</templarg>
    <member kind="typedef">
      <type>Tr::CppType</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1ArrayHandle.html</anchorfile>
      <anchor>d9ca8fd0074e25366ce9ae85c0da9ffe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Tr::CType</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1ArrayHandle.html</anchorfile>
      <anchor>2161a555c5f651233af6aa32cfd016d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CppType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1ArrayHandle.html</anchorfile>
      <anchor>6775de1220d2725511f79629f0d3a63a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>size_t</type>
      <name>size_type</name>
      <anchorfile>classGlib_1_1ArrayHandle.html</anchorfile>
      <anchor>feb69cdde48519d9064005add7da8230</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classGlib_1_1ArrayHandle.html</anchorfile>
      <anchor>f60a5061ee1b430b7b3330059de02e39</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Glib::Container_Helpers::ArrayHandleIterator&lt; Tr &gt;</type>
      <name>const_iterator</name>
      <anchorfile>classGlib_1_1ArrayHandle.html</anchorfile>
      <anchor>cd735f11ade4130e520ef66bd5800aef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Glib::Container_Helpers::ArrayHandleIterator&lt; Tr &gt;</type>
      <name>iterator</name>
      <anchorfile>classGlib_1_1ArrayHandle.html</anchorfile>
      <anchor>8aba00ae24aa2813f378fd157dba99c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrayHandle</name>
      <anchorfile>classGlib_1_1ArrayHandle.html</anchorfile>
      <anchor>7a261c3c3e4e1b0ead57b134625e6e3e</anchor>
      <arglist>(const Cont &amp;container)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrayHandle</name>
      <anchorfile>classGlib_1_1ArrayHandle.html</anchorfile>
      <anchor>4a7138271154d742d6f4a2adc7995eb5</anchor>
      <arglist>(const CType *array, size_t array_size, Glib::OwnershipType ownership)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrayHandle</name>
      <anchorfile>classGlib_1_1ArrayHandle.html</anchorfile>
      <anchor>9cdca99f478f47db5c317097d68d45b9</anchor>
      <arglist>(const CType *array, Glib::OwnershipType ownership)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrayHandle</name>
      <anchorfile>classGlib_1_1ArrayHandle.html</anchorfile>
      <anchor>c8a366a9b0b2f464f431a84228348931</anchor>
      <arglist>(const ArrayHandle&lt; T, Tr &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ArrayHandle</name>
      <anchorfile>classGlib_1_1ArrayHandle.html</anchorfile>
      <anchor>0f94a99de78be3475f1b30adfd96fc6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classGlib_1_1ArrayHandle.html</anchorfile>
      <anchor>a6a2e163a4d195aac53c75cb02be7601</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classGlib_1_1ArrayHandle.html</anchorfile>
      <anchor>4ac069ea1060d9c0ac46efce7694e7ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::vector</name>
      <anchorfile>classGlib_1_1ArrayHandle.html</anchorfile>
      <anchor>a6f34513009a7c83afae603250288c9b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::deque</name>
      <anchorfile>classGlib_1_1ArrayHandle.html</anchorfile>
      <anchor>4501791cfc8ceb4119887f4863bc34fb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::list</name>
      <anchorfile>classGlib_1_1ArrayHandle.html</anchorfile>
      <anchor>9bec100e369b0169ce2b7745ea0c51fa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign_to</name>
      <anchorfile>classGlib_1_1ArrayHandle.html</anchorfile>
      <anchor>3dbda14c24e7c445fad97dea25182109</anchor>
      <arglist>(Cont &amp;container) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classGlib_1_1ArrayHandle.html</anchorfile>
      <anchor>afc535e0cc77d2c1f53709f726164d2b</anchor>
      <arglist>(Out pdest) const </arglist>
    </member>
    <member kind="function">
      <type>const CType *</type>
      <name>data</name>
      <anchorfile>classGlib_1_1ArrayHandle.html</anchorfile>
      <anchor>8794146efa526907e7c9cd6fc336cbf8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>classGlib_1_1ArrayHandle.html</anchorfile>
      <anchor>b78550b32462c01af61e626aaec484c0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classGlib_1_1ArrayHandle.html</anchorfile>
      <anchor>6d3451afee37c942602a6db774838ffc</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Sequence</name>
    <filename>classGlib_1_1Sequence.html</filename>
    <templarg>Iterator</templarg>
    <member kind="function">
      <type></type>
      <name>Sequence</name>
      <anchorfile>classGlib_1_1Sequence.html</anchorfile>
      <anchor>2f556fc5bb85887bfeb6547e0076adb4</anchor>
      <arglist>(Iterator pbegin, Iterator pend)</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchorfile>classGlib_1_1Sequence.html</anchorfile>
      <anchor>6d7083f5215ac6dd6d3197be858abcd2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchorfile>classGlib_1_1Sequence.html</anchorfile>
      <anchor>3b5ed96c1fb03690b3baef6a97ae0b21</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>classGlib_1_1Sequence.html</anchorfile>
      <anchor>e8d05d5808189308272a3f6b2512ad40</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::ConvertError</name>
    <filename>classGlib_1_1ConvertError.html</filename>
    <base>Glib::Error</base>
    <member kind="enumvalue">
      <type>@</type>
      <name>NO_CONVERSION</name>
      <anchorfile>classGlib_1_1ConvertError.html</anchorfile>
      <anchor>ea4b79ac3149c1fcfcab32155e3561a98f2c0837cb3d39247edde4926ff34a74</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ILLEGAL_SEQUENCE</name>
      <anchorfile>classGlib_1_1ConvertError.html</anchorfile>
      <anchor>ea4b79ac3149c1fcfcab32155e3561a9335a4cb227118026dd0c25661f294d10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FAILED</name>
      <anchorfile>classGlib_1_1ConvertError.html</anchorfile>
      <anchor>ea4b79ac3149c1fcfcab32155e3561a96c5415ccb53faa02252bad81b7b5fc38</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PARTIAL_INPUT</name>
      <anchorfile>classGlib_1_1ConvertError.html</anchorfile>
      <anchor>ea4b79ac3149c1fcfcab32155e3561a90be7db7936eec0a931279e290e4b7635</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BAD_URI</name>
      <anchorfile>classGlib_1_1ConvertError.html</anchorfile>
      <anchor>ea4b79ac3149c1fcfcab32155e3561a99f0c06afb8e2258f079faf99807c816d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NOT_ABSOLUTE_PATH</name>
      <anchorfile>classGlib_1_1ConvertError.html</anchorfile>
      <anchor>ea4b79ac3149c1fcfcab32155e3561a944f6211a4a40cd76eb56cd962a981c31</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Code</name>
      <anchor>ea4b79ac3149c1fcfcab32155e3561a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_CONVERSION</name>
      <anchor>ea4b79ac3149c1fcfcab32155e3561a98f2c0837cb3d39247edde4926ff34a74</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ILLEGAL_SEQUENCE</name>
      <anchor>ea4b79ac3149c1fcfcab32155e3561a9335a4cb227118026dd0c25661f294d10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FAILED</name>
      <anchor>ea4b79ac3149c1fcfcab32155e3561a96c5415ccb53faa02252bad81b7b5fc38</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PARTIAL_INPUT</name>
      <anchor>ea4b79ac3149c1fcfcab32155e3561a90be7db7936eec0a931279e290e4b7635</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_URI</name>
      <anchor>ea4b79ac3149c1fcfcab32155e3561a99f0c06afb8e2258f079faf99807c816d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_ABSOLUTE_PATH</name>
      <anchor>ea4b79ac3149c1fcfcab32155e3561a944f6211a4a40cd76eb56cd962a981c31</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConvertError</name>
      <anchorfile>classGlib_1_1ConvertError.html</anchorfile>
      <anchor>99da762bafb432b501a9adaa378e48e1</anchor>
      <arglist>(Code error_code, const Glib::ustring &amp;error_message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConvertError</name>
      <anchorfile>classGlib_1_1ConvertError.html</anchorfile>
      <anchor>1f91f82109b547d84c67b1e6e4abc863</anchor>
      <arglist>(GError *gobject)</arglist>
    </member>
    <member kind="function">
      <type>Code</type>
      <name>code</name>
      <anchorfile>classGlib_1_1ConvertError.html</anchorfile>
      <anchor>337140841bdec147d1e26406b566ebd1</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::IConv</name>
    <filename>classGlib_1_1IConv.html</filename>
    <member kind="function">
      <type></type>
      <name>IConv</name>
      <anchorfile>classGlib_1_1IConv.html</anchorfile>
      <anchor>bb841f9db0731eb8cbc4ea2a8a5d23d5</anchor>
      <arglist>(const std::string &amp;to_codeset, const std::string &amp;from_codeset)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IConv</name>
      <anchorfile>classGlib_1_1IConv.html</anchorfile>
      <anchor>d2722879e0465fec5d9f2c126a602557</anchor>
      <arglist>(GIConv gobject)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~IConv</name>
      <anchorfile>classGlib_1_1IConv.html</anchorfile>
      <anchor>b56fc0ef68a7f7fee554728a16c6cba0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>iconv</name>
      <anchorfile>classGlib_1_1IConv.html</anchorfile>
      <anchor>15b01bcbafa643bb7c748bfe0048cb82</anchor>
      <arglist>(char **inbuf, gsize *inbytes_left, char **outbuf, gsize *outbytes_left)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classGlib_1_1IConv.html</anchorfile>
      <anchor>b0655474f54dd933d3f6959bdafffabe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>convert</name>
      <anchorfile>classGlib_1_1IConv.html</anchorfile>
      <anchor>82af42360f040532ebd4b215dc89a59d</anchor>
      <arglist>(const std::string &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>GIConv</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1IConv.html</anchorfile>
      <anchor>12a8c09489388d1efcf9b70586307614</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Date</name>
    <filename>classGlib_1_1Date.html</filename>
    <member kind="typedef">
      <type>guint8</type>
      <name>Day</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>217c209f5b937185e730455aed95c4fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>guint16</type>
      <name>Year</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a308aa855887d94a371adddfc23353c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BAD_MONTH</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gg9781abc52ad49766808898743e44031f3c180cbd1a72ac6c1193374f07478043</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>JANUARY</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gg9781abc52ad49766808898743e44031fdcae78391f0081dd887dbd5c62ce9e18</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FEBRUARY</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gg9781abc52ad49766808898743e44031ffbb90abf68464b8e14a764cef1ced1e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MARCH</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gg9781abc52ad49766808898743e44031faf1909bbb4cbf9a02db828ab35e52ce3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>APRIL</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gg9781abc52ad49766808898743e44031f879774f2eee3f8807bbd8e3c25e3c5b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MAY</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gg9781abc52ad49766808898743e44031f9da639bcfe895324daded17f4600116b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>JUNE</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gg9781abc52ad49766808898743e44031faab22ac997e15a34995118694f8cbd2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>JULY</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gg9781abc52ad49766808898743e44031fe6d2bfb5bd12aace37808b1f5fe53afb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>AUGUST</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gg9781abc52ad49766808898743e44031f846063b97ea9c5dd82cae8718bb75df1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SEPTEMBER</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gg9781abc52ad49766808898743e44031fa7e563e8689c07fac8f60f9f68f6cebb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>OCTOBER</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gg9781abc52ad49766808898743e44031f3c5a2a9a7bfcc9b7cbd57b89856c4989</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NOVEMBER</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gg9781abc52ad49766808898743e44031fc21038623ac787c4c94010d2334f6c8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DECEMBER</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gg9781abc52ad49766808898743e44031f2aed3776c7cb74418206e52677f394c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BAD_WEEKDAY</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gg073c9f49a289b2036eb226bcdf16a2f10b852cafa7e3b36f3b87c8acd796be89</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MONDAY</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gg073c9f49a289b2036eb226bcdf16a2f1c75c38cdbe0d1a25346de7d5a1919f12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TUESDAY</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gg073c9f49a289b2036eb226bcdf16a2f13f573dae7a781f9f380b0adecdc068fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WEDNESDAY</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gg073c9f49a289b2036eb226bcdf16a2f1b91831a000325a1ad3dd881f0db708e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>THURSDAY</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gg073c9f49a289b2036eb226bcdf16a2f1c2be9a407f81cac5ef82ec308aa23cc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FRIDAY</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gg073c9f49a289b2036eb226bcdf16a2f1d86f5fb6fa5f0f99e8f6980d5d78ceae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SATURDAY</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gg073c9f49a289b2036eb226bcdf16a2f1a8703e1dd1d78272012d603e8ded6807</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SUNDAY</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gg073c9f49a289b2036eb226bcdf16a2f1c0ae61753cd0be03a4cee4ff0b209fb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DAY</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggc803072d86bbc2ce1f7d558c94f41ae1340ad04532a2d66518f8eefdf1ac1b27</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MONTH</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggc803072d86bbc2ce1f7d558c94f41ae19da8611c47d68fe95d9026cf162bb350</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>YEAR</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggc803072d86bbc2ce1f7d558c94f41ae18eec7a614a99a9640e578862c13b5682</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Month</name>
      <anchor>g9781abc52ad49766808898743e44031f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_MONTH</name>
      <anchor>gg9781abc52ad49766808898743e44031f3c180cbd1a72ac6c1193374f07478043</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JANUARY</name>
      <anchor>gg9781abc52ad49766808898743e44031fdcae78391f0081dd887dbd5c62ce9e18</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FEBRUARY</name>
      <anchor>gg9781abc52ad49766808898743e44031ffbb90abf68464b8e14a764cef1ced1e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MARCH</name>
      <anchor>gg9781abc52ad49766808898743e44031faf1909bbb4cbf9a02db828ab35e52ce3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>APRIL</name>
      <anchor>gg9781abc52ad49766808898743e44031f879774f2eee3f8807bbd8e3c25e3c5b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAY</name>
      <anchor>gg9781abc52ad49766808898743e44031f9da639bcfe895324daded17f4600116b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JUNE</name>
      <anchor>gg9781abc52ad49766808898743e44031faab22ac997e15a34995118694f8cbd2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JULY</name>
      <anchor>gg9781abc52ad49766808898743e44031fe6d2bfb5bd12aace37808b1f5fe53afb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AUGUST</name>
      <anchor>gg9781abc52ad49766808898743e44031f846063b97ea9c5dd82cae8718bb75df1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SEPTEMBER</name>
      <anchor>gg9781abc52ad49766808898743e44031fa7e563e8689c07fac8f60f9f68f6cebb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OCTOBER</name>
      <anchor>gg9781abc52ad49766808898743e44031f3c5a2a9a7bfcc9b7cbd57b89856c4989</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOVEMBER</name>
      <anchor>gg9781abc52ad49766808898743e44031fc21038623ac787c4c94010d2334f6c8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DECEMBER</name>
      <anchor>gg9781abc52ad49766808898743e44031f2aed3776c7cb74418206e52677f394c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Weekday</name>
      <anchor>g073c9f49a289b2036eb226bcdf16a2f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_WEEKDAY</name>
      <anchor>gg073c9f49a289b2036eb226bcdf16a2f10b852cafa7e3b36f3b87c8acd796be89</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MONDAY</name>
      <anchor>gg073c9f49a289b2036eb226bcdf16a2f1c75c38cdbe0d1a25346de7d5a1919f12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TUESDAY</name>
      <anchor>gg073c9f49a289b2036eb226bcdf16a2f13f573dae7a781f9f380b0adecdc068fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WEDNESDAY</name>
      <anchor>gg073c9f49a289b2036eb226bcdf16a2f1b91831a000325a1ad3dd881f0db708e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>THURSDAY</name>
      <anchor>gg073c9f49a289b2036eb226bcdf16a2f1c2be9a407f81cac5ef82ec308aa23cc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FRIDAY</name>
      <anchor>gg073c9f49a289b2036eb226bcdf16a2f1d86f5fb6fa5f0f99e8f6980d5d78ceae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SATURDAY</name>
      <anchor>gg073c9f49a289b2036eb226bcdf16a2f1a8703e1dd1d78272012d603e8ded6807</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUNDAY</name>
      <anchor>gg073c9f49a289b2036eb226bcdf16a2f1c0ae61753cd0be03a4cee4ff0b209fb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>DMY</name>
      <anchor>gc803072d86bbc2ce1f7d558c94f41ae1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DAY</name>
      <anchor>ggc803072d86bbc2ce1f7d558c94f41ae1340ad04532a2d66518f8eefdf1ac1b27</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MONTH</name>
      <anchor>ggc803072d86bbc2ce1f7d558c94f41ae19da8611c47d68fe95d9026cf162bb350</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>YEAR</name>
      <anchor>ggc803072d86bbc2ce1f7d558c94f41ae18eec7a614a99a9640e578862c13b5682</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Date</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ddae9bb3e6075f950f548178289d31f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Date</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>23300306fa973791ba6effc8757ac98d</anchor>
      <arglist>(Day day, Month month, Year year)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Date</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>04f4564ec663684b7062152ca56f5677</anchor>
      <arglist>(guint32 julian_day)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>5e0612d9073939b783b6fffea9b66709</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_parse</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>6bd2cb5903074d5d99d8640d96e84ebb</anchor>
      <arglist>(const Glib::ustring &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_time</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>214e405c758a42707dc1e7408aa7a2af</anchor>
      <arglist>(GTime time)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_time</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>258e962376849e680005ad476b901737</anchor>
      <arglist>(time_t timet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_time</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>b4bf594a78cd4270960c70705ec48328</anchor>
      <arglist>(const GTimeVal &amp;timeval)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_time_current</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>094ddd3269d18d76077471647406742c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_month</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>0e64dc591b387cc4847bfe62f71ced5c</anchor>
      <arglist>(Month month)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_day</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>1caed2e61aa1f492cb0e0f9dc28ff9e8</anchor>
      <arglist>(Day day)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_year</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>207373a135e2b93be1f88b949d468ba8</anchor>
      <arglist>(Year year)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_dmy</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>83e9f483203116684bd59d7a2457605c</anchor>
      <arglist>(Day day, Month month, Year year)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_julian</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>3991f6de084bb84de962b81316b6323e</anchor>
      <arglist>(guint32 julian_day)</arglist>
    </member>
    <member kind="function">
      <type>Date &amp;</type>
      <name>add_days</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>47cdaca7f0a4fb99f21ca6f2c5f6b609</anchor>
      <arglist>(int n_days)</arglist>
    </member>
    <member kind="function">
      <type>Date &amp;</type>
      <name>subtract_days</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a811f0a4a953a9bd8e6623324a61a09a</anchor>
      <arglist>(int n_days)</arglist>
    </member>
    <member kind="function">
      <type>Date &amp;</type>
      <name>add_months</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>58c7a4bccf502bb9a9b10b1079a803ae</anchor>
      <arglist>(int n_months)</arglist>
    </member>
    <member kind="function">
      <type>Date &amp;</type>
      <name>subtract_months</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>543992d17cac03b125bcd2e5dbcbbcbf</anchor>
      <arglist>(int n_months)</arglist>
    </member>
    <member kind="function">
      <type>Date &amp;</type>
      <name>add_years</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>1ea49facb5ec94dbd6b22916da2616b4</anchor>
      <arglist>(int n_years)</arglist>
    </member>
    <member kind="function">
      <type>Date &amp;</type>
      <name>subtract_years</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>c06467e6b8d11f2cb6862142503e51af</anchor>
      <arglist>(int n_years)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>days_between</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>4fdbe0b37d9d8079919aa4921c781e5f</anchor>
      <arglist>(const Date &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>5961d351f9a2d3c924121b72bba9d88c</anchor>
      <arglist>(const Date &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>Date &amp;</type>
      <name>clamp</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>eaf508be8686588e138ea33c1f193c84</anchor>
      <arglist>(const Date &amp;min_date, const Date &amp;max_date)</arglist>
    </member>
    <member kind="function">
      <type>Date &amp;</type>
      <name>clamp_min</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>0d54f26f46455523492785048c0e8f11</anchor>
      <arglist>(const Date &amp;min_date)</arglist>
    </member>
    <member kind="function">
      <type>Date &amp;</type>
      <name>clamp_max</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>88f3580d08fcd5a6f78247386a81cab9</anchor>
      <arglist>(const Date &amp;max_date)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>order</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a16d41a82334d8d83fb6dfbcedfc8214</anchor>
      <arglist>(Date &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Weekday</type>
      <name>get_weekday</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>df8015784a264eaf9979f637dc109fbd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Month</type>
      <name>get_month</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>fcf98de21518e239368595bcb6eb467c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Year</type>
      <name>get_year</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>91e31618fdf40a89a0840013f74ca1cf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Day</type>
      <name>get_day</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>bb2790c552325e23523382dcc0b08a43</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>guint32</type>
      <name>get_julian</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a2f8e64c2eab4380a0477095e9765809</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>get_day_of_year</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>be65f54c4e39c48b9834e6195e65de4a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>get_monday_week_of_year</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>5bb09d3eaeb81d5015d34321e2bdf7ed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>get_sunday_week_of_year</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>2fe45b46e0327ef8d65abd5539249d47</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_first_of_month</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>11fd435a1f2012324db453adff6a0450</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_last_of_month</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>7048990efde0b7e67e8bb73c6af8735e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>format_string</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>0b9a299ad1d7ba986b67adeeb5e35d91</anchor>
      <arglist>(const Glib::ustring &amp;format) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>to_struct_tm</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>c2f8feb4d819e6af421e6c5bb4ea2321</anchor>
      <arglist>(struct tm &amp;dest) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a716c3239e93a3e557a2e3349e12eb83</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static guint8</type>
      <name>get_days_in_month</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>c730164dfaafc48786e550a7d94831ce</anchor>
      <arglist>(Month month, Year year)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static guint8</type>
      <name>get_monday_weeks_in_year</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>2c9cb463927b05d4632dca5da920542f</anchor>
      <arglist>(Year year)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static guint8</type>
      <name>get_sunday_weeks_in_year</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>b670892479ab8b08a9523d14fbafef2d</anchor>
      <arglist>(Year year)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>is_leap_year</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>625818601b8b04e016b998ebd58294f1</anchor>
      <arglist>(Year year)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>valid_day</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>409a3205d2f1e138b88df36fe0d8b1a2</anchor>
      <arglist>(Day day)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>valid_month</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ee1b51e0602590b7bbebd404ed72bbca</anchor>
      <arglist>(Month month)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>valid_year</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>7ebb66795ecaa06a721d851451fc73ff</anchor>
      <arglist>(Year year)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>valid_weekday</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>72f37e25f74705d8b7f735b0b8aed5cd</anchor>
      <arglist>(Weekday weekday)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>valid_julian</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>7b94ac5b14f4051054897c07cbb86656</anchor>
      <arglist>(guint32 julian_day)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>valid_dmy</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>cae6854623e46d783a0e19a5952871d1</anchor>
      <arglist>(Day day, Month month, Year year)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Day</type>
      <name>BAD_DAY</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>f6341bae69196cb5099f1133b2225b53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Year</type>
      <name>BAD_YEAR</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>836394324fc168ffac64734f7930b548</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const guint32</type>
      <name>BAD_JULIAN</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>2b4f287c712949a7dbd7ca61f0098531</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>27425be265a0cc57e4f731825154ec4d</anchor>
      <arglist>(const Date &amp;lhs, const Date &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>d12683e4457513f4f834e13c4e7f72f8</anchor>
      <arglist>(const Date &amp;lhs, const Date &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>611ba98c72bec2ae82bbf086b81563ef</anchor>
      <arglist>(const Date &amp;lhs, const Date &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>4e4faf476e7d66ef88aaca8b11a60175</anchor>
      <arglist>(const Date &amp;lhs, const Date &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>cacb699d0fcffd2443c121586b7c22da</anchor>
      <arglist>(const Date &amp;lhs, const Date &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a72d3f6e17c7aab4d16e9e50b5069e1a</anchor>
      <arglist>(const Date &amp;lhs, const Date &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Dispatcher</name>
    <filename>classGlib_1_1Dispatcher.html</filename>
    <member kind="function">
      <type></type>
      <name>Dispatcher</name>
      <anchorfile>classGlib_1_1Dispatcher.html</anchorfile>
      <anchor>1883255c63f36e1d218ccf3f1abfa992</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Dispatcher</name>
      <anchorfile>classGlib_1_1Dispatcher.html</anchorfile>
      <anchor>14692fe3e39140fc164cbd03149a7ce1</anchor>
      <arglist>(const Glib::RefPtr&lt; MainContext &gt; &amp;context)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Dispatcher</name>
      <anchorfile>classGlib_1_1Dispatcher.html</anchorfile>
      <anchor>6d220afa9063f8cf1364d5a1c73eb010</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emit</name>
      <anchorfile>classGlib_1_1Dispatcher.html</anchorfile>
      <anchor>07b89c90f931db118c8c184d0615ce92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classGlib_1_1Dispatcher.html</anchorfile>
      <anchor>4610275deedf1324bf71afde1c8c71ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sigc::connection</type>
      <name>connect</name>
      <anchorfile>classGlib_1_1Dispatcher.html</anchorfile>
      <anchor>63645395ac79c03b5ec9e81d8099dea7</anchor>
      <arglist>(const sigc::slot&lt; void &gt; &amp;slot)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Error</name>
    <filename>classGlib_1_1Error.html</filename>
    <base>Glib::Exception</base>
    <member kind="function">
      <type></type>
      <name>Error</name>
      <anchorfile>classGlib_1_1Error.html</anchorfile>
      <anchor>2639aeb2b6a6c43662cf17b8c88a122d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Error</name>
      <anchorfile>classGlib_1_1Error.html</anchorfile>
      <anchor>40547bd64c5de1ada0feb948428524e5</anchor>
      <arglist>(GQuark domain, int code, const Glib::ustring &amp;message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Error</name>
      <anchorfile>classGlib_1_1Error.html</anchorfile>
      <anchor>70257ceb030e4d9dd3ac9a6482830d24</anchor>
      <arglist>(GError *gobject, bool take_copy=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Error</name>
      <anchorfile>classGlib_1_1Error.html</anchorfile>
      <anchor>715ed79ccf7d2fa3a357014fc614a4a4</anchor>
      <arglist>(const Error &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Error &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1Error.html</anchorfile>
      <anchor>6fd059d3c4d24c3f6a0f6999be41b138</anchor>
      <arglist>(const Error &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Error</name>
      <anchorfile>classGlib_1_1Error.html</anchorfile>
      <anchor>e58400627bb4445a54651ae95bb63829</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GQuark</type>
      <name>domain</name>
      <anchorfile>classGlib_1_1Error.html</anchorfile>
      <anchor>8d0366db925669aa5841f21e48f278c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>code</name>
      <anchorfile>classGlib_1_1Error.html</anchorfile>
      <anchor>073623423095dc52db289bf04a146648</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Glib::ustring</type>
      <name>what</name>
      <anchorfile>classGlib_1_1Error.html</anchorfile>
      <anchor>c5a9ff59ba32b2ddc24c5c6c0c86d605</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>matches</name>
      <anchorfile>classGlib_1_1Error.html</anchorfile>
      <anchor>ae4921c01b2852ddb48984b4a5ec760c</anchor>
      <arglist>(GQuark domain, int code) const </arglist>
    </member>
    <member kind="function">
      <type>GError *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1Error.html</anchorfile>
      <anchor>69e6636c8ed726b1468ed61c07d65816</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GError *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1Error.html</anchorfile>
      <anchor>41b5a27b917ecb6a0176387bf357d8cc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GError *</type>
      <name>gobject_</name>
      <anchorfile>classGlib_1_1Error.html</anchorfile>
      <anchor>af45a78024403f011e31a73c1361c59a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Exception</name>
    <filename>classGlib_1_1Exception.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual</type>
      <name>~Exception</name>
      <anchorfile>classGlib_1_1Exception.html</anchorfile>
      <anchor>44a9c79be10c68a6861f015217ce18fb</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Glib::ustring</type>
      <name>what</name>
      <anchorfile>classGlib_1_1Exception.html</anchorfile>
      <anchor>2423c81571a101571751fe0a046beef0</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::FileError</name>
    <filename>classGlib_1_1FileError.html</filename>
    <base>Glib::Error</base>
    <member kind="enumvalue">
      <type>@</type>
      <name>EXISTS</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>0bdb855c813c7d07a424009706fc8f0b01ff8868a0b220c86c9324c99d3cd4fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IS_DIRECTORY</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>0bdb855c813c7d07a424009706fc8f0bff115ce7e218cc5a4aae85ec8890ab94</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ACCESS_DENIED</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>0bdb855c813c7d07a424009706fc8f0ba2e3135e38ebcc80a494528091ebd8de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NAME_TOO_LONG</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>0bdb855c813c7d07a424009706fc8f0b8643f49fdab6a5ff782084c67135e1e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NO_SUCH_ENTITY</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>0bdb855c813c7d07a424009706fc8f0beda2e83b22b1f6dc1da2694f1644e564</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NOT_DIRECTORY</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>0bdb855c813c7d07a424009706fc8f0ba4f3b9115752cd9cf52a5b59f8909991</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NO_SUCH_DEVICE</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>0bdb855c813c7d07a424009706fc8f0bbb6c725bc086a2d279e757457b030571</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NOT_DEVICE</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>0bdb855c813c7d07a424009706fc8f0bdd3c96afe2ba945bb3560e16a9b93d59</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>READONLY_FILESYSTEM</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>0bdb855c813c7d07a424009706fc8f0bbeea9fce53d4885b4051984276f15a8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TEXT_FILE_BUSY</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>0bdb855c813c7d07a424009706fc8f0b7e4dc1f2fd34848b7bc3000c272e1372</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FAULTY_ADDRESS</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>0bdb855c813c7d07a424009706fc8f0bdc06f883f118f4890129663191c6c17f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SYMLINK_LOOP</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>0bdb855c813c7d07a424009706fc8f0b162e633cd38eab5d522270c9a3ebcea2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NO_SPACE_LEFT</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>0bdb855c813c7d07a424009706fc8f0bb01ef9f764fd9b893ce8642c41e767d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NOT_ENOUGH_MEMORY</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>0bdb855c813c7d07a424009706fc8f0b370079127964629a1632d9ddb9e1675e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TOO_MANY_OPEN_FILES</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>0bdb855c813c7d07a424009706fc8f0be6695b16a229d85ed7fe04998ded8e69</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FILE_TABLE_OVERFLOW</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>0bdb855c813c7d07a424009706fc8f0b270fd5509672b5315c89ba895cf0a03b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BAD_FILE_DESCRIPTOR</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>0bdb855c813c7d07a424009706fc8f0b4fc249f01958f2637485f137984a2ef5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>INVALID_ARGUMENT</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>0bdb855c813c7d07a424009706fc8f0b9c342ad59c861942248c7c4f9856ffa3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BROKEN_PIPE</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>0bdb855c813c7d07a424009706fc8f0b7973f973a753e33f7334606a7b94a484</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TRYAGAIN</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>0bdb855c813c7d07a424009706fc8f0b394d8e382562d6a1d98eeb324f7bb3ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>INTERRUPTED</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>0bdb855c813c7d07a424009706fc8f0bdddd41967fb43bd5299d7ca081e1fb2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IO_ERROR</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>0bdb855c813c7d07a424009706fc8f0b9f036a8ebefce2b3e4d6212a81391f41</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NOT_OWNER</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>0bdb855c813c7d07a424009706fc8f0ba10eb3f9c67a9d359927839c800e9d62</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NOSYS</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>0bdb855c813c7d07a424009706fc8f0b35c967e08b486a0e88197f5753d2df1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FAILED</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>0bdb855c813c7d07a424009706fc8f0b1ff00bae55bf88a6bd4f5c70b78324b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Code</name>
      <anchor>0bdb855c813c7d07a424009706fc8f0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXISTS</name>
      <anchor>0bdb855c813c7d07a424009706fc8f0b01ff8868a0b220c86c9324c99d3cd4fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IS_DIRECTORY</name>
      <anchor>0bdb855c813c7d07a424009706fc8f0bff115ce7e218cc5a4aae85ec8890ab94</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACCESS_DENIED</name>
      <anchor>0bdb855c813c7d07a424009706fc8f0ba2e3135e38ebcc80a494528091ebd8de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NAME_TOO_LONG</name>
      <anchor>0bdb855c813c7d07a424009706fc8f0b8643f49fdab6a5ff782084c67135e1e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_SUCH_ENTITY</name>
      <anchor>0bdb855c813c7d07a424009706fc8f0beda2e83b22b1f6dc1da2694f1644e564</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_DIRECTORY</name>
      <anchor>0bdb855c813c7d07a424009706fc8f0ba4f3b9115752cd9cf52a5b59f8909991</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_SUCH_DEVICE</name>
      <anchor>0bdb855c813c7d07a424009706fc8f0bbb6c725bc086a2d279e757457b030571</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_DEVICE</name>
      <anchor>0bdb855c813c7d07a424009706fc8f0bdd3c96afe2ba945bb3560e16a9b93d59</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>READONLY_FILESYSTEM</name>
      <anchor>0bdb855c813c7d07a424009706fc8f0bbeea9fce53d4885b4051984276f15a8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TEXT_FILE_BUSY</name>
      <anchor>0bdb855c813c7d07a424009706fc8f0b7e4dc1f2fd34848b7bc3000c272e1372</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FAULTY_ADDRESS</name>
      <anchor>0bdb855c813c7d07a424009706fc8f0bdc06f883f118f4890129663191c6c17f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SYMLINK_LOOP</name>
      <anchor>0bdb855c813c7d07a424009706fc8f0b162e633cd38eab5d522270c9a3ebcea2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_SPACE_LEFT</name>
      <anchor>0bdb855c813c7d07a424009706fc8f0bb01ef9f764fd9b893ce8642c41e767d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_ENOUGH_MEMORY</name>
      <anchor>0bdb855c813c7d07a424009706fc8f0b370079127964629a1632d9ddb9e1675e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TOO_MANY_OPEN_FILES</name>
      <anchor>0bdb855c813c7d07a424009706fc8f0be6695b16a229d85ed7fe04998ded8e69</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_TABLE_OVERFLOW</name>
      <anchor>0bdb855c813c7d07a424009706fc8f0b270fd5509672b5315c89ba895cf0a03b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_FILE_DESCRIPTOR</name>
      <anchor>0bdb855c813c7d07a424009706fc8f0b4fc249f01958f2637485f137984a2ef5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID_ARGUMENT</name>
      <anchor>0bdb855c813c7d07a424009706fc8f0b9c342ad59c861942248c7c4f9856ffa3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BROKEN_PIPE</name>
      <anchor>0bdb855c813c7d07a424009706fc8f0b7973f973a753e33f7334606a7b94a484</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRYAGAIN</name>
      <anchor>0bdb855c813c7d07a424009706fc8f0b394d8e382562d6a1d98eeb324f7bb3ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INTERRUPTED</name>
      <anchor>0bdb855c813c7d07a424009706fc8f0bdddd41967fb43bd5299d7ca081e1fb2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR</name>
      <anchor>0bdb855c813c7d07a424009706fc8f0b9f036a8ebefce2b3e4d6212a81391f41</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_OWNER</name>
      <anchor>0bdb855c813c7d07a424009706fc8f0ba10eb3f9c67a9d359927839c800e9d62</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOSYS</name>
      <anchor>0bdb855c813c7d07a424009706fc8f0b35c967e08b486a0e88197f5753d2df1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FAILED</name>
      <anchor>0bdb855c813c7d07a424009706fc8f0b1ff00bae55bf88a6bd4f5c70b78324b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FileError</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>0acf54ad7899f15d9dba10a42e551181</anchor>
      <arglist>(Code error_code, const Glib::ustring &amp;error_message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FileError</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>dc1bae15e4393814b23e7f0743a081cc</anchor>
      <arglist>(GError *gobject)</arglist>
    </member>
    <member kind="function">
      <type>Code</type>
      <name>code</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>86041a573547b3b349ba0acf2bac7116</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::DirIterator</name>
    <filename>classGlib_1_1DirIterator.html</filename>
    <member kind="typedef">
      <type>std::input_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>classGlib_1_1DirIterator.html</anchorfile>
      <anchor>67db7ca7ce5696fe900df4f8428b2f67</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1DirIterator.html</anchorfile>
      <anchor>596bae950cfcfbb815029929b9394bae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>difference_type</name>
      <anchorfile>classGlib_1_1DirIterator.html</anchorfile>
      <anchor>ea087419248faa8fc677d88f6cac928e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type</type>
      <name>reference</name>
      <anchorfile>classGlib_1_1DirIterator.html</anchorfile>
      <anchor>aa1742565a52c5f7facc17f90f0680fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>pointer</name>
      <anchorfile>classGlib_1_1DirIterator.html</anchorfile>
      <anchor>40edc6b0e3915f39a58f068ae3246de9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DirIterator</name>
      <anchorfile>classGlib_1_1DirIterator.html</anchorfile>
      <anchor>39fe47295f912691d1ba9e04fc4c6854</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>operator *</name>
      <anchorfile>classGlib_1_1DirIterator.html</anchorfile>
      <anchor>db25cbbcb92d50e0264997c7f78736a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DirIterator &amp;</type>
      <name>operator++</name>
      <anchorfile>classGlib_1_1DirIterator.html</anchorfile>
      <anchor>094d89e945942a29635cbb5e065a8f41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator++</name>
      <anchorfile>classGlib_1_1DirIterator.html</anchorfile>
      <anchor>369cb93241e49b7aa1229848e88c3f15</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classGlib_1_1DirIterator.html</anchorfile>
      <anchor>fcb6c09b21dc948643431c9118b9b714</anchor>
      <arglist>(const DirIterator &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classGlib_1_1DirIterator.html</anchorfile>
      <anchor>29757be47b42f28e2c9a95b35a8cca3e</anchor>
      <arglist>(const DirIterator &amp;rhs) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Dir</name>
    <filename>classGlib_1_1Dir.html</filename>
    <member kind="typedef">
      <type>DirIterator</type>
      <name>iterator</name>
      <anchorfile>classGlib_1_1Dir.html</anchorfile>
      <anchor>47896460e9d37efc9e93af33e0d1ccf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DirIterator</type>
      <name>const_iterator</name>
      <anchorfile>classGlib_1_1Dir.html</anchorfile>
      <anchor>87555a3d202abc6535c0479378289c65</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Dir</name>
      <anchorfile>classGlib_1_1Dir.html</anchorfile>
      <anchor>bbcedb96cc9cf9cdfa37ab7164631fe9</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Dir</name>
      <anchorfile>classGlib_1_1Dir.html</anchorfile>
      <anchor>8de43168d60f9ffc12842b6d277834de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>read_name</name>
      <anchorfile>classGlib_1_1Dir.html</anchorfile>
      <anchor>0b7540337a31b10b5dd5775a46ff2f43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rewind</name>
      <anchorfile>classGlib_1_1Dir.html</anchorfile>
      <anchor>13bc8d04aef36e4c77eb05710096ab26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close</name>
      <anchorfile>classGlib_1_1Dir.html</anchorfile>
      <anchor>9d648d71ee0ac37f57b478f8d43a3bf9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DirIterator</type>
      <name>begin</name>
      <anchorfile>classGlib_1_1Dir.html</anchorfile>
      <anchor>e5b5900d5f7838b2437f36609c30d7ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DirIterator</type>
      <name>end</name>
      <anchorfile>classGlib_1_1Dir.html</anchorfile>
      <anchor>ded8f8cb05e1aed5fb445569c44fff68</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::HelperList</name>
    <filename>classGlib_1_1HelperList.html</filename>
    <templarg>T_Child</templarg>
    <templarg>T_CppElement</templarg>
    <templarg>T_Iterator</templarg>
    <member kind="typedef">
      <type>T_Child</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>3b4451feb1e5c827809b0683fab225c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>435dafddf9beda6c5ff688ae22f80031</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type &amp;</type>
      <name>const_reference</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>2b2af43788aef5aafd2bbb7bc8d9f13f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T_Iterator</type>
      <name>iterator</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>1dcce9f64cf02136eb201d1f04a844a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>List_ConstIterator&lt; iterator &gt;</type>
      <name>const_iterator</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>aea545a89905ab1ebe26e053c53356f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>List_ReverseIterator&lt; iterator &gt;</type>
      <name>reverse_iterator</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>3c6722e1398ae20a1adee87cc2c82fb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>List_ConstIterator&lt; reverse_iterator &gt;</type>
      <name>const_reverse_iterator</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>98d0b312ab29c9f5d2cb5f3dbcf76ac1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T_CppElement</type>
      <name>element_type</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>80a39df0948d7f233e620319715fbfef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>size_t</type>
      <name>difference_type</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>6b32b79a4705baa8c259b5fdb85c0e64</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>size_t</type>
      <name>size_type</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>20c684001ef0b6c49732f4baa87f0ca8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HelperList</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>c8e607070eb44e5a6e2d431260d1fff4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HelperList</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>af48d9c811c510be253b2b5f86e6f9ed</anchor>
      <arglist>(GObject *gparent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HelperList</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>ab4e8cc0faf4cf94666eb8799fb161c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual iterator</type>
      <name>erase</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>4bee97685b3fc46d076721f82092f12b</anchor>
      <arglist>(iterator)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>erase</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>411996bdc0ef3623a1d0e1e0d307de4f</anchor>
      <arglist>(iterator start, iterator stop)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>remove</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>19373c8c69f4480a98208ed41a5ce176</anchor>
      <arglist>(const_reference)=0</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>6e57dbedd07db274cca4fc96c4dc1a99</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>max_size</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>1804cd42b3665f7cc6d82a41080361ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>719bfa3471825fd4d5b7061504ed9e1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>b9e537275fd961f09b7fa0c6670c973c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>8569a041346fb38b60eb2aec0662bb30</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>19f577c7429327eb077c723b893b1abf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>86bb7c980a0ef4277471ba29e2a59e12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>1c6d98170261d1b9c89d34ce359827f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rend</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>9724ef5c75c231a1b31b6220239e007f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>67f0e94fa89408e7957189b08d049a4f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rend</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>6cb331f7ecc76bdcf8a8f1af5a7e7b83</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>front</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>103bc1541be3a1fe5c9d23aa9d23d98a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>back</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>aae13a6d35339259d14750014ebe480a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>operator[]</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>92b37fcdf4dfee983e8ea2af4b710bf4</anchor>
      <arglist>(size_type l) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop_front</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>28f275f049a351f9cc2bd4162de3ec6f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop_back</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>772423e892bd3ed57a11a544a0608b9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>9f7bc99c64db14a448d70db0c008eb71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GObject *</type>
      <name>gparent</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>3dc8d631ba89f7173882a50dd4dc03d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GObject *</type>
      <name>gparent</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>c3c3de8a7a9ca70ae15ae2503912a21f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual GList *&amp;</type>
      <name>glist</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>7ecdcc677de72ffe14d6c43ccc02ede8</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>iterator</type>
      <name>begin_</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>9ac2bf92224630aab4fcc374b9febe2d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>iterator</type>
      <name>end_</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>545ca00edc737af427e693c63dab4d85</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GObject *</type>
      <name>gparent_</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>48e04ecc5c170b9e84af28b8df046f2f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Interface</name>
    <filename>classGlib_1_1Interface.html</filename>
    <base virtualness="virtual">Glib::ObjectBase</base>
    <member kind="function">
      <type></type>
      <name>Interface</name>
      <anchorfile>classGlib_1_1Interface.html</anchorfile>
      <anchor>e05bf6a4ce0f0992c2ad01429d13f9f7</anchor>
      <arglist>(const Glib::Interface_Class &amp;interface_class)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Interface</name>
      <anchorfile>classGlib_1_1Interface.html</anchorfile>
      <anchor>00253b22a76f751f1627865451cbc404</anchor>
      <arglist>(GObject *castitem)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Interface</name>
      <anchorfile>classGlib_1_1Interface.html</anchorfile>
      <anchor>8e12a7a3e0281e28798326ad65e3560c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GObject *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1Interface.html</anchorfile>
      <anchor>969e9396f75132a9577428f4fa932d42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GObject *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1Interface.html</anchorfile>
      <anchor>70a443071a69d3372c2cdd7128a91ed1</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::IOChannelError</name>
    <filename>classGlib_1_1IOChannelError.html</filename>
    <base>Glib::Error</base>
    <member kind="enumvalue">
      <type>@</type>
      <name>FILE_TOO_BIG</name>
      <anchorfile>classGlib_1_1IOChannelError.html</anchorfile>
      <anchor>8b02e9d69e0b5bb5455009c5929dbb039c5ed72205f48bdfdd06a7d9ced2da29</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>INVALID_ARGUMENT</name>
      <anchorfile>classGlib_1_1IOChannelError.html</anchorfile>
      <anchor>8b02e9d69e0b5bb5455009c5929dbb031875c359005272d43ad2b611d73beec4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IO_ERROR</name>
      <anchorfile>classGlib_1_1IOChannelError.html</anchorfile>
      <anchor>8b02e9d69e0b5bb5455009c5929dbb038ec5114383862e8cac043ec2075ad116</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IS_DIRECTORY</name>
      <anchorfile>classGlib_1_1IOChannelError.html</anchorfile>
      <anchor>8b02e9d69e0b5bb5455009c5929dbb03a0144b7fc1c2ddf9643b9e9f3f8ddf86</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NO_SPACE_LEFT</name>
      <anchorfile>classGlib_1_1IOChannelError.html</anchorfile>
      <anchor>8b02e9d69e0b5bb5455009c5929dbb035dc764550200132f93026027c7c2f09a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NO_SUCH_DEVICE</name>
      <anchorfile>classGlib_1_1IOChannelError.html</anchorfile>
      <anchor>8b02e9d69e0b5bb5455009c5929dbb034820ff376a2779d8d1d3ccea6137fcd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>OVERFLOWN</name>
      <anchorfile>classGlib_1_1IOChannelError.html</anchorfile>
      <anchor>8b02e9d69e0b5bb5455009c5929dbb0364d5418a7200604cbf563cac1cf46de2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BROKEN_PIPE</name>
      <anchorfile>classGlib_1_1IOChannelError.html</anchorfile>
      <anchor>8b02e9d69e0b5bb5455009c5929dbb033112ffb043ecf58835762eb3d8204edb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FAILED</name>
      <anchorfile>classGlib_1_1IOChannelError.html</anchorfile>
      <anchor>8b02e9d69e0b5bb5455009c5929dbb035c504b82d394ef2594f13128fff403a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Code</name>
      <anchor>8b02e9d69e0b5bb5455009c5929dbb03</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_TOO_BIG</name>
      <anchor>8b02e9d69e0b5bb5455009c5929dbb039c5ed72205f48bdfdd06a7d9ced2da29</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID_ARGUMENT</name>
      <anchor>8b02e9d69e0b5bb5455009c5929dbb031875c359005272d43ad2b611d73beec4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR</name>
      <anchor>8b02e9d69e0b5bb5455009c5929dbb038ec5114383862e8cac043ec2075ad116</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IS_DIRECTORY</name>
      <anchor>8b02e9d69e0b5bb5455009c5929dbb03a0144b7fc1c2ddf9643b9e9f3f8ddf86</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_SPACE_LEFT</name>
      <anchor>8b02e9d69e0b5bb5455009c5929dbb035dc764550200132f93026027c7c2f09a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_SUCH_DEVICE</name>
      <anchor>8b02e9d69e0b5bb5455009c5929dbb034820ff376a2779d8d1d3ccea6137fcd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OVERFLOWN</name>
      <anchor>8b02e9d69e0b5bb5455009c5929dbb0364d5418a7200604cbf563cac1cf46de2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BROKEN_PIPE</name>
      <anchor>8b02e9d69e0b5bb5455009c5929dbb033112ffb043ecf58835762eb3d8204edb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FAILED</name>
      <anchor>8b02e9d69e0b5bb5455009c5929dbb035c504b82d394ef2594f13128fff403a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IOChannelError</name>
      <anchorfile>classGlib_1_1IOChannelError.html</anchorfile>
      <anchor>e1314f05ecea3220020d19b2823f545f</anchor>
      <arglist>(Code error_code, const Glib::ustring &amp;error_message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IOChannelError</name>
      <anchorfile>classGlib_1_1IOChannelError.html</anchorfile>
      <anchor>b78f3d7ead385cf0ab1738686028c10d</anchor>
      <arglist>(GError *gobject)</arglist>
    </member>
    <member kind="function">
      <type>Code</type>
      <name>code</name>
      <anchorfile>classGlib_1_1IOChannelError.html</anchorfile>
      <anchor>e3f6615b23b1cb01e2cfdf7deceecd7b</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::IOChannel</name>
    <filename>classGlib_1_1IOChannel.html</filename>
    <base>sigc::trackable</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IOChannel</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>0a6c1cddcf00c77c6ab99b096c86544f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IOStatus</type>
      <name>read</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>692de98f5d0a21a6bffda94d1e76a957</anchor>
      <arglist>(gunichar &amp;unichar)</arglist>
    </member>
    <member kind="function">
      <type>IOStatus</type>
      <name>read</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>1afb78d2e29a2f01a7034279a0c12636</anchor>
      <arglist>(char *buf, gsize count, gsize &amp;bytes_read)</arglist>
    </member>
    <member kind="function">
      <type>IOStatus</type>
      <name>read</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>4553088deea02ebea2ab7a9e2cff0a1c</anchor>
      <arglist>(Glib::ustring &amp;str, gsize count)</arglist>
    </member>
    <member kind="function">
      <type>IOStatus</type>
      <name>read_line</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>2950510fff168d5753ee1eb14714d67a</anchor>
      <arglist>(Glib::ustring &amp;line)</arglist>
    </member>
    <member kind="function">
      <type>IOStatus</type>
      <name>read_to_end</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>0d64e84ab360b3c83399c94076487df1</anchor>
      <arglist>(Glib::ustring &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>IOStatus</type>
      <name>write</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>cacb5599be21f549911c6aca5f820fcf</anchor>
      <arglist>(const Glib::ustring &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>IOStatus</type>
      <name>write</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>29114ed2bcb64b8af551271394968528</anchor>
      <arglist>(const char *buf, gssize count, gsize &amp;bytes_written)</arglist>
    </member>
    <member kind="function">
      <type>IOStatus</type>
      <name>write</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>5e0a187ff012b3b90c6d3d8593c18e92</anchor>
      <arglist>(gunichar unichar)</arglist>
    </member>
    <member kind="function">
      <type>IOStatus</type>
      <name>seek</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>65a5048c32ecde11827b5ae1973ee0b1</anchor>
      <arglist>(gint64 offset, SeekType type=SEEK_TYPE_SET)</arglist>
    </member>
    <member kind="function">
      <type>IOStatus</type>
      <name>flush</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>ba6702093bd1c58ea22231446ed2f6e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IOStatus</type>
      <name>close</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>6affd4b4cbeeefe4965544f762922c35</anchor>
      <arglist>(bool flush=true)</arglist>
    </member>
    <member kind="function">
      <type>gsize</type>
      <name>get_buffer_size</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>2f5c5979ad729df9524fcb1940e5d2fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_buffer_size</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>535767c92f2678e5e72051f6f4bc5326</anchor>
      <arglist>(gsize size)</arglist>
    </member>
    <member kind="function">
      <type>IOFlags</type>
      <name>get_flags</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>c15e424b863d398ed458315b7f799243</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IOStatus</type>
      <name>set_flags</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>b6c16c87c174d836247f47c2b87539fd</anchor>
      <arglist>(IOFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_buffered</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>baf37b0d76cd41628fd0c41a674495de</anchor>
      <arglist>(bool buffered)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_buffered</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>3013c245f30ca81e11c01f8a031b1745</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IOCondition</type>
      <name>get_buffer_condition</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>9ba943e998468e3b86d841c5aec8a551</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_close_on_unref</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>c93b128c8ee396702b2a20c5a060949d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_close_on_unref</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>3f4fbc2a4c3670863fbf504d7fc96253</anchor>
      <arglist>(bool do_close)</arglist>
    </member>
    <member kind="function">
      <type>IOStatus</type>
      <name>set_encoding</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>b1d3ae667bd425ef830929a67cf526e0</anchor>
      <arglist>(const std::string &amp;encoding=std::string())</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_encoding</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>e52a79ec5f3acc2b0990870668c4ea2a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_line_term</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>d42d03bdd0288cf5517737a73f7268b3</anchor>
      <arglist>(const std::string &amp;term=std::string())</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_line_term</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>fd08e7a2a6cbfbdad2ef599c9eadcc01</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; IOSource &gt;</type>
      <name>create_watch</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>755c88fe8c78dc0727b5686fc62b736c</anchor>
      <arglist>(IOCondition condition)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reference</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>a63e3a39347848387cd9422d0073a7be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unreference</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>4c57bf6b00844fc3ddb9d0e60cac7dcf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GIOChannel *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>b05ed8535a51b04749e11386c845a581</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GIOChannel *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>ad550f12d9d2ec2fef0a2c7ba78f2595</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; IOChannel &gt;</type>
      <name>create_from_file</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>c175ea1fd6ef84ac3758ca57b42b7f33</anchor>
      <arglist>(const std::string &amp;filename, const std::string &amp;mode)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; IOChannel &gt;</type>
      <name>create_from_fd</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>078698e18f61bb75fe3fd33d82970f5d</anchor>
      <arglist>(int fd)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; IOChannel &gt;</type>
      <name>create_from_win32_fd</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>1a22bd01752d233c23babdef800c0d87</anchor>
      <arglist>(int fd)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; IOChannel &gt;</type>
      <name>create_from_win32_socket</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>087946554b86d42f1cd72277fd1b0530</anchor>
      <arglist>(int socket)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>IOChannel</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>ded3d9a998914bcac0b3f1aef1eeb974</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IOStatus</type>
      <name>read_vfunc</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>bfb4faa07e80b86f21b0f18f0b8606cd</anchor>
      <arglist>(char *buf, gsize count, gsize &amp;bytes_read)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IOStatus</type>
      <name>write_vfunc</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>4ed5372da9d4ad3465012fc2317507b5</anchor>
      <arglist>(const char *buf, gsize count, gsize &amp;bytes_written)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IOStatus</type>
      <name>seek_vfunc</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>781de88aec2c032d05f74402779665f3</anchor>
      <arglist>(gint64 offset, SeekType type)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IOStatus</type>
      <name>close_vfunc</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>735b70808acbb542b04bf55b0133927e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IOStatus</type>
      <name>set_flags_vfunc</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>f8f690f1e0a8945b75ad7be4949e44cf</anchor>
      <arglist>(IOFlags flags)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IOFlags</type>
      <name>get_flags_vfunc</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>e3326db3877358b563de11fb3dd8367f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Glib::RefPtr&lt; Glib::Source &gt;</type>
      <name>create_watch_vfunc</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>128f2bfd977617a6a1a7e4a7fbe6aa5b</anchor>
      <arglist>(IOCondition cond)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GIOChannel *</type>
      <name>gobject_</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>6683e47c0d78492b83d7021288d9b6d0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::KeyFileError</name>
    <filename>classGlib_1_1KeyFileError.html</filename>
    <base>Glib::Error</base>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNKNOWN_ENCODING</name>
      <anchorfile>classGlib_1_1KeyFileError.html</anchorfile>
      <anchor>a3cd76f47263fa75421227221563be5224279ab7c4d83ec8774f46f1f159a255</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PARSE</name>
      <anchorfile>classGlib_1_1KeyFileError.html</anchorfile>
      <anchor>a3cd76f47263fa75421227221563be5283fae4b5fa2f269a6d4afead8b8faf64</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NOT_FOUND</name>
      <anchorfile>classGlib_1_1KeyFileError.html</anchorfile>
      <anchor>a3cd76f47263fa75421227221563be522d2b02b32304241674b66742f55e2d0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_NOT_FOUND</name>
      <anchorfile>classGlib_1_1KeyFileError.html</anchorfile>
      <anchor>a3cd76f47263fa75421227221563be52f5fc91a3801ecf05e20ab72578c78471</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>GROUP_NOT_FOUND</name>
      <anchorfile>classGlib_1_1KeyFileError.html</anchorfile>
      <anchor>a3cd76f47263fa75421227221563be52c5be98a4ce73c73130edbd4631d9ee39</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>INVALID_VALUE</name>
      <anchorfile>classGlib_1_1KeyFileError.html</anchorfile>
      <anchor>a3cd76f47263fa75421227221563be527290dc045af91eab91d340e7f6fc6d76</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Code</name>
      <anchor>a3cd76f47263fa75421227221563be52</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNKNOWN_ENCODING</name>
      <anchor>a3cd76f47263fa75421227221563be5224279ab7c4d83ec8774f46f1f159a255</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PARSE</name>
      <anchor>a3cd76f47263fa75421227221563be5283fae4b5fa2f269a6d4afead8b8faf64</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_FOUND</name>
      <anchor>a3cd76f47263fa75421227221563be522d2b02b32304241674b66742f55e2d0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KEY_NOT_FOUND</name>
      <anchor>a3cd76f47263fa75421227221563be52f5fc91a3801ecf05e20ab72578c78471</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GROUP_NOT_FOUND</name>
      <anchor>a3cd76f47263fa75421227221563be52c5be98a4ce73c73130edbd4631d9ee39</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID_VALUE</name>
      <anchor>a3cd76f47263fa75421227221563be527290dc045af91eab91d340e7f6fc6d76</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KeyFileError</name>
      <anchorfile>classGlib_1_1KeyFileError.html</anchorfile>
      <anchor>ecd9898aacf14a6d8b1f7965e04f227a</anchor>
      <arglist>(Code error_code, const Glib::ustring &amp;error_message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KeyFileError</name>
      <anchorfile>classGlib_1_1KeyFileError.html</anchorfile>
      <anchor>064f4a933c5c53a16ddb919609f5ddaa</anchor>
      <arglist>(GError *gobject)</arglist>
    </member>
    <member kind="function">
      <type>Code</type>
      <name>code</name>
      <anchorfile>classGlib_1_1KeyFileError.html</anchorfile>
      <anchor>f8f7b3b7c506398a3ee34956ded1f762</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::KeyFile</name>
    <filename>classGlib_1_1KeyFile.html</filename>
    <member kind="function">
      <type></type>
      <name>KeyFile</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>574f57c39fa7627d0d38ee6660173cb6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~KeyFile</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>76fdf6f57ba9719b92eadd883c27a3d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KeyFile</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>d9c90566b014ba59f545e9a663e6d34d</anchor>
      <arglist>(GKeyFile *castitem, bool takes_ownership=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>load_from_file</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>8e5a625d648c0e84b0bf4a8cbf6d68cc</anchor>
      <arglist>(const std::string &amp;filename, KeyFileFlags flags=Glib::KEY_FILE_NONE)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>load_from_data</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>22113e3fdfa834fc688e6429b2e6332f</anchor>
      <arglist>(const Glib::ustring &amp;data, KeyFileFlags flags=Glib::KEY_FILE_NONE)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>load_from_data_dirs</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>53221a7f8720157e1ef6e635260570b8</anchor>
      <arglist>(const std::string &amp;file, std::string &amp;full_path, KeyFileFlags flags=Glib::KEY_FILE_NONE)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>to_data</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>cb65a298d161691468cdb7add19b00e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_start_group</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>b619afc4e670b960a09e0199151f8a8c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::ArrayHandle&lt; Glib::ustring &gt;</type>
      <name>get_groups</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>675e788637f83c2d29d268c8039b0aef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::ArrayHandle&lt; Glib::ustring &gt;</type>
      <name>get_keys</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>108c2605d26beebd38330b745f55c5e1</anchor>
      <arglist>(const Glib::ustring &amp;group_name) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_group</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>903e3a2a27d1a7a12e0b27d87a7b3da3</anchor>
      <arglist>(const Glib::ustring &amp;group_name) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_key</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>00f44290cb03cc75ffafa1fdb006cc22</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key) const </arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_value</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>e407e4614dbbdaf097098fbab19506fa</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key) const </arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_string</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>966f044df7b35d1e7c77c96f1fe768dc</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key) const </arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_locale_string</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>08218a8dbe2a8fb4200f7a0c93ede912</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key) const </arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_locale_string</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>25eea13fdfc5c5ab235e2e72466cd53d</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key, const Glib::ustring &amp;locale) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_boolean</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>0d383ad579647505ff3376e93591aaa7</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_integer</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>8829a3cac6a4addd232012b798fa63ea</anchor>
      <arglist>(const Glib::ustring &amp;key) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_integer</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>d94dadf67bda687779774a34ac8c27e3</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key) const </arglist>
    </member>
    <member kind="function">
      <type>Glib::ArrayHandle&lt; Glib::ustring &gt;</type>
      <name>get_string_list</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>440aa963a6b393618b0c1947f274e955</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key) const </arglist>
    </member>
    <member kind="function">
      <type>Glib::ArrayHandle&lt; Glib::ustring &gt;</type>
      <name>get_locale_string_list</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a811f080e3e9b82baac56ad188b058e1</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key) const </arglist>
    </member>
    <member kind="function">
      <type>Glib::ArrayHandle&lt; Glib::ustring &gt;</type>
      <name>get_locale_string_list</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>15475936afc7bd85a30624bc76a1122d</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key, const Glib::ustring &amp;locale) const </arglist>
    </member>
    <member kind="function">
      <type>Glib::ArrayHandle&lt; bool &gt;</type>
      <name>get_boolean_list</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>81a06db8c2ccb33c756f97ccb2f68561</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key) const </arglist>
    </member>
    <member kind="function">
      <type>Glib::ArrayHandle&lt; int &gt;</type>
      <name>get_integer_list</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>f74312f2d086d1ec334773975dfe7b69</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key) const </arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_comment</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>23e315d219a3baecfc9c0a319ced6fb2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_comment</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a8e4501b6fb4e4adb701c2ca980f663e</anchor>
      <arglist>(const Glib::ustring &amp;group_name) const </arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_comment</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>ab23bdbdac01a77d9b225d166fb2261c</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_list_separator</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>ed087a7066145f1859710b89dbef1ccb</anchor>
      <arglist>(gchar separator)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_value</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>38bf60f9bdd209d28ae818e7dee6ea17</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key, const Glib::ustring &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_string</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>16cd249a1929d637432883848947f253</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key, const Glib::ustring &amp;string)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_locale_string</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>231e36c66336a198d4c55df81b93b711</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key, const Glib::ustring &amp;locale, const Glib::ustring &amp;string)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_boolean</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>ab1b3899063e934ac72ba1be1a77c4a0</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key, bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_integer</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>8f61f47a667f07108023930bcefc1400</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key, int value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_string_list</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>ce8cc2079068c4620c6498d7d831feff</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key, const Glib::ArrayHandle&lt; Glib::ustring &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_locale_string_list</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>7b6c776cf8b5f5cbe5a9fa6bf343b8e4</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key, const Glib::ustring &amp;locale, const Glib::ArrayHandle&lt; Glib::ustring &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_boolean_list</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>5377f0bca352d3caf2d45bb04738105b</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key, Glib::ArrayHandle&lt; bool &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_integer_list</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>0b9d8defb0849045bf965762311a0645</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key, Glib::ArrayHandle&lt; int &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_comment</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>c06f9d12cbc755feba6a3a11f34bac01</anchor>
      <arglist>(const Glib::ustring &amp;comment)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_comment</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>0f1562adaf4ab68a34de7594391c1032</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;comment)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_comment</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>03c7baab6e892e6a9917761f5200378a</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key, const Glib::ustring &amp;comment)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_comment</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>0cdfad92274b403f45b75954eb167d64</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_key</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>0cc1601e227a57603997ddda9d6bc6e1</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_group</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>f6fceaccb2cd166d6039dae0552900dd</anchor>
      <arglist>(const Glib::ustring &amp;group_name)</arglist>
    </member>
    <member kind="function">
      <type>GKeyFile *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>456abd71e420eb7e211ba909f275e5e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GKeyFile *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>6eeac0981d8c90be7fbb21c8ae0c7804</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GKeyFile *</type>
      <name>gobject_</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>468dd6c8997d3b2e0e59b65174e603b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>owns_gobject_</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>5479765ba8e50cbd94beef60f65212b6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::ListHandle</name>
    <filename>classGlib_1_1ListHandle.html</filename>
    <templarg>T</templarg>
    <templarg>Tr</templarg>
    <member kind="typedef">
      <type>Tr::CppType</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1ListHandle.html</anchorfile>
      <anchor>b199f3051fababc22e222dd062a98455</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Tr::CType</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1ListHandle.html</anchorfile>
      <anchor>4bd7e0897feb485c068580ddb3d2ffa8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CppType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1ListHandle.html</anchorfile>
      <anchor>ca0af53b553d99c0bd0d89cff6bcec4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>size_t</type>
      <name>size_type</name>
      <anchorfile>classGlib_1_1ListHandle.html</anchorfile>
      <anchor>7a5d006b9304712af0aef4de46cd6a83</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classGlib_1_1ListHandle.html</anchorfile>
      <anchor>1523aa68df936d6833f899b40b16c4bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Glib::Container_Helpers::ListHandleIterator&lt; Tr &gt;</type>
      <name>const_iterator</name>
      <anchorfile>classGlib_1_1ListHandle.html</anchorfile>
      <anchor>e17fbd0767ba97ba409be1b8eed016e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Glib::Container_Helpers::ListHandleIterator&lt; Tr &gt;</type>
      <name>iterator</name>
      <anchorfile>classGlib_1_1ListHandle.html</anchorfile>
      <anchor>f52a28438ef1ba99c203aa51947b238c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ListHandle</name>
      <anchorfile>classGlib_1_1ListHandle.html</anchorfile>
      <anchor>b59f9228aad5bc2c463e802d2cfdffe3</anchor>
      <arglist>(const Cont &amp;container)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ListHandle</name>
      <anchorfile>classGlib_1_1ListHandle.html</anchorfile>
      <anchor>36115ce113139df07308f2800f3eb2de</anchor>
      <arglist>(GList *glist, Glib::OwnershipType ownership)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ListHandle</name>
      <anchorfile>classGlib_1_1ListHandle.html</anchorfile>
      <anchor>a07b040bd5462d9f4693a2b32baa212a</anchor>
      <arglist>(const ListHandle&lt; T, Tr &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ListHandle</name>
      <anchorfile>classGlib_1_1ListHandle.html</anchorfile>
      <anchor>1822fff1efe8aba9c0684598ddc291e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classGlib_1_1ListHandle.html</anchorfile>
      <anchor>5ce04b9462c6d93d41584319d8a55512</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classGlib_1_1ListHandle.html</anchorfile>
      <anchor>79a10a94cf804320e34efa10bc19d89d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::vector</name>
      <anchorfile>classGlib_1_1ListHandle.html</anchorfile>
      <anchor>c582a50aa226634c563d4ff69ea51e1f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::deque</name>
      <anchorfile>classGlib_1_1ListHandle.html</anchorfile>
      <anchor>ee8db490851bf10adaad194bffd66065</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::list</name>
      <anchorfile>classGlib_1_1ListHandle.html</anchorfile>
      <anchor>f6658f886a2ae8b0ab380b2cad67c3fa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign_to</name>
      <anchorfile>classGlib_1_1ListHandle.html</anchorfile>
      <anchor>86b4475ccf05a5bbbe7820ac6ee3c097</anchor>
      <arglist>(Cont &amp;container) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classGlib_1_1ListHandle.html</anchorfile>
      <anchor>80757fc385e3d91cf61920ac4a168b70</anchor>
      <arglist>(Out pdest) const </arglist>
    </member>
    <member kind="function">
      <type>GList *</type>
      <name>data</name>
      <anchorfile>classGlib_1_1ListHandle.html</anchorfile>
      <anchor>63127f932d732a8c5db19b486ca977ba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>classGlib_1_1ListHandle.html</anchorfile>
      <anchor>c6f7d604ef6ba46603a0fefcf08d4f3d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classGlib_1_1ListHandle.html</anchorfile>
      <anchor>6506f89c461c3e5472e85e440b5cf3fe</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::PollFD</name>
    <filename>classGlib_1_1PollFD.html</filename>
    <member kind="function">
      <type></type>
      <name>PollFD</name>
      <anchorfile>classGlib_1_1PollFD.html</anchorfile>
      <anchor>7ae711b0cc1ce1b0cd467381955dc62e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PollFD</name>
      <anchorfile>classGlib_1_1PollFD.html</anchorfile>
      <anchor>902e5f082ecb994abff2ddbedd8a4992</anchor>
      <arglist>(int fd)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PollFD</name>
      <anchorfile>classGlib_1_1PollFD.html</anchorfile>
      <anchor>409d8d7cbbcc89331cd46944791b6657</anchor>
      <arglist>(int fd, IOCondition events)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_fd</name>
      <anchorfile>classGlib_1_1PollFD.html</anchorfile>
      <anchor>f22b12cf9e39e5a6467b8d9b338eb6f9</anchor>
      <arglist>(int fd)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_fd</name>
      <anchorfile>classGlib_1_1PollFD.html</anchorfile>
      <anchor>ed3cce9d7f50df212b5680f671518ea6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_events</name>
      <anchorfile>classGlib_1_1PollFD.html</anchorfile>
      <anchor>0ff97568715e76d4cc57f8099f0c2b38</anchor>
      <arglist>(IOCondition events)</arglist>
    </member>
    <member kind="function">
      <type>IOCondition</type>
      <name>get_events</name>
      <anchorfile>classGlib_1_1PollFD.html</anchorfile>
      <anchor>3796334fca0f347be79f8cc209ffc412</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_revents</name>
      <anchorfile>classGlib_1_1PollFD.html</anchorfile>
      <anchor>6cdd3635d279b0ec322dca7604e692c9</anchor>
      <arglist>(IOCondition revents)</arglist>
    </member>
    <member kind="function">
      <type>IOCondition</type>
      <name>get_revents</name>
      <anchorfile>classGlib_1_1PollFD.html</anchorfile>
      <anchor>d89b1655f967e43b1ad953cd0fc1122e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GPollFD *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1PollFD.html</anchorfile>
      <anchor>2ecf367bcde791507e699bac3a38bb1d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GPollFD *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1PollFD.html</anchorfile>
      <anchor>b0913925b29613809c0d6a5fcd43625d</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::SignalTimeout</name>
    <filename>classGlib_1_1SignalTimeout.html</filename>
    <member kind="function">
      <type>sigc::connection</type>
      <name>connect</name>
      <anchorfile>classGlib_1_1SignalTimeout.html</anchorfile>
      <anchor>75b555ed13d91e6903e927f9e0d7afd2</anchor>
      <arglist>(const sigc::slot&lt; bool &gt; &amp;slot, unsigned int interval, int priority=PRIORITY_DEFAULT)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::SignalIdle</name>
    <filename>classGlib_1_1SignalIdle.html</filename>
    <member kind="function">
      <type>sigc::connection</type>
      <name>connect</name>
      <anchorfile>classGlib_1_1SignalIdle.html</anchorfile>
      <anchor>c8befbaf1d10a17d1f3f75143e967a3f</anchor>
      <arglist>(const sigc::slot&lt; bool &gt; &amp;slot, int priority=PRIORITY_DEFAULT_IDLE)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::SignalIO</name>
    <filename>classGlib_1_1SignalIO.html</filename>
    <member kind="function">
      <type>sigc::connection</type>
      <name>connect</name>
      <anchorfile>classGlib_1_1SignalIO.html</anchorfile>
      <anchor>c205b21234d26094e75e0931c968c5d2</anchor>
      <arglist>(const sigc::slot&lt; bool, IOCondition &gt; &amp;slot, int fd, IOCondition condition, int priority=PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>sigc::connection</type>
      <name>connect</name>
      <anchorfile>classGlib_1_1SignalIO.html</anchorfile>
      <anchor>779227bae6390b055243d1f3083a5388</anchor>
      <arglist>(const sigc::slot&lt; bool, IOCondition &gt; &amp;slot, const Glib::RefPtr&lt; IOChannel &gt; &amp;channel, IOCondition condition, int priority=PRIORITY_DEFAULT)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::SignalChildWatch</name>
    <filename>classGlib_1_1SignalChildWatch.html</filename>
    <member kind="function">
      <type>sigc::connection</type>
      <name>connect</name>
      <anchorfile>classGlib_1_1SignalChildWatch.html</anchorfile>
      <anchor>4c2f5be316b9600133129cc974b6b5bb</anchor>
      <arglist>(const sigc::slot&lt; void, GPid, int &gt; &amp;slot, GPid pid, int priority=PRIORITY_DEFAULT)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::MainContext</name>
    <filename>classGlib_1_1MainContext.html</filename>
    <member kind="typedef">
      <type>Glib::MainContext</type>
      <name>CppObjectType</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>1cbedd2b4d723f53cd98df1bb757f904</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GMainContext</type>
      <name>BaseObjectType</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>da2ea4035a4809198aecbc748b750495</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>iteration</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>fde2e29315da1239af998f1826ad5e88</anchor>
      <arglist>(bool may_block)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>pending</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>cf4631ab57318f39f3e15d98ac1aaa5c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wakeup</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>5a5e60018f7549f064e71b34b1668020</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>acquire</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>a92ee9cfb192aa5eb6c2aa0841068bbc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>wait</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>68c3d19af76d4b32aeae9d2e4f5c230f</anchor>
      <arglist>(Glib::Cond &amp;cond, Glib::Mutex &amp;mutex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>release</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>ce2d9cdfa27cbe30026932de0526f730</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>prepare</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>f6d1fccb3c1f5aab758d5eb1b3c15d6a</anchor>
      <arglist>(int &amp;priority)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>prepare</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>bd1bdf8fcb0130152237e87942c89ee1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>query</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>49e8976cec1ae4f5b5c30feea6094927</anchor>
      <arglist>(int max_priority, int &amp;timeout, std::vector&lt; PollFD &gt; &amp;fds)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>check</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>8061ef816d51cc27372f016c683cc513</anchor>
      <arglist>(int max_priority, std::vector&lt; PollFD &gt; &amp;fds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dispatch</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>5c1f06dbac3bbf771c25ce76af0d4880</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_poll_func</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>d8383c8f1a1a03b904f9be608ad8eaaf</anchor>
      <arglist>(GPollFunc poll_func)</arglist>
    </member>
    <member kind="function">
      <type>GPollFunc</type>
      <name>get_poll_func</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>34a0b1e31173e163f11053dbcf21b84c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_poll</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>7cdbe7d102a781b6aded3cdda45fef34</anchor>
      <arglist>(PollFD &amp;fd, int priority)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_poll</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>33ea2db49dd93739599d19756c251627</anchor>
      <arglist>(PollFD &amp;fd)</arglist>
    </member>
    <member kind="function">
      <type>SignalTimeout</type>
      <name>signal_timeout</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>df307c9028858449e932f5fff100d432</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SignalIdle</type>
      <name>signal_idle</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>2a12990fb67f7b5c1ed61e36952dd827</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SignalIO</type>
      <name>signal_io</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>8c8a4283456eb9036cc09dc3aaf203dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SignalChildWatch</type>
      <name>signal_child_watch</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>b646f19ce79faa35d97e8af93e6ca6d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reference</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>71499a662e6ac07590a0972b1b0eac64</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unreference</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>8eaf5d38c393770f150db7bad9a67f9e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GMainContext *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>0fbf5178aca208161051097f034d3694</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GMainContext *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>1814534a832aecafba4a790e7b5ca25d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GMainContext *</type>
      <name>gobj_copy</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>3a841522a3db9ceb73742f9f235c3d2b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; MainContext &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>31bd96bf707a21c8a3003337dd3af9c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; MainContext &gt;</type>
      <name>get_default</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>1502cbed045a9fb27d18c6975e1d255d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; MainContext &gt;</type>
      <name>wrap</name>
      <anchorfile>group__MainLoop.html</anchorfile>
      <anchor>g043c5714afbad2745b27301dd58470a4</anchor>
      <arglist>(GMainContext *gobject, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::MainLoop</name>
    <filename>classGlib_1_1MainLoop.html</filename>
    <member kind="typedef">
      <type>Glib::MainLoop</type>
      <name>CppObjectType</name>
      <anchorfile>classGlib_1_1MainLoop.html</anchorfile>
      <anchor>5cf7f1f3137b7ecfde3a843087cc89d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GMainLoop</type>
      <name>BaseObjectType</name>
      <anchorfile>classGlib_1_1MainLoop.html</anchorfile>
      <anchor>d5e8a0005860126cac043cb60be70078</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>classGlib_1_1MainLoop.html</anchorfile>
      <anchor>4cc8eeba5dd463189737f859974ae158</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>quit</name>
      <anchorfile>classGlib_1_1MainLoop.html</anchorfile>
      <anchor>e1a76ab4fe58b23ec8238d6aa40cbab9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_running</name>
      <anchorfile>classGlib_1_1MainLoop.html</anchorfile>
      <anchor>9dca351bd77e00412f5e73eacc41c5fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; MainContext &gt;</type>
      <name>get_context</name>
      <anchorfile>classGlib_1_1MainLoop.html</anchorfile>
      <anchor>37b86faf3ae28cfa49c15b73b15a24f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reference</name>
      <anchorfile>classGlib_1_1MainLoop.html</anchorfile>
      <anchor>5e40799cc2e26b57227c269f0d4dd831</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unreference</name>
      <anchorfile>classGlib_1_1MainLoop.html</anchorfile>
      <anchor>26ac94620e6b7887aedb20df468a9123</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GMainLoop *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1MainLoop.html</anchorfile>
      <anchor>a53b9c0c885e28390b45e83aef4b2934</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GMainLoop *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1MainLoop.html</anchorfile>
      <anchor>eef011a123044d42b0422c36d28c450a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GMainLoop *</type>
      <name>gobj_copy</name>
      <anchorfile>classGlib_1_1MainLoop.html</anchorfile>
      <anchor>f4d2883d0ce518a137f49f131225a99d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; MainLoop &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1MainLoop.html</anchorfile>
      <anchor>37a1dcf3cb167cf02260111f533d0b5b</anchor>
      <arglist>(bool is_running=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; MainLoop &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1MainLoop.html</anchorfile>
      <anchor>b02f157ce27cd8aa5592eabc739ccdec</anchor>
      <arglist>(const Glib::RefPtr&lt; MainContext &gt; &amp;context, bool is_running=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>depth</name>
      <anchorfile>classGlib_1_1MainLoop.html</anchorfile>
      <anchor>023045e5b0069af8260e721fde21f4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; MainLoop &gt;</type>
      <name>wrap</name>
      <anchorfile>group__MainLoop.html</anchorfile>
      <anchor>g22ea72cda4ef327ca03fb72d6a3bea89</anchor>
      <arglist>(GMainLoop *gobject, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Source</name>
    <filename>classGlib_1_1Source.html</filename>
    <member kind="typedef">
      <type>Glib::Source</type>
      <name>CppObjectType</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>2edc89f6c4601e50f5aa22cb36eb9437</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GSource</type>
      <name>BaseObjectType</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>6dbe7bc8cfb1b72d61f06a180119db7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>attach</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>a61d28e643f2b286203b0d8e533b2c88</anchor>
      <arglist>(const Glib::RefPtr&lt; MainContext &gt; &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>attach</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>77c4b83960b2fd8d65b10ade1fc2e2fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destroy</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>98c983f075cdcb77c576b10900b3e052</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_priority</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>0c485044d82729a97b19cbcb841f3c53</anchor>
      <arglist>(int priority)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_priority</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>bdbea3f0b3404098729945a9973d638e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_can_recurse</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>9ca4bf99d7837587021e3cafd6775aba</anchor>
      <arglist>(bool can_recurse)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_can_recurse</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>da9f428f6265066eb9879b95246795be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>get_id</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>d4b66f89818dcc0c22479ec3c4f8f21e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; MainContext &gt;</type>
      <name>get_context</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>42935adf57e6605188e38236cb14b607</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GSource *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>4e855292e2a99861f33c3ba3e5cc3486</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GSource *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>f22441954ace1f7d0d1e0314a9778787</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GSource *</type>
      <name>gobj_copy</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>ffb708925e62814627bb2d332e1de0ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reference</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>72a59a45934a94a26aea8de5f1262235</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unreference</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>7c87c88cbce09d3a7fb10c4e9856f57f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Source &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>eaffb039abf99982d7a89403bca71569</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy_notify_callback</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>f6135656536048436ebbb6424d366800</anchor>
      <arglist>(void *data)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Source</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>9d081ba880470694d7aae3daaee30198</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Source</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>ccc8cdb2f85ee750e196236a6533b1f0</anchor>
      <arglist>(GSource *cast_item, GSourceFunc callback_func)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Source</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>b075ead07aec68d085190935fe49ba22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>sigc::connection</type>
      <name>connect_generic</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>7ee23894376489ae9cebf18bada4e014</anchor>
      <arglist>(const sigc::slot_base &amp;slot)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>add_poll</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>3a0843a960cad7a25919a682c37c9d03</anchor>
      <arglist>(PollFD &amp;poll_fd)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>remove_poll</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>67b7133527caa4f788674af0b4f185b2</anchor>
      <arglist>(PollFD &amp;poll_fd)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>get_current_time</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>ec16c75c6c202ea5cb4667aef2637d3c</anchor>
      <arglist>(Glib::TimeVal &amp;current_time)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual bool</type>
      <name>prepare</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>bc0e9e88fa74766818d317cd75d6aa3f</anchor>
      <arglist>(int &amp;timeout)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual bool</type>
      <name>check</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>914448375c7e0dfcee1a686a006c685d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual bool</type>
      <name>dispatch</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>af867fd3b09fc05d9c3e20cd89f35bd9</anchor>
      <arglist>(sigc::slot_base *slot)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::TimeoutSource</name>
    <filename>classGlib_1_1TimeoutSource.html</filename>
    <base>Glib::Source</base>
    <member kind="typedef">
      <type>Glib::TimeoutSource</type>
      <name>CppObjectType</name>
      <anchorfile>classGlib_1_1TimeoutSource.html</anchorfile>
      <anchor>922118e49e86690ad1b1b343734eaec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>sigc::connection</type>
      <name>connect</name>
      <anchorfile>classGlib_1_1TimeoutSource.html</anchorfile>
      <anchor>fd5504a056dbbf1c2aa38450c59c197d</anchor>
      <arglist>(const sigc::slot&lt; bool &gt; &amp;slot)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; TimeoutSource &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1TimeoutSource.html</anchorfile>
      <anchor>afe1898dd9ded8c66fc1dc9e9ba80884</anchor>
      <arglist>(unsigned int interval)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TimeoutSource</name>
      <anchorfile>classGlib_1_1TimeoutSource.html</anchorfile>
      <anchor>1477a30365d9b50fc3a02c92535d084c</anchor>
      <arglist>(unsigned int interval)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~TimeoutSource</name>
      <anchorfile>classGlib_1_1TimeoutSource.html</anchorfile>
      <anchor>be7d69a1390602de55a5207b1e25d64e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>prepare</name>
      <anchorfile>classGlib_1_1TimeoutSource.html</anchorfile>
      <anchor>08b0603920ff6ca9d3986121d584746a</anchor>
      <arglist>(int &amp;timeout)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>check</name>
      <anchorfile>classGlib_1_1TimeoutSource.html</anchorfile>
      <anchor>1d618d99c0d7d6b65b0118174e1cfdfc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>dispatch</name>
      <anchorfile>classGlib_1_1TimeoutSource.html</anchorfile>
      <anchor>27f49b37169765057787f68dabb0cad3</anchor>
      <arglist>(sigc::slot_base *slot)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::IdleSource</name>
    <filename>classGlib_1_1IdleSource.html</filename>
    <base>Glib::Source</base>
    <member kind="typedef">
      <type>Glib::IdleSource</type>
      <name>CppObjectType</name>
      <anchorfile>classGlib_1_1IdleSource.html</anchorfile>
      <anchor>0b70fdba79b73916c80aade11346aff9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>sigc::connection</type>
      <name>connect</name>
      <anchorfile>classGlib_1_1IdleSource.html</anchorfile>
      <anchor>eac761cf8634206bf4e599ae468140e1</anchor>
      <arglist>(const sigc::slot&lt; bool &gt; &amp;slot)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; IdleSource &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1IdleSource.html</anchorfile>
      <anchor>2d60b73fff1919fb0b9022a4d9a0b148</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>IdleSource</name>
      <anchorfile>classGlib_1_1IdleSource.html</anchorfile>
      <anchor>4970d5053f39e3200ae09d15b7a9507f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~IdleSource</name>
      <anchorfile>classGlib_1_1IdleSource.html</anchorfile>
      <anchor>898491e226ae73dfc191f81905ae8165</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>prepare</name>
      <anchorfile>classGlib_1_1IdleSource.html</anchorfile>
      <anchor>cc5555f554ce39e52a039da6a49bd259</anchor>
      <arglist>(int &amp;timeout)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>check</name>
      <anchorfile>classGlib_1_1IdleSource.html</anchorfile>
      <anchor>d909d691258ed037243d2ae444160964</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>dispatch</name>
      <anchorfile>classGlib_1_1IdleSource.html</anchorfile>
      <anchor>47da1054d939bd656d704c719ddd5633</anchor>
      <arglist>(sigc::slot_base *slot_data)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::IOSource</name>
    <filename>classGlib_1_1IOSource.html</filename>
    <base>Glib::Source</base>
    <member kind="typedef">
      <type>Glib::IOSource</type>
      <name>CppObjectType</name>
      <anchorfile>classGlib_1_1IOSource.html</anchorfile>
      <anchor>53b297a9c28f4dfbdb25dcbd12676797</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>sigc::connection</type>
      <name>connect</name>
      <anchorfile>classGlib_1_1IOSource.html</anchorfile>
      <anchor>2fc25e8e5d5ff2a1388226b92a6d7164</anchor>
      <arglist>(const sigc::slot&lt; bool, IOCondition &gt; &amp;slot)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; IOSource &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1IOSource.html</anchorfile>
      <anchor>c2dd533bf8293c42a157173d8a64a9fa</anchor>
      <arglist>(int fd, IOCondition condition)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; IOSource &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1IOSource.html</anchorfile>
      <anchor>e47864cf6220de79dc9902719917750e</anchor>
      <arglist>(const Glib::RefPtr&lt; IOChannel &gt; &amp;channel, IOCondition condition)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>IOSource</name>
      <anchorfile>classGlib_1_1IOSource.html</anchorfile>
      <anchor>93fc45dbe64b0c3f1a8d1fae1ede3625</anchor>
      <arglist>(int fd, IOCondition condition)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>IOSource</name>
      <anchorfile>classGlib_1_1IOSource.html</anchorfile>
      <anchor>c6f9fd1ae2a5767e84bfb948419a168e</anchor>
      <arglist>(const Glib::RefPtr&lt; IOChannel &gt; &amp;channel, IOCondition condition)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~IOSource</name>
      <anchorfile>classGlib_1_1IOSource.html</anchorfile>
      <anchor>6a55eea63478f8ecb56d3fb147940cfc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>prepare</name>
      <anchorfile>classGlib_1_1IOSource.html</anchorfile>
      <anchor>3a4aec26372e72bdfb709e6fe37a205d</anchor>
      <arglist>(int &amp;timeout)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>check</name>
      <anchorfile>classGlib_1_1IOSource.html</anchorfile>
      <anchor>110d00d58e547a8c3f0af3885c7ec7cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>dispatch</name>
      <anchorfile>classGlib_1_1IOSource.html</anchorfile>
      <anchor>af471a16f9b9659af63d8f0b39cea51f</anchor>
      <arglist>(sigc::slot_base *slot)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::MarkupError</name>
    <filename>classGlib_1_1MarkupError.html</filename>
    <base>Glib::Error</base>
    <member kind="enumvalue">
      <type>@</type>
      <name>BAD_UTF8</name>
      <anchorfile>group__Markup.html</anchorfile>
      <anchor>g1422c4a583441bbe490b8ed47d7fe1a730c6a6f1fcf9249db2692abc39b34c48</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>EMPTY</name>
      <anchorfile>group__Markup.html</anchorfile>
      <anchor>g1422c4a583441bbe490b8ed47d7fe1a75b3981a2a475d8b0ab4481c931c816dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PARSE</name>
      <anchorfile>group__Markup.html</anchorfile>
      <anchor>g1422c4a583441bbe490b8ed47d7fe1a7db7227e7bfab9c3409b7f5ce7da8075c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNKNOWN_ELEMENT</name>
      <anchorfile>group__Markup.html</anchorfile>
      <anchor>g1422c4a583441bbe490b8ed47d7fe1a72a63efd807b6e40451b57e128b34d9f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNKNOWN_ATTRIBUTE</name>
      <anchorfile>group__Markup.html</anchorfile>
      <anchor>g1422c4a583441bbe490b8ed47d7fe1a7ef0a541fa2885ffc56d0703a55afa735</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>INVALID_CONTENT</name>
      <anchorfile>group__Markup.html</anchorfile>
      <anchor>g1422c4a583441bbe490b8ed47d7fe1a74051754fb4e8f11408fe06445e99761e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Code</name>
      <anchor>1422c4a583441bbe490b8ed47d7fe1a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_UTF8</name>
      <anchor>g1422c4a583441bbe490b8ed47d7fe1a730c6a6f1fcf9249db2692abc39b34c48</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EMPTY</name>
      <anchor>g1422c4a583441bbe490b8ed47d7fe1a75b3981a2a475d8b0ab4481c931c816dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PARSE</name>
      <anchor>g1422c4a583441bbe490b8ed47d7fe1a7db7227e7bfab9c3409b7f5ce7da8075c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNKNOWN_ELEMENT</name>
      <anchor>g1422c4a583441bbe490b8ed47d7fe1a72a63efd807b6e40451b57e128b34d9f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNKNOWN_ATTRIBUTE</name>
      <anchor>g1422c4a583441bbe490b8ed47d7fe1a7ef0a541fa2885ffc56d0703a55afa735</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID_CONTENT</name>
      <anchor>g1422c4a583441bbe490b8ed47d7fe1a74051754fb4e8f11408fe06445e99761e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MarkupError</name>
      <anchorfile>classGlib_1_1MarkupError.html</anchorfile>
      <anchor>6ae004c83ba5b4a32b3d7df5aa17dd19</anchor>
      <arglist>(Code error_code, const Glib::ustring &amp;error_message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MarkupError</name>
      <anchorfile>classGlib_1_1MarkupError.html</anchorfile>
      <anchor>a5324bf1f53adf5fed4be252709a1e05</anchor>
      <arglist>(GError *gobject)</arglist>
    </member>
    <member kind="function">
      <type>Code</type>
      <name>code</name>
      <anchorfile>classGlib_1_1MarkupError.html</anchorfile>
      <anchor>93533ff4c34e76e9617dce3dc616f322</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Module</name>
    <filename>classGlib_1_1Module.html</filename>
    <member kind="function">
      <type></type>
      <name>Module</name>
      <anchorfile>classGlib_1_1Module.html</anchorfile>
      <anchor>43a926bb46ae0ccc4d63217fcc0f31cd</anchor>
      <arglist>(const std::string &amp;file_name, ModuleFlags flags=ModuleFlags(0))</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Module</name>
      <anchorfile>classGlib_1_1Module.html</anchorfile>
      <anchor>2b0353fc01a57653c0c60774efde274a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classGlib_1_1Module.html</anchorfile>
      <anchor>8426c52d92aa6be0f3077ee4ee71c5a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>make_resident</name>
      <anchorfile>classGlib_1_1Module.html</anchorfile>
      <anchor>f10c2ab1a24763db0702782d4928c06f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_symbol</name>
      <anchorfile>classGlib_1_1Module.html</anchorfile>
      <anchor>9e424387004421e29f65491dd1643a09</anchor>
      <arglist>(const std::string &amp;symbol_name, void *&amp;symbol) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_name</name>
      <anchorfile>classGlib_1_1Module.html</anchorfile>
      <anchor>19636376bf76a118b572015220b4623a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GModule *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1Module.html</anchorfile>
      <anchor>c3b1db2a5e4dcb2771ce7376ab207951</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GModule *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1Module.html</anchorfile>
      <anchor>d3791a114fc85afd1a07644cd839243f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>get_supported</name>
      <anchorfile>classGlib_1_1Module.html</anchorfile>
      <anchor>d135ce3f9e6b8b7441bd4ca8da2099fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>get_last_error</name>
      <anchorfile>classGlib_1_1Module.html</anchorfile>
      <anchor>40669f490a2e90d7c39ede58a7ef5c2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>build_path</name>
      <anchorfile>classGlib_1_1Module.html</anchorfile>
      <anchor>5ea64e82147d3ba9edb75f71dfffc87c</anchor>
      <arglist>(const std::string &amp;directory, const std::string &amp;module_name)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GModule *</type>
      <name>gobject_</name>
      <anchorfile>classGlib_1_1Module.html</anchorfile>
      <anchor>12a777846a059ffc8277ba2f196cb68e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Object</name>
    <filename>classGlib_1_1Object.html</filename>
    <base virtualness="virtual">Glib::ObjectBase</base>
    <member kind="typedef">
      <type>void(*)</type>
      <name>DestroyNotify</name>
      <anchorfile>classGlib_1_1Object.html</anchorfile>
      <anchor>dee66b2fa45e0b4ae24e61999285ddef</anchor>
      <arglist>(gpointer data)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>get_data</name>
      <anchorfile>classGlib_1_1Object.html</anchorfile>
      <anchor>0e6581bcbcc6197cca07df24bb91c492</anchor>
      <arglist>(const QueryQuark &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_data</name>
      <anchorfile>classGlib_1_1Object.html</anchorfile>
      <anchor>fff7a375a862f3f899daaa99710122fa</anchor>
      <arglist>(const Quark &amp;key, void *data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_data</name>
      <anchorfile>classGlib_1_1Object.html</anchorfile>
      <anchor>1febe3bae2dd71756e98e523cd33c1b4</anchor>
      <arglist>(const Quark &amp;key, void *data, DestroyNotify notify)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_data</name>
      <anchorfile>classGlib_1_1Object.html</anchorfile>
      <anchor>ada5b50844bda7ee02bed0ae2a715c00</anchor>
      <arglist>(const QueryQuark &amp;quark)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>steal_data</name>
      <anchorfile>classGlib_1_1Object.html</anchorfile>
      <anchor>b454f71bd74403b0cc46d3cbbedd6b0e</anchor>
      <arglist>(const QueryQuark &amp;quark)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Object</name>
      <anchorfile>classGlib_1_1Object.html</anchorfile>
      <anchor>d43f7c5ad0336e1eb3af622392a112eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Object</name>
      <anchorfile>classGlib_1_1Object.html</anchorfile>
      <anchor>6d72588496bd7ac03f72420021fb94a5</anchor>
      <arglist>(const Glib::ConstructParams &amp;construct_params)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Object</name>
      <anchorfile>classGlib_1_1Object.html</anchorfile>
      <anchor>6f490eeaeb71db673c36799a0f729be5</anchor>
      <arglist>(GObject *castitem)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Object</name>
      <anchorfile>classGlib_1_1Object.html</anchorfile>
      <anchor>5ae4319439a3a03d8f803fb5a27f12df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Glib::Object &gt;</type>
      <name>wrap</name>
      <anchorfile>classGlib_1_1Object.html</anchorfile>
      <anchor>e4dea9a8dc611d6e4400a5b6a3cb4e7f</anchor>
      <arglist>(GObject *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::ObjectBase</name>
    <filename>classGlib_1_1ObjectBase.html</filename>
    <base virtualness="virtual">sigc::trackable</base>
    <member kind="function">
      <type>void</type>
      <name>set_property_value</name>
      <anchorfile>classGlib_1_1ObjectBase.html</anchorfile>
      <anchor>ab599d3eec4b4a9ddc95ccdc6100053d</anchor>
      <arglist>(const Glib::ustring &amp;property_name, const Glib::ValueBase &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_property_value</name>
      <anchorfile>classGlib_1_1ObjectBase.html</anchorfile>
      <anchor>5e30750441b92f0246c9d4ece95fc8a0</anchor>
      <arglist>(const Glib::ustring &amp;property_name, Glib::ValueBase &amp;value) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_property</name>
      <anchorfile>classGlib_1_1ObjectBase.html</anchorfile>
      <anchor>804777e39f95c7221febc3ce2c72332b</anchor>
      <arglist>(const Glib::ustring &amp;property_name, const PropertyType &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_property</name>
      <anchorfile>classGlib_1_1ObjectBase.html</anchorfile>
      <anchor>99efdd4fceb7028ea54ec53ab680d60b</anchor>
      <arglist>(const Glib::ustring &amp;property_name, PropertyType &amp;value) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>connect_property_changed</name>
      <anchorfile>classGlib_1_1ObjectBase.html</anchorfile>
      <anchor>dc6c1e8f094275114d6e2c3ef3a33f98</anchor>
      <arglist>(const Glib::ustring &amp;property_name, const sigc::slot&lt; void &gt; &amp;slot)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reference</name>
      <anchorfile>classGlib_1_1ObjectBase.html</anchorfile>
      <anchor>896a8a5db20043ea82956e3ef4b9c4ae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unreference</name>
      <anchorfile>classGlib_1_1ObjectBase.html</anchorfile>
      <anchor>3234b8ffb2a35b927e2978c8f3bfbfe3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GObject *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1ObjectBase.html</anchorfile>
      <anchor>4c6efc18be8cb9c56e58fc0bd20fafbe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GObject *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1ObjectBase.html</anchorfile>
      <anchor>778a94181132976bbfb0519793f3b32e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GObject *</type>
      <name>gobj_copy</name>
      <anchorfile>classGlib_1_1ObjectBase.html</anchorfile>
      <anchor>9b2a5eb93102f1849e5419016e22a15f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ObjectBase</name>
      <anchorfile>classGlib_1_1ObjectBase.html</anchorfile>
      <anchor>27d3451d9ca28d6a2f00838d7c56d545</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ObjectBase</name>
      <anchorfile>classGlib_1_1ObjectBase.html</anchorfile>
      <anchor>d4ef18214894c6874579313ab21d1018</anchor>
      <arglist>(const char *custom_type_name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ObjectBase</name>
      <anchorfile>classGlib_1_1ObjectBase.html</anchorfile>
      <anchor>3d59b4d85b0ee72a727e6b2e1b31a2ff</anchor>
      <arglist>(const std::type_info &amp;custom_type_info)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual</type>
      <name>~ObjectBase</name>
      <anchorfile>classGlib_1_1ObjectBase.html</anchorfile>
      <anchor>42ac047a06c36c2d9c75f7cffc537dc4</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classGlib_1_1ObjectBase.html</anchorfile>
      <anchor>3faafb14c4f0ca60fbf0f5f5c4d549d0</anchor>
      <arglist>(GObject *castitem)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::OptionError</name>
    <filename>classGlib_1_1OptionError.html</filename>
    <base>Glib::Error</base>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNKNOWN_OPTION</name>
      <anchorfile>classGlib_1_1OptionError.html</anchorfile>
      <anchor>3ea5eb98a6e3179cf30c61aec0f92e0fdbffad617d2d2adc2b91b2d50e67d43f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BAD_VALUE</name>
      <anchorfile>classGlib_1_1OptionError.html</anchorfile>
      <anchor>3ea5eb98a6e3179cf30c61aec0f92e0fdccf631862138814c2c8c9fb5d68ee5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FAILED</name>
      <anchorfile>classGlib_1_1OptionError.html</anchorfile>
      <anchor>3ea5eb98a6e3179cf30c61aec0f92e0f30e7457812a8f2a6c32eb982d9df7593</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Code</name>
      <anchor>3ea5eb98a6e3179cf30c61aec0f92e0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNKNOWN_OPTION</name>
      <anchor>3ea5eb98a6e3179cf30c61aec0f92e0fdbffad617d2d2adc2b91b2d50e67d43f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_VALUE</name>
      <anchor>3ea5eb98a6e3179cf30c61aec0f92e0fdccf631862138814c2c8c9fb5d68ee5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FAILED</name>
      <anchor>3ea5eb98a6e3179cf30c61aec0f92e0f30e7457812a8f2a6c32eb982d9df7593</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptionError</name>
      <anchorfile>classGlib_1_1OptionError.html</anchorfile>
      <anchor>bcab818ae38ae2a190b74c04f7a62794</anchor>
      <arglist>(Code error_code, const Glib::ustring &amp;error_message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptionError</name>
      <anchorfile>classGlib_1_1OptionError.html</anchorfile>
      <anchor>ce45974f225f53b08db04bb455c05b1f</anchor>
      <arglist>(GError *gobject)</arglist>
    </member>
    <member kind="function">
      <type>Code</type>
      <name>code</name>
      <anchorfile>classGlib_1_1OptionError.html</anchorfile>
      <anchor>43c1d4a45248b644f498bb3e75902321</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::OptionContext</name>
    <filename>classGlib_1_1OptionContext.html</filename>
    <member kind="function">
      <type></type>
      <name>OptionContext</name>
      <anchorfile>classGlib_1_1OptionContext.html</anchorfile>
      <anchor>d313150579fe7f769f1c5863f8867eab</anchor>
      <arglist>(const Glib::ustring &amp;parameter_string=Glib::ustring())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptionContext</name>
      <anchorfile>classGlib_1_1OptionContext.html</anchorfile>
      <anchor>e84b2223d374cf0756af7a08e6df811f</anchor>
      <arglist>(GOptionContext *castitem, bool take_ownership=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OptionContext</name>
      <anchorfile>classGlib_1_1OptionContext.html</anchorfile>
      <anchor>5871acd083020c408dcd2d399f981fd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_help_enabled</name>
      <anchorfile>classGlib_1_1OptionContext.html</anchorfile>
      <anchor>e31d88f6e0c9a3211af390e0d3f976c6</anchor>
      <arglist>(bool help_enabled=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_help_enabled</name>
      <anchorfile>classGlib_1_1OptionContext.html</anchorfile>
      <anchor>4f33399c5395db9dd055f02a08712ec0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_ignore_unknown_options</name>
      <anchorfile>classGlib_1_1OptionContext.html</anchorfile>
      <anchor>022f6c50d608b2fabdf7287caf588d73</anchor>
      <arglist>(bool ignore_unknown=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_ignore_unknown_options</name>
      <anchorfile>classGlib_1_1OptionContext.html</anchorfile>
      <anchor>a15e010efafa83d8d953c026e036dd01</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>parse</name>
      <anchorfile>classGlib_1_1OptionContext.html</anchorfile>
      <anchor>08ab225e3a4be10364f32948a6532726</anchor>
      <arglist>(int &amp;argc, char **&amp;argv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_group</name>
      <anchorfile>classGlib_1_1OptionContext.html</anchorfile>
      <anchor>2c81f14e99f9c84406f200286673b14e</anchor>
      <arglist>(OptionGroup &amp;group)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_main_group</name>
      <anchorfile>classGlib_1_1OptionContext.html</anchorfile>
      <anchor>e6d57268ad6a1f05c5d6175ab8e11181</anchor>
      <arglist>(OptionGroup &amp;group)</arglist>
    </member>
    <member kind="function">
      <type>GOptionContext *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1OptionContext.html</anchorfile>
      <anchor>f87e77207d4a437598f485fe0e7294e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GOptionContext *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1OptionContext.html</anchorfile>
      <anchor>11b48b2190d2d45f43bcc8d8e26f1eb1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GOptionContext *</type>
      <name>gobject_</name>
      <anchorfile>classGlib_1_1OptionContext.html</anchorfile>
      <anchor>e5f0ab1971db754356144f720fa47ded</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>has_ownership_</name>
      <anchorfile>classGlib_1_1OptionContext.html</anchorfile>
      <anchor>af708c17aa94584e258cffd53b6344c6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::OptionEntry</name>
    <filename>classGlib_1_1OptionEntry.html</filename>
    <member kind="enumvalue">
      <type>@</type>
      <name>FLAG_HIDDEN</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>5b550ab1ac9884bcc614653c9cf98280dfc734d486122379ef2c37d9e8861644</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FLAG_IN_MAIN</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>5b550ab1ac9884bcc614653c9cf98280b8f1e9721d33857527515dbadd3f822f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FLAG_REVERSE</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>5b550ab1ac9884bcc614653c9cf9828024a4642bdefb942e56482f6b7d05561e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FLAG_NO_ARG</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>5b550ab1ac9884bcc614653c9cf9828069aead0991d1cd5b29cd394c8174f25d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FLAG_FILENAME</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>5b550ab1ac9884bcc614653c9cf98280bc30a617bee9b427293fdfc13f546955</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FLAG_OPTIONAL_ARG</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>5b550ab1ac9884bcc614653c9cf98280e7b4fc1fd7b9f41c6a91c48c8978e4ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FLAG_NOALIAS</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>5b550ab1ac9884bcc614653c9cf982809672830777db41b709ca74252f3afd27</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Flags</name>
      <anchor>5b550ab1ac9884bcc614653c9cf98280</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FLAG_HIDDEN</name>
      <anchor>5b550ab1ac9884bcc614653c9cf98280dfc734d486122379ef2c37d9e8861644</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FLAG_IN_MAIN</name>
      <anchor>5b550ab1ac9884bcc614653c9cf98280b8f1e9721d33857527515dbadd3f822f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FLAG_REVERSE</name>
      <anchor>5b550ab1ac9884bcc614653c9cf9828024a4642bdefb942e56482f6b7d05561e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FLAG_NO_ARG</name>
      <anchor>5b550ab1ac9884bcc614653c9cf9828069aead0991d1cd5b29cd394c8174f25d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FLAG_FILENAME</name>
      <anchor>5b550ab1ac9884bcc614653c9cf98280bc30a617bee9b427293fdfc13f546955</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FLAG_OPTIONAL_ARG</name>
      <anchor>5b550ab1ac9884bcc614653c9cf98280e7b4fc1fd7b9f41c6a91c48c8978e4ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FLAG_NOALIAS</name>
      <anchor>5b550ab1ac9884bcc614653c9cf982809672830777db41b709ca74252f3afd27</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptionEntry</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>aeec52f8bd17268b8bba6e4746def3c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptionEntry</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>fa83c0423e913e528cb073b850bdf06a</anchor>
      <arglist>(const OptionEntry &amp;src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OptionEntry</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>8f84e2bdc3577ed1c1a2cb7e344eca0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OptionEntry &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>e3070f22bf99398c42b51b71e44f8a7b</anchor>
      <arglist>(const OptionEntry &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_long_name</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>1c7f2b04d13b8bfa0e36faa0d24d35cf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_long_name</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>31a2a6dbb9cf995a5583fc5d18724ecd</anchor>
      <arglist>(const Glib::ustring &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>gchar</type>
      <name>get_short_name</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>81f59eb285439b4c6e863ad4e6435e1f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_short_name</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>c4e352caaf4a977dbbaf3352eed2e6fb</anchor>
      <arglist>(const gchar &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_flags</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>73ccebf305d55337d9001c614b4b90bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_flags</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>99ab7ba877bae068713085810d908e20</anchor>
      <arglist>(const int &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_description</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>2d21cdbc2fc6b6220bb43a63376f34d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_description</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>62bc509cca2829535c1e65db5100fc05</anchor>
      <arglist>(const Glib::ustring &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_arg_description</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>1335b0adf09d6da089e5ef4348c19cd7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_arg_description</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>b9f1af6b5c5a8425dd357ccc07262eb2</anchor>
      <arglist>(const Glib::ustring &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>GOptionEntry *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>2c861668e4a9d4601e5b95ed05d05bc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GOptionEntry *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>f18b1584aedc0f26f406334b4840be84</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>enum Glib::OptionEntry::Flags</type>
      <name>GOptionFlags</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>309fc51cdc8e6815b034e8255a4e7852</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GOptionEntry *</type>
      <name>gobject_</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>e69569ab0df3c4f00261d7b5d3230721</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::OptionGroup</name>
    <filename>classGlib_1_1OptionGroup.html</filename>
    <member kind="typedef">
      <type>std::vector&lt; Glib::ustring &gt;</type>
      <name>vecustrings</name>
      <anchorfile>classGlib_1_1OptionGroup.html</anchorfile>
      <anchor>138f22b58260f1150ba6a1b177944732</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; std::string &gt;</type>
      <name>vecstrings</name>
      <anchorfile>classGlib_1_1OptionGroup.html</anchorfile>
      <anchor>35ca2f93ada18a71a190f6120ccccbe4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptionGroup</name>
      <anchorfile>classGlib_1_1OptionGroup.html</anchorfile>
      <anchor>de69f722319b9fa89f310ffecc8f59b5</anchor>
      <arglist>(const Glib::ustring &amp;name, const Glib::ustring &amp;description, const Glib::ustring &amp;help_description=Glib::ustring())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptionGroup</name>
      <anchorfile>classGlib_1_1OptionGroup.html</anchorfile>
      <anchor>abf5a3a067f992f0fd400bf7906c2f76</anchor>
      <arglist>(GOptionGroup *castitem)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OptionGroup</name>
      <anchorfile>classGlib_1_1OptionGroup.html</anchorfile>
      <anchor>101d202836391404add68fe65d7d9767</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>on_pre_parse</name>
      <anchorfile>classGlib_1_1OptionGroup.html</anchorfile>
      <anchor>aa9f099207de7735453997ad6234c8b8</anchor>
      <arglist>(OptionContext &amp;context, OptionGroup &amp;group)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>on_post_parse</name>
      <anchorfile>classGlib_1_1OptionGroup.html</anchorfile>
      <anchor>be8a3bc20f23cbc677c042773b6a092f</anchor>
      <arglist>(OptionContext &amp;context, OptionGroup &amp;group)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>on_error</name>
      <anchorfile>classGlib_1_1OptionGroup.html</anchorfile>
      <anchor>7cdff34c14d75c57e265a416925bad0f</anchor>
      <arglist>(OptionContext &amp;context, OptionGroup &amp;group)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_entry</name>
      <anchorfile>classGlib_1_1OptionGroup.html</anchorfile>
      <anchor>be772a54bbad294d847b77349e86c8e9</anchor>
      <arglist>(const OptionEntry &amp;entry)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_entry</name>
      <anchorfile>classGlib_1_1OptionGroup.html</anchorfile>
      <anchor>21c7501faad777f5fcd0b61d7c4d5395</anchor>
      <arglist>(const OptionEntry &amp;entry, bool &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_entry</name>
      <anchorfile>classGlib_1_1OptionGroup.html</anchorfile>
      <anchor>6d9cf49759c1162a0b6b37284aa62494</anchor>
      <arglist>(const OptionEntry &amp;entry, int &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_entry</name>
      <anchorfile>classGlib_1_1OptionGroup.html</anchorfile>
      <anchor>b30d8b251e06607e8d2ca062609477f3</anchor>
      <arglist>(const OptionEntry &amp;entry, Glib::ustring &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_entry_filename</name>
      <anchorfile>classGlib_1_1OptionGroup.html</anchorfile>
      <anchor>533fdd3d3360a9d3766dcaa60f184aee</anchor>
      <arglist>(const OptionEntry &amp;entry, std::string &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_entry</name>
      <anchorfile>classGlib_1_1OptionGroup.html</anchorfile>
      <anchor>f198c0dd532f1635aec904282109f130</anchor>
      <arglist>(const OptionEntry &amp;entry, vecustrings &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_entry_filename</name>
      <anchorfile>classGlib_1_1OptionGroup.html</anchorfile>
      <anchor>f983b4762a0ceb7fc884f75ad5234ef8</anchor>
      <arglist>(const OptionEntry &amp;entry, vecstrings &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_translation_domain</name>
      <anchorfile>classGlib_1_1OptionGroup.html</anchorfile>
      <anchor>de081f34243662912f557521f7175606</anchor>
      <arglist>(const Glib::ustring &amp;domain)</arglist>
    </member>
    <member kind="function">
      <type>GOptionGroup *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1OptionGroup.html</anchorfile>
      <anchor>fdf7f68b05a285cc5096a2a342d48bf4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GOptionGroup *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1OptionGroup.html</anchorfile>
      <anchor>b2e09acc9712806287c549263a7ef689</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GOptionGroup *</type>
      <name>gobj_give_ownership</name>
      <anchorfile>classGlib_1_1OptionGroup.html</anchorfile>
      <anchor>675828be7840ff47c049a700297516e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; Glib::ustring, CppOptionEntry &gt;</type>
      <name>type_map_entries</name>
      <anchorfile>classGlib_1_1OptionGroup.html</anchorfile>
      <anchor>4fd488c5fc62c150138f4bd7452b0e3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>add_entry_with_wrapper</name>
      <anchorfile>classGlib_1_1OptionGroup.html</anchorfile>
      <anchor>6b74506854df760acaa19e33ca7e8456</anchor>
      <arglist>(const OptionEntry &amp;entry, GOptionArg arg_type, void *cpp_arg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>type_map_entries</type>
      <name>map_entries_</name>
      <anchorfile>classGlib_1_1OptionGroup.html</anchorfile>
      <anchor>785ff0731387b2a2840f9394744ff4fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GOptionGroup *</type>
      <name>gobject_</name>
      <anchorfile>classGlib_1_1OptionGroup.html</anchorfile>
      <anchor>e1e3630f9de6430f07e3950d7f57c72b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>has_ownership_</name>
      <anchorfile>classGlib_1_1OptionGroup.html</anchorfile>
      <anchor>af180d902d1022563d6acc993b43547c</anchor>
      <arglist></arglist>
    </member>
    <class kind="class">Glib::OptionGroup::CppOptionEntry</class>
  </compound>
  <compound kind="class">
    <name>Glib::OptionGroup::CppOptionEntry</name>
    <filename>classGlib_1_1OptionGroup_1_1CppOptionEntry.html</filename>
    <member kind="function">
      <type></type>
      <name>CppOptionEntry</name>
      <anchorfile>classGlib_1_1OptionGroup_1_1CppOptionEntry.html</anchorfile>
      <anchor>f8e168ee4a7db92ea6778f849876fc95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocate_c_arg</name>
      <anchorfile>classGlib_1_1OptionGroup_1_1CppOptionEntry.html</anchorfile>
      <anchor>30736c6d7564767eb19764e5ff097ddd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convert_c_to_cpp</name>
      <anchorfile>classGlib_1_1OptionGroup_1_1CppOptionEntry.html</anchorfile>
      <anchor>ffe7cf7eec28346b12ccf044be4a0f6e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>release_c_arg</name>
      <anchorfile>classGlib_1_1OptionGroup_1_1CppOptionEntry.html</anchorfile>
      <anchor>bc0ff01a8ffaee69da8e07df82480985</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>GOptionArg</type>
      <name>carg_type_</name>
      <anchorfile>classGlib_1_1OptionGroup_1_1CppOptionEntry.html</anchorfile>
      <anchor>d2ee5679d611cf03fe135ee127fc8b5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>carg_</name>
      <anchorfile>classGlib_1_1OptionGroup_1_1CppOptionEntry.html</anchorfile>
      <anchor>5ef818c34a342b50bb7f91c5190832a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>cpparg_</name>
      <anchorfile>classGlib_1_1OptionGroup_1_1CppOptionEntry.html</anchorfile>
      <anchor>899606bef45e71a577b9997f08870e24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OptionEntry *</type>
      <name>entry_</name>
      <anchorfile>classGlib_1_1OptionGroup_1_1CppOptionEntry.html</anchorfile>
      <anchor>44b308f006dd2b2227d5b8042149a336</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::PatternSpec</name>
    <filename>classGlib_1_1PatternSpec.html</filename>
    <member kind="function">
      <type></type>
      <name>PatternSpec</name>
      <anchorfile>classGlib_1_1PatternSpec.html</anchorfile>
      <anchor>fc18aa40675afcdf3e62c6f5ac4d67e9</anchor>
      <arglist>(const Glib::ustring &amp;pattern)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PatternSpec</name>
      <anchorfile>classGlib_1_1PatternSpec.html</anchorfile>
      <anchor>b8c5ce3d5297d01f0db9055bfa61d9fa</anchor>
      <arglist>(GPatternSpec *gobject)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PatternSpec</name>
      <anchorfile>classGlib_1_1PatternSpec.html</anchorfile>
      <anchor>632b3dddb4474c101ba5928c56e9241f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>match</name>
      <anchorfile>classGlib_1_1PatternSpec.html</anchorfile>
      <anchor>b7b6f1a9be3dacfbbd9b8ccf250879ba</anchor>
      <arglist>(const Glib::ustring &amp;str) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>match</name>
      <anchorfile>classGlib_1_1PatternSpec.html</anchorfile>
      <anchor>01ffc20a65f707383f2940c5b23918b0</anchor>
      <arglist>(const Glib::ustring &amp;str, const Glib::ustring &amp;str_reversed) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classGlib_1_1PatternSpec.html</anchorfile>
      <anchor>1fc213b6fa0c79676b0813f4f6844d2d</anchor>
      <arglist>(const PatternSpec &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classGlib_1_1PatternSpec.html</anchorfile>
      <anchor>8ee9597a79da95097edebc084ef7189c</anchor>
      <arglist>(const PatternSpec &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>GPatternSpec *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1PatternSpec.html</anchorfile>
      <anchor>6c01de7b965dd5bbe2bdce8527ac9af5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GPatternSpec *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1PatternSpec.html</anchorfile>
      <anchor>833bfbd56088c2edf1d17546ac9d4b78</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::PropertyBase</name>
    <filename>classGlib_1_1PropertyBase.html</filename>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_name</name>
      <anchorfile>classGlib_1_1PropertyBase.html</anchorfile>
      <anchor>89dee7c3023f99bf2d1ce8792177a91d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>notify</name>
      <anchorfile>classGlib_1_1PropertyBase.html</anchorfile>
      <anchor>da1c2294c7b3b159af8b5dad1ad02c16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PropertyBase</name>
      <anchorfile>classGlib_1_1PropertyBase.html</anchorfile>
      <anchor>a6c0b97d8561766b8f4a9f5a183c9f00</anchor>
      <arglist>(Glib::Object &amp;object, GType value_type)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~PropertyBase</name>
      <anchorfile>classGlib_1_1PropertyBase.html</anchorfile>
      <anchor>be19b39fa1b7b75b95da94390f8bc19b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>lookup_property</name>
      <anchorfile>classGlib_1_1PropertyBase.html</anchorfile>
      <anchor>4a0e9de0bb457270b6c307d14e9c5a02</anchor>
      <arglist>(const Glib::ustring &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>install_property</name>
      <anchorfile>classGlib_1_1PropertyBase.html</anchorfile>
      <anchor>5d63e95270aa1aa16f9a9c896897184c</anchor>
      <arglist>(GParamSpec *param_spec)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const char *</type>
      <name>get_name_internal</name>
      <anchorfile>classGlib_1_1PropertyBase.html</anchorfile>
      <anchor>357eabbcb3ce5a694370d73a4921337e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Glib::Object *</type>
      <name>object_</name>
      <anchorfile>classGlib_1_1PropertyBase.html</anchorfile>
      <anchor>7191a31bd5cb2665947378ea58b3a4ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Glib::ValueBase</type>
      <name>value_</name>
      <anchorfile>classGlib_1_1PropertyBase.html</anchorfile>
      <anchor>82bc5e296e19c2d7e42a0b78fb5f2062</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GParamSpec *</type>
      <name>param_spec_</name>
      <anchorfile>classGlib_1_1PropertyBase.html</anchorfile>
      <anchor>227edf3035194bbb6f161c4ae9a74280</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Property</name>
    <filename>classGlib_1_1Property.html</filename>
    <templarg>T</templarg>
    <base>Glib::PropertyBase</base>
    <member kind="typedef">
      <type>T</type>
      <name>PropertyType</name>
      <anchorfile>classGlib_1_1Property.html</anchorfile>
      <anchor>7ab4e7520876b32d031842816c8b33f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Glib::Value&lt; T &gt;</type>
      <name>ValueType</name>
      <anchorfile>classGlib_1_1Property.html</anchorfile>
      <anchor>9e0517ff48ae26638e22768506769afa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Property</name>
      <anchorfile>classGlib_1_1Property.html</anchorfile>
      <anchor>3a9605f1efc1c170059804bed07a41ac</anchor>
      <arglist>(Glib::Object &amp;object, const Glib::ustring &amp;name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Property</name>
      <anchorfile>classGlib_1_1Property.html</anchorfile>
      <anchor>9bd490d36e1068ba4c1225d941530603</anchor>
      <arglist>(Glib::Object &amp;object, const Glib::ustring &amp;name, const PropertyType &amp;default_value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_value</name>
      <anchorfile>classGlib_1_1Property.html</anchorfile>
      <anchor>19fbb8ff9bad70974e28e487284a48db</anchor>
      <arglist>(const PropertyType &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>PropertyType</type>
      <name>get_value</name>
      <anchorfile>classGlib_1_1Property.html</anchorfile>
      <anchor>d8d4a26b3ee23cb7f3b5067a2a7fc77b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Property&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1Property.html</anchorfile>
      <anchor>07169f608d8d53833c305da5936a922e</anchor>
      <arglist>(const PropertyType &amp;data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator PropertyType</name>
      <anchorfile>classGlib_1_1Property.html</anchorfile>
      <anchor>0c32a8465004fcd2c300f84b75666335</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; T &gt;</type>
      <name>get_proxy</name>
      <anchorfile>classGlib_1_1Property.html</anchorfile>
      <anchor>50f48c982d6d2fbd1fcf60bd6965a34f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::PropertyProxy</name>
    <filename>classGlib_1_1PropertyProxy.html</filename>
    <templarg>T</templarg>
    <base>Glib::PropertyProxy_Base</base>
    <member kind="typedef">
      <type>T</type>
      <name>PropertyType</name>
      <anchorfile>classGlib_1_1PropertyProxy.html</anchorfile>
      <anchor>d5f4eac0a367fae18b0db33ab6c42235</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PropertyProxy</name>
      <anchorfile>classGlib_1_1PropertyProxy.html</anchorfile>
      <anchor>f8353d01e3ae6134eaceaf900ffb84b9</anchor>
      <arglist>(ObjectBase *obj, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_value</name>
      <anchorfile>classGlib_1_1PropertyProxy.html</anchorfile>
      <anchor>ff4eb140b4f4da0488c4387c1047ad82</anchor>
      <arglist>(const PropertyType &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>PropertyType</type>
      <name>get_value</name>
      <anchorfile>classGlib_1_1PropertyProxy.html</anchorfile>
      <anchor>4bbf4c99c138e7e33ce6393147b4e121</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_value</name>
      <anchorfile>classGlib_1_1PropertyProxy.html</anchorfile>
      <anchor>4ea1719ff572be400fdce1f3257fdf59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PropertyProxy&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1PropertyProxy.html</anchorfile>
      <anchor>dd4490830382a8173acf097dffffd92e</anchor>
      <arglist>(const PropertyType &amp;data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator PropertyType</name>
      <anchorfile>classGlib_1_1PropertyProxy.html</anchorfile>
      <anchor>127addf739d2d3f40c4a066a543ef967</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::PropertyProxy_WriteOnly</name>
    <filename>classGlib_1_1PropertyProxy__WriteOnly.html</filename>
    <templarg>T</templarg>
    <base>Glib::PropertyProxy_Base</base>
    <member kind="typedef">
      <type>T</type>
      <name>PropertyType</name>
      <anchorfile>classGlib_1_1PropertyProxy__WriteOnly.html</anchorfile>
      <anchor>b793e05112b9cf356d29f32f3a4389c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PropertyProxy_WriteOnly</name>
      <anchorfile>classGlib_1_1PropertyProxy__WriteOnly.html</anchorfile>
      <anchor>a8fc4a6944fa92745e6db12f8a102e04</anchor>
      <arglist>(ObjectBase *obj, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_value</name>
      <anchorfile>classGlib_1_1PropertyProxy__WriteOnly.html</anchorfile>
      <anchor>30500a1c44729093af1e5e9b1110b80a</anchor>
      <arglist>(const PropertyType &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_value</name>
      <anchorfile>classGlib_1_1PropertyProxy__WriteOnly.html</anchorfile>
      <anchor>000abcd69676eeb0afefd671e4670c28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PropertyProxy_WriteOnly&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1PropertyProxy__WriteOnly.html</anchorfile>
      <anchor>a62bc22fa9389657d8562d375b616401</anchor>
      <arglist>(const PropertyType &amp;data)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::PropertyProxy_ReadOnly</name>
    <filename>classGlib_1_1PropertyProxy__ReadOnly.html</filename>
    <templarg>T</templarg>
    <base>Glib::PropertyProxy_Base</base>
    <member kind="typedef">
      <type>T</type>
      <name>PropertyType</name>
      <anchorfile>classGlib_1_1PropertyProxy__ReadOnly.html</anchorfile>
      <anchor>e9be436770223139b25acd136fd1e2da</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PropertyProxy_ReadOnly</name>
      <anchorfile>classGlib_1_1PropertyProxy__ReadOnly.html</anchorfile>
      <anchor>49910fa712bce1cd0ae51e6728f9619f</anchor>
      <arglist>(const ObjectBase *obj, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>PropertyType</type>
      <name>get_value</name>
      <anchorfile>classGlib_1_1PropertyProxy__ReadOnly.html</anchorfile>
      <anchor>187f0f2ba5e18198fd0cc64381b466ce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator PropertyType</name>
      <anchorfile>classGlib_1_1PropertyProxy__ReadOnly.html</anchorfile>
      <anchor>f03f7075d100e4e0f8759bde8990b80f</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::SignalProxyProperty</name>
    <filename>classGlib_1_1SignalProxyProperty.html</filename>
    <base>Glib::SignalProxyBase</base>
    <member kind="typedef">
      <type>sigc::slot&lt; void &gt;</type>
      <name>SlotType</name>
      <anchorfile>classGlib_1_1SignalProxyProperty.html</anchorfile>
      <anchor>c9c7309b66266e9da0b24d99988174b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SignalProxyProperty</name>
      <anchorfile>classGlib_1_1SignalProxyProperty.html</anchorfile>
      <anchor>7fedeaa4f15140fa40b99b2dd5a9657b</anchor>
      <arglist>(Glib::ObjectBase *obj, const gchar *property_name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SignalProxyProperty</name>
      <anchorfile>classGlib_1_1SignalProxyProperty.html</anchorfile>
      <anchor>7f3c64d03b63a01cd29077fb4792988d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sigc::connection</type>
      <name>connect</name>
      <anchorfile>classGlib_1_1SignalProxyProperty.html</anchorfile>
      <anchor>911d4e8417d1ee28b4286030ddb40e4c</anchor>
      <arglist>(const SlotType &amp;sl)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const char *</type>
      <name>property_name_</name>
      <anchorfile>classGlib_1_1SignalProxyProperty.html</anchorfile>
      <anchor>74a5e9f3fe2b3029bb4eb0110cd57cd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PropertyProxy_Base</name>
      <anchorfile>classGlib_1_1SignalProxyProperty.html</anchorfile>
      <anchor>f89eed4f02a88c9f6685c24f64b60257</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::PropertyProxy_Base</name>
    <filename>classGlib_1_1PropertyProxy__Base.html</filename>
    <member kind="function">
      <type></type>
      <name>PropertyProxy_Base</name>
      <anchorfile>classGlib_1_1PropertyProxy__Base.html</anchorfile>
      <anchor>249bf7fbed57d8feca6280747e85cd35</anchor>
      <arglist>(ObjectBase *obj, const char *property_name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PropertyProxy_Base</name>
      <anchorfile>classGlib_1_1PropertyProxy__Base.html</anchorfile>
      <anchor>d21a12ef0a572caec3b160561f60e8ee</anchor>
      <arglist>(const PropertyProxy_Base &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>SignalProxyProperty</type>
      <name>signal_changed</name>
      <anchorfile>classGlib_1_1PropertyProxy__Base.html</anchorfile>
      <anchor>19357ed2e9492700e37215edb81fd071</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ObjectBase *</type>
      <name>get_object</name>
      <anchorfile>classGlib_1_1PropertyProxy__Base.html</anchorfile>
      <anchor>0a0360fc03da108b2748285c834c81f5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>get_name</name>
      <anchorfile>classGlib_1_1PropertyProxy__Base.html</anchorfile>
      <anchor>99f16695928aa09959de3046eaa6c266</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set_property_</name>
      <anchorfile>classGlib_1_1PropertyProxy__Base.html</anchorfile>
      <anchor>062bab7773ae2e9666a26fb6426003d2</anchor>
      <arglist>(const Glib::ValueBase &amp;value)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>get_property_</name>
      <anchorfile>classGlib_1_1PropertyProxy__Base.html</anchorfile>
      <anchor>d8d3fea5cc9fe955bd1cb29d8d37da99</anchor>
      <arglist>(Glib::ValueBase &amp;value) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reset_property_</name>
      <anchorfile>classGlib_1_1PropertyProxy__Base.html</anchorfile>
      <anchor>2551363499a510336507194725de6c43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ObjectBase *</type>
      <name>obj_</name>
      <anchorfile>classGlib_1_1PropertyProxy__Base.html</anchorfile>
      <anchor>e027890146dbc4acfa49634e7c44cce9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const char *</type>
      <name>property_name_</name>
      <anchorfile>classGlib_1_1PropertyProxy__Base.html</anchorfile>
      <anchor>f76cdd8c35935963d0f9d5975e81a726</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::QueryQuark</name>
    <filename>classGlib_1_1QueryQuark.html</filename>
    <member kind="function">
      <type></type>
      <name>QueryQuark</name>
      <anchorfile>classGlib_1_1QueryQuark.html</anchorfile>
      <anchor>4373d14f457d6fa855ba8856ab2aa7a3</anchor>
      <arglist>(const GQuark &amp;q)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QueryQuark</name>
      <anchorfile>classGlib_1_1QueryQuark.html</anchorfile>
      <anchor>f9aec4964064bfc5729d3c1dea64bfc2</anchor>
      <arglist>(const ustring &amp;s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QueryQuark</name>
      <anchorfile>classGlib_1_1QueryQuark.html</anchorfile>
      <anchor>689ea595339a8aa820889679566dad9c</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~QueryQuark</name>
      <anchorfile>classGlib_1_1QueryQuark.html</anchorfile>
      <anchor>11d61a902d6a2d7fa0320d8dccdd80ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>QueryQuark &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1QueryQuark.html</anchorfile>
      <anchor>38371df4b4b7b1f8a507cb5005926a4b</anchor>
      <arglist>(const QueryQuark &amp;q)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator ustring</name>
      <anchorfile>classGlib_1_1QueryQuark.html</anchorfile>
      <anchor>fad20a823ed00ee534d73c85c7356cbe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator GQuark</name>
      <anchorfile>classGlib_1_1QueryQuark.html</anchorfile>
      <anchor>60cc4d06c14341960cddd6210c97ecd1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GQuark</type>
      <name>id</name>
      <anchorfile>classGlib_1_1QueryQuark.html</anchorfile>
      <anchor>a242f5723b6e2f856ee8a7dabad54908</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classGlib_1_1QueryQuark.html</anchorfile>
      <anchor>9230b9306682910da0eb4c8b6109ea69</anchor>
      <arglist>(const QueryQuark &amp;a, const QueryQuark &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classGlib_1_1QueryQuark.html</anchorfile>
      <anchor>5fb42accd107c962baf7524a3b1bc41e</anchor>
      <arglist>(const QueryQuark &amp;a, const QueryQuark &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Quark</name>
    <filename>classGlib_1_1Quark.html</filename>
    <base>Glib::QueryQuark</base>
    <member kind="function">
      <type></type>
      <name>Quark</name>
      <anchorfile>classGlib_1_1Quark.html</anchorfile>
      <anchor>951c36a3aeeba482e72e7ee1e1af1d3f</anchor>
      <arglist>(const ustring &amp;s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Quark</name>
      <anchorfile>classGlib_1_1Quark.html</anchorfile>
      <anchor>6b629a0d8f6a4ba0da254b180cab4cc4</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Quark</name>
      <anchorfile>classGlib_1_1Quark.html</anchorfile>
      <anchor>f332fd59c51a2e805609af0e4be19e29</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Rand</name>
    <filename>classGlib_1_1Rand.html</filename>
    <member kind="function">
      <type></type>
      <name>Rand</name>
      <anchorfile>classGlib_1_1Rand.html</anchorfile>
      <anchor>61110e0e8ef1566076feacdb4d472f78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rand</name>
      <anchorfile>classGlib_1_1Rand.html</anchorfile>
      <anchor>cec64f502eee6193abc892e85c0c4577</anchor>
      <arglist>(guint32 seed)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Rand</name>
      <anchorfile>classGlib_1_1Rand.html</anchorfile>
      <anchor>e0c1611e959aeeafb8f9a3f73c7ac59d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_seed</name>
      <anchorfile>classGlib_1_1Rand.html</anchorfile>
      <anchor>4a545e4f20bd7e603c14d46c17d3fe4f</anchor>
      <arglist>(guint32 seed)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_bool</name>
      <anchorfile>classGlib_1_1Rand.html</anchorfile>
      <anchor>4d90f1e3ef59d0b071efa0445b6fb469</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>guint32</type>
      <name>get_int</name>
      <anchorfile>classGlib_1_1Rand.html</anchorfile>
      <anchor>22cefc85a2eb30bfcae6180a5ff33338</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>gint32</type>
      <name>get_int_range</name>
      <anchorfile>classGlib_1_1Rand.html</anchorfile>
      <anchor>182b9a36db153d316baf5efb1ece9fd7</anchor>
      <arglist>(gint32 begin, gint32 end)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_double</name>
      <anchorfile>classGlib_1_1Rand.html</anchorfile>
      <anchor>e439c4403f696ee326c2569386e99819</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_double_range</name>
      <anchorfile>classGlib_1_1Rand.html</anchorfile>
      <anchor>997d49286a48fdc484f643bf665bef86</anchor>
      <arglist>(double begin, double end)</arglist>
    </member>
    <member kind="function">
      <type>GRand *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1Rand.html</anchorfile>
      <anchor>9e0662cd37ac942a23d434ae8fe861e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GRand *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1Rand.html</anchorfile>
      <anchor>a47686d4dc285684c86879bb5dfb5a57</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::RefPtr</name>
    <filename>classGlib_1_1RefPtr.html</filename>
    <templarg>T_CppObject</templarg>
    <member kind="function">
      <type></type>
      <name>RefPtr</name>
      <anchorfile>classGlib_1_1RefPtr.html</anchorfile>
      <anchor>8b6c39656dbc5d452933b35faf352f74</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RefPtr</name>
      <anchorfile>classGlib_1_1RefPtr.html</anchorfile>
      <anchor>36b7fbe4a04bfe51f56b3c7062bb1316</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RefPtr</name>
      <anchorfile>classGlib_1_1RefPtr.html</anchorfile>
      <anchor>ca71e4ac99f37bf901ca3709a4bcf487</anchor>
      <arglist>(T_CppObject *pCppObject)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RefPtr</name>
      <anchorfile>classGlib_1_1RefPtr.html</anchorfile>
      <anchor>baf32caf7deadcabeec0fd7f95bd1d7f</anchor>
      <arglist>(const RefPtr&lt; T_CppObject &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RefPtr</name>
      <anchorfile>classGlib_1_1RefPtr.html</anchorfile>
      <anchor>98888fc0f3ce85f63be12a7a7cf96e5f</anchor>
      <arglist>(const RefPtr&lt; T_CastFrom &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classGlib_1_1RefPtr.html</anchorfile>
      <anchor>b54eb64fe0e872a0b88119107a5ba1f3</anchor>
      <arglist>(RefPtr&lt; T_CppObject &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>RefPtr&lt; T_CppObject &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1RefPtr.html</anchorfile>
      <anchor>80ea91e3e0e0c460f941266980e14416</anchor>
      <arglist>(const RefPtr&lt; T_CppObject &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>RefPtr&lt; T_CppObject &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1RefPtr.html</anchorfile>
      <anchor>36aa3105afb9b4787aad014cf347deb4</anchor>
      <arglist>(const RefPtr&lt; T_CastFrom &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classGlib_1_1RefPtr.html</anchorfile>
      <anchor>94830ac72b547040600ba157af592a93</anchor>
      <arglist>(const RefPtr&lt; T_CppObject &gt; &amp;src) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classGlib_1_1RefPtr.html</anchorfile>
      <anchor>18d79f08aeea24f8fdc6ed6f94c428fb</anchor>
      <arglist>(const RefPtr&lt; T_CppObject &gt; &amp;src) const </arglist>
    </member>
    <member kind="function">
      <type>T_CppObject *</type>
      <name>operator-&gt;</name>
      <anchorfile>classGlib_1_1RefPtr.html</anchorfile>
      <anchor>62cd21eed81024435a6ec778e991365c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classGlib_1_1RefPtr.html</anchorfile>
      <anchor>8a7604cb37dea79a1f3e4015621bce46</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classGlib_1_1RefPtr.html</anchorfile>
      <anchor>b7fb103f02d4a0fb21d7a8d0824047cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RefPtr&lt; T_CppObject &gt;</type>
      <name>cast_dynamic</name>
      <anchorfile>classGlib_1_1RefPtr.html</anchorfile>
      <anchor>5315f011eeb21ec3858b5f7e8e72a9d1</anchor>
      <arglist>(const RefPtr&lt; T_CastFrom &gt; &amp;src)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RefPtr&lt; T_CppObject &gt;</type>
      <name>cast_static</name>
      <anchorfile>classGlib_1_1RefPtr.html</anchorfile>
      <anchor>548fd6f5629a269e6ac0fd3db9c4fe6b</anchor>
      <arglist>(const RefPtr&lt; T_CastFrom &gt; &amp;src)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RefPtr&lt; T_CppObject &gt;</type>
      <name>cast_const</name>
      <anchorfile>classGlib_1_1RefPtr.html</anchorfile>
      <anchor>7891cd91b8a2f6d68226574bd21fe193</anchor>
      <arglist>(const RefPtr&lt; T_CastFrom &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classGlib_1_1RefPtr.html</anchorfile>
      <anchor>a8ae0fea1bca6a3b9676174adf07a2c6</anchor>
      <arglist>(RefPtr&lt; T_CppObject &gt; &amp;lhs, RefPtr&lt; T_CppObject &gt; &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::ShellError</name>
    <filename>classGlib_1_1ShellError.html</filename>
    <base>Glib::Error</base>
    <member kind="enumvalue">
      <type>@</type>
      <name>BAD_QUOTING</name>
      <anchorfile>classGlib_1_1ShellError.html</anchorfile>
      <anchor>e36e02f4bf8e48d4fe678b30b530043587a1f1990f15ec29470015c546099f15</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>EMPTY_STRING</name>
      <anchorfile>classGlib_1_1ShellError.html</anchorfile>
      <anchor>e36e02f4bf8e48d4fe678b30b5300435f5f165fd69f79da629715dd146065b3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FAILED</name>
      <anchorfile>classGlib_1_1ShellError.html</anchorfile>
      <anchor>e36e02f4bf8e48d4fe678b30b530043526b92b828bad17cb4bf1fba0ea6b51d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Code</name>
      <anchor>e36e02f4bf8e48d4fe678b30b5300435</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_QUOTING</name>
      <anchor>e36e02f4bf8e48d4fe678b30b530043587a1f1990f15ec29470015c546099f15</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EMPTY_STRING</name>
      <anchor>e36e02f4bf8e48d4fe678b30b5300435f5f165fd69f79da629715dd146065b3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FAILED</name>
      <anchor>e36e02f4bf8e48d4fe678b30b530043526b92b828bad17cb4bf1fba0ea6b51d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ShellError</name>
      <anchorfile>classGlib_1_1ShellError.html</anchorfile>
      <anchor>2ad6bcad67427196b05b0be32703d148</anchor>
      <arglist>(Code error_code, const Glib::ustring &amp;error_message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ShellError</name>
      <anchorfile>classGlib_1_1ShellError.html</anchorfile>
      <anchor>3398d25526f1c1262c754320e815ba32</anchor>
      <arglist>(GError *gobject)</arglist>
    </member>
    <member kind="function">
      <type>Code</type>
      <name>code</name>
      <anchorfile>classGlib_1_1ShellError.html</anchorfile>
      <anchor>f6494bba8a72c2aed2687f226f9cbacb</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::SignalProxyBase</name>
    <filename>classGlib_1_1SignalProxyBase.html</filename>
    <member kind="function">
      <type></type>
      <name>SignalProxyBase</name>
      <anchorfile>classGlib_1_1SignalProxyBase.html</anchorfile>
      <anchor>f340b9d05531bbf31e50d3b0ec6dec06</anchor>
      <arglist>(Glib::ObjectBase *obj)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ObjectBase *</type>
      <name>obj_</name>
      <anchorfile>classGlib_1_1SignalProxyBase.html</anchorfile>
      <anchor>f0a2ac9d830f483801c24d551e1eb57c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::SignalProxyNormal</name>
    <filename>classGlib_1_1SignalProxyNormal.html</filename>
    <base>Glib::SignalProxyBase</base>
    <member kind="function">
      <type></type>
      <name>~SignalProxyNormal</name>
      <anchorfile>classGlib_1_1SignalProxyNormal.html</anchorfile>
      <anchor>cb9ee0a3481abefb01456306c640a8c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emission_stop</name>
      <anchorfile>classGlib_1_1SignalProxyNormal.html</anchorfile>
      <anchor>8142f5d5f986aea2ce8bfb22d8d38cf2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SignalProxyNormal</name>
      <anchorfile>classGlib_1_1SignalProxyNormal.html</anchorfile>
      <anchor>17cc3a55165dfbf0b2681aace390e82c</anchor>
      <arglist>(Glib::ObjectBase *obj, const SignalProxyInfo *info)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>sigc::slot_base &amp;</type>
      <name>connect_</name>
      <anchorfile>classGlib_1_1SignalProxyNormal.html</anchorfile>
      <anchor>051e24c3af5f41c269351d49a8d3a1aa</anchor>
      <arglist>(const sigc::slot_base &amp;slot, bool after)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>sigc::slot_base &amp;</type>
      <name>connect_notify_</name>
      <anchorfile>classGlib_1_1SignalProxyNormal.html</anchorfile>
      <anchor>2b05fbe06539c4fb26e2afc7fb2b8bc6</anchor>
      <arglist>(const sigc::slot_base &amp;slot, bool after)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::SignalProxy0</name>
    <filename>classGlib_1_1SignalProxy0.html</filename>
    <templarg>R</templarg>
    <base>Glib::SignalProxyNormal</base>
    <member kind="typedef">
      <type>sigc::slot&lt; R &gt;</type>
      <name>SlotType</name>
      <anchorfile>classGlib_1_1SignalProxy0.html</anchorfile>
      <anchor>a4300c4457e00ddea67b8acabfeabba2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sigc::slot&lt; void &gt;</type>
      <name>VoidSlotType</name>
      <anchorfile>classGlib_1_1SignalProxy0.html</anchorfile>
      <anchor>ac0788d3e60fb9447c3a7609a106dc4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SignalProxy0</name>
      <anchorfile>classGlib_1_1SignalProxy0.html</anchorfile>
      <anchor>315e1db5a8d1b5bab0c505b5450d964a</anchor>
      <arglist>(ObjectBase *obj, const SignalProxyInfo *info)</arglist>
    </member>
    <member kind="function">
      <type>sigc::connection</type>
      <name>connect</name>
      <anchorfile>classGlib_1_1SignalProxy0.html</anchorfile>
      <anchor>d6c26072ea85fe6e61895b0750421e92</anchor>
      <arglist>(const SlotType &amp;slot, bool after=true)</arglist>
    </member>
    <member kind="function">
      <type>sigc::connection</type>
      <name>connect_notify</name>
      <anchorfile>classGlib_1_1SignalProxy0.html</anchorfile>
      <anchor>90322c64ca5a87ad417b54e03d0fece6</anchor>
      <arglist>(const VoidSlotType &amp;slot, bool after=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::SignalProxy1</name>
    <filename>classGlib_1_1SignalProxy1.html</filename>
    <templarg>R</templarg>
    <templarg>P1</templarg>
    <base>Glib::SignalProxyNormal</base>
    <member kind="typedef">
      <type>sigc::slot&lt; R, P1 &gt;</type>
      <name>SlotType</name>
      <anchorfile>classGlib_1_1SignalProxy1.html</anchorfile>
      <anchor>74fd55d7458f04ca1fbb90710f50b664</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sigc::slot&lt; void, P1 &gt;</type>
      <name>VoidSlotType</name>
      <anchorfile>classGlib_1_1SignalProxy1.html</anchorfile>
      <anchor>415fd197f0d86750931a1c48ed4c284f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SignalProxy1</name>
      <anchorfile>classGlib_1_1SignalProxy1.html</anchorfile>
      <anchor>2dd1136fffb5f33c26a6d8d5018b3580</anchor>
      <arglist>(ObjectBase *obj, const SignalProxyInfo *info)</arglist>
    </member>
    <member kind="function">
      <type>sigc::connection</type>
      <name>connect</name>
      <anchorfile>classGlib_1_1SignalProxy1.html</anchorfile>
      <anchor>22fdfb42d11a9a838bc50377e7c9e1a6</anchor>
      <arglist>(const SlotType &amp;slot, bool after=true)</arglist>
    </member>
    <member kind="function">
      <type>sigc::connection</type>
      <name>connect_notify</name>
      <anchorfile>classGlib_1_1SignalProxy1.html</anchorfile>
      <anchor>1dd40d7c3475124bb78053805fbde3f8</anchor>
      <arglist>(const VoidSlotType &amp;slot, bool after=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::SignalProxy2</name>
    <filename>classGlib_1_1SignalProxy2.html</filename>
    <templarg>R</templarg>
    <templarg>P1</templarg>
    <templarg>P2</templarg>
    <base>Glib::SignalProxyNormal</base>
    <member kind="typedef">
      <type>sigc::slot&lt; R, P1, P2 &gt;</type>
      <name>SlotType</name>
      <anchorfile>classGlib_1_1SignalProxy2.html</anchorfile>
      <anchor>7fd887895fb7faaafd71497222d8b895</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sigc::slot&lt; void, P1, P2 &gt;</type>
      <name>VoidSlotType</name>
      <anchorfile>classGlib_1_1SignalProxy2.html</anchorfile>
      <anchor>a3768003cbf85e170e5268ce0153cc28</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SignalProxy2</name>
      <anchorfile>classGlib_1_1SignalProxy2.html</anchorfile>
      <anchor>cc63a503d2e03b7fead353796a16aa4a</anchor>
      <arglist>(ObjectBase *obj, const SignalProxyInfo *info)</arglist>
    </member>
    <member kind="function">
      <type>sigc::connection</type>
      <name>connect</name>
      <anchorfile>classGlib_1_1SignalProxy2.html</anchorfile>
      <anchor>66b5747c9db52041b508bc889ff36fcb</anchor>
      <arglist>(const SlotType &amp;slot, bool after=true)</arglist>
    </member>
    <member kind="function">
      <type>sigc::connection</type>
      <name>connect_notify</name>
      <anchorfile>classGlib_1_1SignalProxy2.html</anchorfile>
      <anchor>f3711e737bbcbce60105da0c54d573d1</anchor>
      <arglist>(const VoidSlotType &amp;slot, bool after=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::SignalProxy3</name>
    <filename>classGlib_1_1SignalProxy3.html</filename>
    <templarg>R</templarg>
    <templarg>P1</templarg>
    <templarg>P2</templarg>
    <templarg>P3</templarg>
    <base>Glib::SignalProxyNormal</base>
    <member kind="typedef">
      <type>sigc::slot&lt; R, P1, P2, P3 &gt;</type>
      <name>SlotType</name>
      <anchorfile>classGlib_1_1SignalProxy3.html</anchorfile>
      <anchor>b5d5438ce6ed3166b6c52d25846c81c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sigc::slot&lt; void, P1, P2, P3 &gt;</type>
      <name>VoidSlotType</name>
      <anchorfile>classGlib_1_1SignalProxy3.html</anchorfile>
      <anchor>42233030672ff6bec3c0dafd2a8466d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SignalProxy3</name>
      <anchorfile>classGlib_1_1SignalProxy3.html</anchorfile>
      <anchor>3b4115c9c7c64a716232900dfdcfcde5</anchor>
      <arglist>(ObjectBase *obj, const SignalProxyInfo *info)</arglist>
    </member>
    <member kind="function">
      <type>sigc::connection</type>
      <name>connect</name>
      <anchorfile>classGlib_1_1SignalProxy3.html</anchorfile>
      <anchor>1787ab4cf55c107e3cf89c76b1f080b5</anchor>
      <arglist>(const SlotType &amp;slot, bool after=true)</arglist>
    </member>
    <member kind="function">
      <type>sigc::connection</type>
      <name>connect_notify</name>
      <anchorfile>classGlib_1_1SignalProxy3.html</anchorfile>
      <anchor>7c36c3b4bae5eaed0eb6268abab7b247</anchor>
      <arglist>(const VoidSlotType &amp;slot, bool after=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::SignalProxy4</name>
    <filename>classGlib_1_1SignalProxy4.html</filename>
    <templarg>R</templarg>
    <templarg>P1</templarg>
    <templarg>P2</templarg>
    <templarg>P3</templarg>
    <templarg>P4</templarg>
    <base>Glib::SignalProxyNormal</base>
    <member kind="typedef">
      <type>sigc::slot&lt; R, P1, P2, P3, P4 &gt;</type>
      <name>SlotType</name>
      <anchorfile>classGlib_1_1SignalProxy4.html</anchorfile>
      <anchor>c2e60a471ecf54d19180816735c4d4c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sigc::slot&lt; void, P1, P2, P3, P4 &gt;</type>
      <name>VoidSlotType</name>
      <anchorfile>classGlib_1_1SignalProxy4.html</anchorfile>
      <anchor>048515fb890163551ff6394f1a8086e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SignalProxy4</name>
      <anchorfile>classGlib_1_1SignalProxy4.html</anchorfile>
      <anchor>45e43eedffc2d6e4590032a1b2970a92</anchor>
      <arglist>(ObjectBase *obj, const SignalProxyInfo *info)</arglist>
    </member>
    <member kind="function">
      <type>sigc::connection</type>
      <name>connect</name>
      <anchorfile>classGlib_1_1SignalProxy4.html</anchorfile>
      <anchor>ba46198055c59fe77a23f9aeb73bd6e9</anchor>
      <arglist>(const SlotType &amp;slot, bool after=true)</arglist>
    </member>
    <member kind="function">
      <type>sigc::connection</type>
      <name>connect_notify</name>
      <anchorfile>classGlib_1_1SignalProxy4.html</anchorfile>
      <anchor>d0a0c683c2a4e6cb6256e8394d74858e</anchor>
      <arglist>(const VoidSlotType &amp;slot, bool after=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::SignalProxy5</name>
    <filename>classGlib_1_1SignalProxy5.html</filename>
    <templarg>R</templarg>
    <templarg>P1</templarg>
    <templarg>P2</templarg>
    <templarg>P3</templarg>
    <templarg>P4</templarg>
    <templarg>P5</templarg>
    <base>Glib::SignalProxyNormal</base>
    <member kind="typedef">
      <type>sigc::slot&lt; R, P1, P2, P3, P4, P5 &gt;</type>
      <name>SlotType</name>
      <anchorfile>classGlib_1_1SignalProxy5.html</anchorfile>
      <anchor>3034ac856495c243c3605228295e19da</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sigc::slot&lt; void, P1, P2, P3, P4, P5 &gt;</type>
      <name>VoidSlotType</name>
      <anchorfile>classGlib_1_1SignalProxy5.html</anchorfile>
      <anchor>269a9b11fa49a786f93d874c5d69d705</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SignalProxy5</name>
      <anchorfile>classGlib_1_1SignalProxy5.html</anchorfile>
      <anchor>66342621153089f9ba317d42277a8ffd</anchor>
      <arglist>(ObjectBase *obj, const SignalProxyInfo *info)</arglist>
    </member>
    <member kind="function">
      <type>sigc::connection</type>
      <name>connect</name>
      <anchorfile>classGlib_1_1SignalProxy5.html</anchorfile>
      <anchor>eb7dfcbe15052cec862881d007860a88</anchor>
      <arglist>(const SlotType &amp;slot, bool after=true)</arglist>
    </member>
    <member kind="function">
      <type>sigc::connection</type>
      <name>connect_notify</name>
      <anchorfile>classGlib_1_1SignalProxy5.html</anchorfile>
      <anchor>742cf5ed309d74f225017c1c0a73b511</anchor>
      <arglist>(const VoidSlotType &amp;slot, bool after=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::SignalProxy6</name>
    <filename>classGlib_1_1SignalProxy6.html</filename>
    <templarg>R</templarg>
    <templarg>P1</templarg>
    <templarg>P2</templarg>
    <templarg>P3</templarg>
    <templarg>P4</templarg>
    <templarg>P5</templarg>
    <templarg>P6</templarg>
    <base>Glib::SignalProxyNormal</base>
    <member kind="typedef">
      <type>sigc::slot&lt; R, P1, P2, P3, P4, P5, P6 &gt;</type>
      <name>SlotType</name>
      <anchorfile>classGlib_1_1SignalProxy6.html</anchorfile>
      <anchor>ae4a380b85f13a825abb7ebc6a256925</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sigc::slot&lt; void, P1, P2, P3, P4, P5, P6 &gt;</type>
      <name>VoidSlotType</name>
      <anchorfile>classGlib_1_1SignalProxy6.html</anchorfile>
      <anchor>6ec6f095e6f25507cf5a9ef924dccdbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SignalProxy6</name>
      <anchorfile>classGlib_1_1SignalProxy6.html</anchorfile>
      <anchor>8f10bc1c1fd13b5413c7c7329ce1da05</anchor>
      <arglist>(ObjectBase *obj, const SignalProxyInfo *info)</arglist>
    </member>
    <member kind="function">
      <type>sigc::connection</type>
      <name>connect</name>
      <anchorfile>classGlib_1_1SignalProxy6.html</anchorfile>
      <anchor>9c812f443964c3ccee3ff1b3af20c15f</anchor>
      <arglist>(const SlotType &amp;slot, bool after=true)</arglist>
    </member>
    <member kind="function">
      <type>sigc::connection</type>
      <name>connect_notify</name>
      <anchorfile>classGlib_1_1SignalProxy6.html</anchorfile>
      <anchor>ccd447826dc93315aec8a764dc3785d4</anchor>
      <arglist>(const VoidSlotType &amp;slot, bool after=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::SignalProxyConnectionNode</name>
    <filename>classGlib_1_1SignalProxyConnectionNode.html</filename>
    <member kind="function">
      <type></type>
      <name>SignalProxyConnectionNode</name>
      <anchorfile>classGlib_1_1SignalProxyConnectionNode.html</anchorfile>
      <anchor>7b4e9e187c1ff7e69603c131026cf5ba</anchor>
      <arglist>(const sigc::slot_base &amp;slot, GObject *gobject)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>notify</name>
      <anchorfile>classGlib_1_1SignalProxyConnectionNode.html</anchorfile>
      <anchor>1cee6bd0f38de298923d92808d295c6c</anchor>
      <arglist>(void *data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy_notify_handler</name>
      <anchorfile>classGlib_1_1SignalProxyConnectionNode.html</anchorfile>
      <anchor>84488e1035061c2dbc1a646297c33842</anchor>
      <arglist>(gpointer data, GClosure *closure)</arglist>
    </member>
    <member kind="variable">
      <type>gulong</type>
      <name>connection_id_</name>
      <anchorfile>classGlib_1_1SignalProxyConnectionNode.html</anchorfile>
      <anchor>5a543b85ccfd364b088958845f3434fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sigc::slot_base</type>
      <name>slot_</name>
      <anchorfile>classGlib_1_1SignalProxyConnectionNode.html</anchorfile>
      <anchor>2a64256c75d279897c9d8a4f917cb0f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GObject *</type>
      <name>object_</name>
      <anchorfile>classGlib_1_1SignalProxyConnectionNode.html</anchorfile>
      <anchor>ec357187ee02cecc998e13e9e17e897e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::SListHandle</name>
    <filename>classGlib_1_1SListHandle.html</filename>
    <templarg>T</templarg>
    <templarg>Tr</templarg>
    <member kind="typedef">
      <type>Tr::CppType</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1SListHandle.html</anchorfile>
      <anchor>1a0f5b4ea6dfa404fd750e1d5a299cb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Tr::CType</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1SListHandle.html</anchorfile>
      <anchor>e27beb74adc3d2b29e4f162ecdac2daf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CppType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1SListHandle.html</anchorfile>
      <anchor>bf106ec7c2ad5f59a05dccbb9cbabb9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>size_t</type>
      <name>size_type</name>
      <anchorfile>classGlib_1_1SListHandle.html</anchorfile>
      <anchor>ced9c2ca535ce9b75b692f1c13f18e94</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classGlib_1_1SListHandle.html</anchorfile>
      <anchor>830d595698763d001820cd2521c83da5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Glib::Container_Helpers::SListHandleIterator&lt; Tr &gt;</type>
      <name>const_iterator</name>
      <anchorfile>classGlib_1_1SListHandle.html</anchorfile>
      <anchor>d9a2637f0adec0d2dc56b8f26aaa9bcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Glib::Container_Helpers::SListHandleIterator&lt; Tr &gt;</type>
      <name>iterator</name>
      <anchorfile>classGlib_1_1SListHandle.html</anchorfile>
      <anchor>37ffca039dc422b61f08981a87b62838</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SListHandle</name>
      <anchorfile>classGlib_1_1SListHandle.html</anchorfile>
      <anchor>6680123784dcdc2528c5e4677d383944</anchor>
      <arglist>(const Cont &amp;container)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SListHandle</name>
      <anchorfile>classGlib_1_1SListHandle.html</anchorfile>
      <anchor>14f6477eed92aeda49ade71915a6a172</anchor>
      <arglist>(GSList *glist, Glib::OwnershipType ownership)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SListHandle</name>
      <anchorfile>classGlib_1_1SListHandle.html</anchorfile>
      <anchor>0c35999d203ce8723ed2b7fd0579887e</anchor>
      <arglist>(const SListHandle&lt; T, Tr &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SListHandle</name>
      <anchorfile>classGlib_1_1SListHandle.html</anchorfile>
      <anchor>fe0de87e1ce88e589d9ea62e1b3d1f73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classGlib_1_1SListHandle.html</anchorfile>
      <anchor>4e5ceedb31cd4551f928db6b3bcbb414</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classGlib_1_1SListHandle.html</anchorfile>
      <anchor>6cab595825c6ddf437ca9c35e1222835</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::vector</name>
      <anchorfile>classGlib_1_1SListHandle.html</anchorfile>
      <anchor>5905a3f65b0a56656df4190e98e1bc71</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::deque</name>
      <anchorfile>classGlib_1_1SListHandle.html</anchorfile>
      <anchor>490b3489393b933ae5e6288c14ccce49</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::list</name>
      <anchorfile>classGlib_1_1SListHandle.html</anchorfile>
      <anchor>8acfd0c910ccec9a7963389d3fa82382</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign_to</name>
      <anchorfile>classGlib_1_1SListHandle.html</anchorfile>
      <anchor>6816037b792a8a89b9b19094351a8857</anchor>
      <arglist>(Cont &amp;container) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classGlib_1_1SListHandle.html</anchorfile>
      <anchor>dc87e634bd1b1a62ae5b3a0773cf2b0f</anchor>
      <arglist>(Out pdest) const </arglist>
    </member>
    <member kind="function">
      <type>GSList *</type>
      <name>data</name>
      <anchorfile>classGlib_1_1SListHandle.html</anchorfile>
      <anchor>6eecd613408202c9fa0ee68c6acf51cd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>classGlib_1_1SListHandle.html</anchorfile>
      <anchor>7c6d991e85fb74779bc4be046318a8f5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classGlib_1_1SListHandle.html</anchorfile>
      <anchor>60e282c29d1e15cc25d161afb0de0f9f</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::SpawnError</name>
    <filename>classGlib_1_1SpawnError.html</filename>
    <base>Glib::Error</base>
    <member kind="enumvalue">
      <type>@</type>
      <name>FORK</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>fb7753661f7b0607951aa8881380ed1bab272f8c8364b7fe1f2c1f9ce6a4d932</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>READ</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>fb7753661f7b0607951aa8881380ed1b37ffd619ad4510d59b4649b2fa049f2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CHDIR</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>fb7753661f7b0607951aa8881380ed1bc5eac452082cfe3028beff42b0d6b691</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ACCES</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>fb7753661f7b0607951aa8881380ed1b10d4616b0b9d9d15fc578b1f8d24bd7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PERM</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>fb7753661f7b0607951aa8881380ed1bdb86e737d1aad71dd6532ac538f597ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TOOBIG</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>fb7753661f7b0607951aa8881380ed1ba54cc8357ae3549f0a9632150abc79c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NOEXEC</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>fb7753661f7b0607951aa8881380ed1b6c56a0a76b5c1592a9f27360b6185198</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NAMETOOLONG</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>fb7753661f7b0607951aa8881380ed1b935d2d515caf353cc72e3d83fe6ca73f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NOENT</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>fb7753661f7b0607951aa8881380ed1b3f2b31be9ce24ed5ab81b7bcbdaa692f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NOMEM</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>fb7753661f7b0607951aa8881380ed1bf4ec02a278d149f15c321a08f178d9f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NOTDIR</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>fb7753661f7b0607951aa8881380ed1bb036aa59800c9cc46f7f77589a834972</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LOOP</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>fb7753661f7b0607951aa8881380ed1bce672c6e10f2d3d902556bbec469ef79</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TXTBUSY</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>fb7753661f7b0607951aa8881380ed1ba4c93d16fd3f7325c7a5c28dba3bc3ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IO</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>fb7753661f7b0607951aa8881380ed1b945a3a6fefecec1a9117e3c004ac7b29</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NFILE</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>fb7753661f7b0607951aa8881380ed1bcf9724846be21b1bf67459439d70e7ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MFILE</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>fb7753661f7b0607951aa8881380ed1b26fed21264f3d266ecf7717bd95a9d3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>INVAL</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>fb7753661f7b0607951aa8881380ed1bfa94e4842081fb87483c95de9d3eb73e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ISDIR</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>fb7753661f7b0607951aa8881380ed1bcd5f1c45eae2de57269e5eeb0c56fd5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LIBBAD</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>fb7753661f7b0607951aa8881380ed1b663c56fe66788d6a294f435d7f9824f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Code</name>
      <anchor>fb7753661f7b0607951aa8881380ed1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FORK</name>
      <anchor>fb7753661f7b0607951aa8881380ed1bab272f8c8364b7fe1f2c1f9ce6a4d932</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>READ</name>
      <anchor>fb7753661f7b0607951aa8881380ed1b37ffd619ad4510d59b4649b2fa049f2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHDIR</name>
      <anchor>fb7753661f7b0607951aa8881380ed1bc5eac452082cfe3028beff42b0d6b691</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACCES</name>
      <anchor>fb7753661f7b0607951aa8881380ed1b10d4616b0b9d9d15fc578b1f8d24bd7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PERM</name>
      <anchor>fb7753661f7b0607951aa8881380ed1bdb86e737d1aad71dd6532ac538f597ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TOOBIG</name>
      <anchor>fb7753661f7b0607951aa8881380ed1ba54cc8357ae3549f0a9632150abc79c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOEXEC</name>
      <anchor>fb7753661f7b0607951aa8881380ed1b6c56a0a76b5c1592a9f27360b6185198</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NAMETOOLONG</name>
      <anchor>fb7753661f7b0607951aa8881380ed1b935d2d515caf353cc72e3d83fe6ca73f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOENT</name>
      <anchor>fb7753661f7b0607951aa8881380ed1b3f2b31be9ce24ed5ab81b7bcbdaa692f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOMEM</name>
      <anchor>fb7753661f7b0607951aa8881380ed1bf4ec02a278d149f15c321a08f178d9f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOTDIR</name>
      <anchor>fb7753661f7b0607951aa8881380ed1bb036aa59800c9cc46f7f77589a834972</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOOP</name>
      <anchor>fb7753661f7b0607951aa8881380ed1bce672c6e10f2d3d902556bbec469ef79</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TXTBUSY</name>
      <anchor>fb7753661f7b0607951aa8881380ed1ba4c93d16fd3f7325c7a5c28dba3bc3ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO</name>
      <anchor>fb7753661f7b0607951aa8881380ed1b945a3a6fefecec1a9117e3c004ac7b29</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NFILE</name>
      <anchor>fb7753661f7b0607951aa8881380ed1bcf9724846be21b1bf67459439d70e7ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MFILE</name>
      <anchor>fb7753661f7b0607951aa8881380ed1b26fed21264f3d266ecf7717bd95a9d3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVAL</name>
      <anchor>fb7753661f7b0607951aa8881380ed1bfa94e4842081fb87483c95de9d3eb73e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ISDIR</name>
      <anchor>fb7753661f7b0607951aa8881380ed1bcd5f1c45eae2de57269e5eeb0c56fd5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LIBBAD</name>
      <anchor>fb7753661f7b0607951aa8881380ed1b663c56fe66788d6a294f435d7f9824f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpawnError</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>29eb55d60f444f4d84e1a505defa2a10</anchor>
      <arglist>(Code error_code, const Glib::ustring &amp;error_message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpawnError</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>7a3b357b3521a7f28c1517429d57eb31</anchor>
      <arglist>(GError *gobject)</arglist>
    </member>
    <member kind="function">
      <type>Code</type>
      <name>code</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>42aa5204c37243835eb2c51df579b610</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::StreamIOChannel</name>
    <filename>classGlib_1_1StreamIOChannel.html</filename>
    <base>Glib::IOChannel</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~StreamIOChannel</name>
      <anchorfile>classGlib_1_1StreamIOChannel.html</anchorfile>
      <anchor>b2258ca857b53e12918f4acff37b69bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; StreamIOChannel &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1StreamIOChannel.html</anchorfile>
      <anchor>f05ec7633a97902748738417ae742d5d</anchor>
      <arglist>(std::istream &amp;stream)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; StreamIOChannel &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1StreamIOChannel.html</anchorfile>
      <anchor>eb3177836df152b6b4a4debacbffbb16</anchor>
      <arglist>(std::ostream &amp;stream)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; StreamIOChannel &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1StreamIOChannel.html</anchorfile>
      <anchor>a8b797316447a92a1cd657799922b2da</anchor>
      <arglist>(std::iostream &amp;stream)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>StreamIOChannel</name>
      <anchorfile>classGlib_1_1StreamIOChannel.html</anchorfile>
      <anchor>ef1abb0c118ab43a97b00a860ccf6204</anchor>
      <arglist>(std::istream *stream_in, std::ostream *stream_out)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IOStatus</type>
      <name>read_vfunc</name>
      <anchorfile>classGlib_1_1StreamIOChannel.html</anchorfile>
      <anchor>ad85c2e9149428db83575ff98bdac482</anchor>
      <arglist>(char *buf, gsize count, gsize &amp;bytes_read)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IOStatus</type>
      <name>write_vfunc</name>
      <anchorfile>classGlib_1_1StreamIOChannel.html</anchorfile>
      <anchor>9b6ce8cea1b948c1d408c946c4ad27eb</anchor>
      <arglist>(const char *buf, gsize count, gsize &amp;bytes_written)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IOStatus</type>
      <name>seek_vfunc</name>
      <anchorfile>classGlib_1_1StreamIOChannel.html</anchorfile>
      <anchor>82c4a6b077c542d1b79c23ecc6b1772f</anchor>
      <arglist>(gint64 offset, SeekType type)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IOStatus</type>
      <name>close_vfunc</name>
      <anchorfile>classGlib_1_1StreamIOChannel.html</anchorfile>
      <anchor>20deabe6a3bc6b1488975375e61af626</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IOStatus</type>
      <name>set_flags_vfunc</name>
      <anchorfile>classGlib_1_1StreamIOChannel.html</anchorfile>
      <anchor>dd1a29876a6d3b553f41ef21dd654f67</anchor>
      <arglist>(IOFlags flags)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IOFlags</type>
      <name>get_flags_vfunc</name>
      <anchorfile>classGlib_1_1StreamIOChannel.html</anchorfile>
      <anchor>29a782e3ab6d7fc1b77f612c97c195f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Glib::RefPtr&lt; Glib::Source &gt;</type>
      <name>create_watch_vfunc</name>
      <anchorfile>classGlib_1_1StreamIOChannel.html</anchorfile>
      <anchor>77595f06e524cd2cb3dc7958fd274f4f</anchor>
      <arglist>(IOCondition cond)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::istream *</type>
      <name>stream_in_</name>
      <anchorfile>classGlib_1_1StreamIOChannel.html</anchorfile>
      <anchor>81a491b37d051a0ea5a3c3f8177d74ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::ostream *</type>
      <name>stream_out_</name>
      <anchorfile>classGlib_1_1StreamIOChannel.html</anchorfile>
      <anchor>83bcd47600a9a4ab6c3f500479f683c5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::ThreadError</name>
    <filename>classGlib_1_1ThreadError.html</filename>
    <base>Glib::Error</base>
    <member kind="enumvalue">
      <type>@</type>
      <name>AGAIN</name>
      <anchorfile>classGlib_1_1ThreadError.html</anchorfile>
      <anchor>6b42834d5d29377db4aa1c4a79f6395277b06db0f346d5946ff02dbbb9b629a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Code</name>
      <anchor>6b42834d5d29377db4aa1c4a79f63952</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AGAIN</name>
      <anchor>6b42834d5d29377db4aa1c4a79f6395277b06db0f346d5946ff02dbbb9b629a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ThreadError</name>
      <anchorfile>classGlib_1_1ThreadError.html</anchorfile>
      <anchor>ac882a2e31fd93acfb341ca0ed3f1192</anchor>
      <arglist>(Code error_code, const Glib::ustring &amp;error_message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ThreadError</name>
      <anchorfile>classGlib_1_1ThreadError.html</anchorfile>
      <anchor>51e5c3c760bfa1b7867a29eb1637ea1f</anchor>
      <arglist>(GError *gobject)</arglist>
    </member>
    <member kind="function">
      <type>Code</type>
      <name>code</name>
      <anchorfile>classGlib_1_1ThreadError.html</anchorfile>
      <anchor>6a73deb2a8ea71fb40bc5b93ba2dda56</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Thread</name>
    <filename>classGlib_1_1Thread.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>joinable</name>
      <anchorfile>classGlib_1_1Thread.html</anchorfile>
      <anchor>9feee4b860d9928f86b9d255e2f2b133</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>join</name>
      <anchorfile>classGlib_1_1Thread.html</anchorfile>
      <anchor>b95e51699279fd84c9577c45d76b0d8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_priority</name>
      <anchorfile>classGlib_1_1Thread.html</anchorfile>
      <anchor>3b323f981147d7eb4b4bd03f3fbdccf5</anchor>
      <arglist>(ThreadPriority priority)</arglist>
    </member>
    <member kind="function">
      <type>ThreadPriority</type>
      <name>get_priority</name>
      <anchorfile>classGlib_1_1Thread.html</anchorfile>
      <anchor>28d1bcf53d846b8b0d75b93178a614ab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GThread *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1Thread.html</anchorfile>
      <anchor>28fbc6c46928a90d82114fa9b6b63196</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GThread *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1Thread.html</anchorfile>
      <anchor>351fa5fb621a394e28037c4f50ab69ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Thread *</type>
      <name>create</name>
      <anchorfile>classGlib_1_1Thread.html</anchorfile>
      <anchor>b165854ff2fc9b454ee4d97050485782</anchor>
      <arglist>(const sigc::slot&lt; void &gt; &amp;slot, bool joinable)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Thread *</type>
      <name>create</name>
      <anchorfile>classGlib_1_1Thread.html</anchorfile>
      <anchor>f30a7a8b037c7c7a3802aa2a22cf612d</anchor>
      <arglist>(const sigc::slot&lt; void &gt; &amp;slot, unsigned long stack_size, bool joinable, bool bound, ThreadPriority priority)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Thread *</type>
      <name>self</name>
      <anchorfile>classGlib_1_1Thread.html</anchorfile>
      <anchor>9db6864c35701b1c179f48217ab76cca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>yield</name>
      <anchorfile>classGlib_1_1Thread.html</anchorfile>
      <anchor>cad8be7a8093ef3aca32344264461011</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Thread *</type>
      <name>wrap</name>
      <anchorfile>group__Threads.html</anchorfile>
      <anchor>g6bfbb3119eaac9fa8cb725aa1e82f61e</anchor>
      <arglist>(GThread *gobject)</arglist>
    </member>
    <class kind="class">Glib::Thread::Exit</class>
  </compound>
  <compound kind="class">
    <name>Glib::Thread::Exit</name>
    <filename>classGlib_1_1Thread_1_1Exit.html</filename>
  </compound>
  <compound kind="struct">
    <name>Glib::StaticMutex</name>
    <filename>structGlib_1_1StaticMutex.html</filename>
    <member kind="function">
      <type>void</type>
      <name>lock</name>
      <anchorfile>structGlib_1_1StaticMutex.html</anchorfile>
      <anchor>7052b89e18e8c7fa2c987dc429a01296</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>trylock</name>
      <anchorfile>structGlib_1_1StaticMutex.html</anchorfile>
      <anchor>874e22be27896359ecb4008cd6e6f8ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlock</name>
      <anchorfile>structGlib_1_1StaticMutex.html</anchorfile>
      <anchor>539181ea215c00c84e90d4f7a0131e4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Mutex &amp;</name>
      <anchorfile>structGlib_1_1StaticMutex.html</anchorfile>
      <anchor>144e7de846446e2ce1740adc7bf0dc9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GStaticMutex *</type>
      <name>gobj</name>
      <anchorfile>structGlib_1_1StaticMutex.html</anchorfile>
      <anchor>381d25917d27c665d3db638b4aa8b743</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="define">
      <type></type>
      <name>GLIBMM_STATIC_MUTEX_INIT</name>
      <anchorfile>structGlib_1_1StaticMutex.html</anchorfile>
      <anchor>e6c90ef370e11fbbe9f0cf8fa295dd0b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Mutex</name>
    <filename>classGlib_1_1Mutex.html</filename>
    <member kind="function">
      <type></type>
      <name>Mutex</name>
      <anchorfile>classGlib_1_1Mutex.html</anchorfile>
      <anchor>0e529e72691cbab324f7c70110d95031</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Mutex</name>
      <anchorfile>classGlib_1_1Mutex.html</anchorfile>
      <anchor>c1a701f93ad62d97f9c34e98b6b3f7be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lock</name>
      <anchorfile>classGlib_1_1Mutex.html</anchorfile>
      <anchor>bd565d2c03dbd7526729b8e56ecc675e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>trylock</name>
      <anchorfile>classGlib_1_1Mutex.html</anchorfile>
      <anchor>a564c753a2e51994c3faee2b1d8c903c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlock</name>
      <anchorfile>classGlib_1_1Mutex.html</anchorfile>
      <anchor>254d550a0e2197d46fa7268475f19824</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GMutex *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1Mutex.html</anchorfile>
      <anchor>ffe6aea5c5044a51422dd08f2dc06d98</anchor>
      <arglist>()</arglist>
    </member>
    <class kind="class">Glib::Mutex::Lock</class>
  </compound>
  <compound kind="class">
    <name>Glib::Mutex::Lock</name>
    <filename>classGlib_1_1Mutex_1_1Lock.html</filename>
    <member kind="function">
      <type></type>
      <name>Lock</name>
      <anchorfile>classGlib_1_1Mutex_1_1Lock.html</anchorfile>
      <anchor>b203085bd7e2fa065f2e770ff501882e</anchor>
      <arglist>(Mutex &amp;mutex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Lock</name>
      <anchorfile>classGlib_1_1Mutex_1_1Lock.html</anchorfile>
      <anchor>613aa058601c9f05d5663cfc005093a8</anchor>
      <arglist>(Mutex &amp;mutex, NotLock)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Lock</name>
      <anchorfile>classGlib_1_1Mutex_1_1Lock.html</anchorfile>
      <anchor>e795f9ed3b07389eb856be7610362cde</anchor>
      <arglist>(Mutex &amp;mutex, TryLock)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Lock</name>
      <anchorfile>classGlib_1_1Mutex_1_1Lock.html</anchorfile>
      <anchor>84f0589eee0654ec60f6773ca9336752</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acquire</name>
      <anchorfile>classGlib_1_1Mutex_1_1Lock.html</anchorfile>
      <anchor>1f892502061ae908452f7eb0ac920065</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>try_acquire</name>
      <anchorfile>classGlib_1_1Mutex_1_1Lock.html</anchorfile>
      <anchor>f2c4e590e2c7f3820df5a4fa8293f280</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>release</name>
      <anchorfile>classGlib_1_1Mutex_1_1Lock.html</anchorfile>
      <anchor>c5bfb4e0c5adf5787c5d5570acc1a25c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>locked</name>
      <anchorfile>classGlib_1_1Mutex_1_1Lock.html</anchorfile>
      <anchor>5cfe52efbd461ff26ecb9b4dc76cb9bd</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Glib::StaticRecMutex</name>
    <filename>structGlib_1_1StaticRecMutex.html</filename>
    <member kind="function">
      <type>void</type>
      <name>lock</name>
      <anchorfile>structGlib_1_1StaticRecMutex.html</anchorfile>
      <anchor>f318bffd84f77b39dbfe65bf654c265b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>trylock</name>
      <anchorfile>structGlib_1_1StaticRecMutex.html</anchorfile>
      <anchor>d59351bd8e600907511b9ed8a693c1ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlock</name>
      <anchorfile>structGlib_1_1StaticRecMutex.html</anchorfile>
      <anchor>ed1a4127138ac49d4d7f2c27da7c236b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lock_full</name>
      <anchorfile>structGlib_1_1StaticRecMutex.html</anchorfile>
      <anchor>9c1fbb797f5e0b72b885186e67ae6ebd</anchor>
      <arglist>(unsigned int depth)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>unlock_full</name>
      <anchorfile>structGlib_1_1StaticRecMutex.html</anchorfile>
      <anchor>380a6ae88b358e5b8661a7e765b19e8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator RecMutex &amp;</name>
      <anchorfile>structGlib_1_1StaticRecMutex.html</anchorfile>
      <anchor>8fbcf435aeb1c8797f7f4584cf06e0e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GStaticRecMutex *</type>
      <name>gobj</name>
      <anchorfile>structGlib_1_1StaticRecMutex.html</anchorfile>
      <anchor>fc0c434e6d72bc3260346d79e8dd5588</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="define">
      <type></type>
      <name>GLIBMM_STATIC_REC_MUTEX_INIT</name>
      <anchorfile>structGlib_1_1StaticRecMutex.html</anchorfile>
      <anchor>7bf8f07d9998d8852e5e7632ef908f68</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::RecMutex</name>
    <filename>classGlib_1_1RecMutex.html</filename>
    <base>Glib::StaticRecMutex</base>
    <member kind="function">
      <type></type>
      <name>RecMutex</name>
      <anchorfile>classGlib_1_1RecMutex.html</anchorfile>
      <anchor>91462697c0142d75e0b6fe7c3ddb751a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RecMutex</name>
      <anchorfile>classGlib_1_1RecMutex.html</anchorfile>
      <anchor>dee3de2eb61684af89e311ab6b940473</anchor>
      <arglist>()</arglist>
    </member>
    <class kind="class">Glib::RecMutex::Lock</class>
  </compound>
  <compound kind="class">
    <name>Glib::RecMutex::Lock</name>
    <filename>classGlib_1_1RecMutex_1_1Lock.html</filename>
    <member kind="function">
      <type></type>
      <name>Lock</name>
      <anchorfile>classGlib_1_1RecMutex_1_1Lock.html</anchorfile>
      <anchor>7648e1bd74aa9c4a3eadcee85790d24e</anchor>
      <arglist>(RecMutex &amp;mutex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Lock</name>
      <anchorfile>classGlib_1_1RecMutex_1_1Lock.html</anchorfile>
      <anchor>8c1f4e93c943c7778b525b3e0911ef91</anchor>
      <arglist>(RecMutex &amp;mutex, NotLock)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Lock</name>
      <anchorfile>classGlib_1_1RecMutex_1_1Lock.html</anchorfile>
      <anchor>128643b7286fe5ef281c05955991d74c</anchor>
      <arglist>(RecMutex &amp;mutex, TryLock)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Lock</name>
      <anchorfile>classGlib_1_1RecMutex_1_1Lock.html</anchorfile>
      <anchor>71c88960ca417bd926a5a037f6f1808c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acquire</name>
      <anchorfile>classGlib_1_1RecMutex_1_1Lock.html</anchorfile>
      <anchor>bcdab81c9e753579247652bca0cb4116</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>try_acquire</name>
      <anchorfile>classGlib_1_1RecMutex_1_1Lock.html</anchorfile>
      <anchor>47ee33f9ea131e215acb8eaa5f47b4c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>release</name>
      <anchorfile>classGlib_1_1RecMutex_1_1Lock.html</anchorfile>
      <anchor>480a9e87a8e8ce59faf09487ded6bdcc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>locked</name>
      <anchorfile>classGlib_1_1RecMutex_1_1Lock.html</anchorfile>
      <anchor>cf1b4168f46b15425251e053087b0b8d</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Glib::StaticRWLock</name>
    <filename>structGlib_1_1StaticRWLock.html</filename>
    <member kind="function">
      <type>void</type>
      <name>reader_lock</name>
      <anchorfile>structGlib_1_1StaticRWLock.html</anchorfile>
      <anchor>f80746638d6252c24243fcf3159d15ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reader_trylock</name>
      <anchorfile>structGlib_1_1StaticRWLock.html</anchorfile>
      <anchor>1cf789f9ffd606ad71d0e8fd13578708</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reader_unlock</name>
      <anchorfile>structGlib_1_1StaticRWLock.html</anchorfile>
      <anchor>d5aae43bc4a3c632823bfc81fe8a70cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writer_lock</name>
      <anchorfile>structGlib_1_1StaticRWLock.html</anchorfile>
      <anchor>9cd606ef6f61488478d92ffc02ae0b2f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writer_trylock</name>
      <anchorfile>structGlib_1_1StaticRWLock.html</anchorfile>
      <anchor>e6e4e019daf5f307a5c1be6ee20953a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writer_unlock</name>
      <anchorfile>structGlib_1_1StaticRWLock.html</anchorfile>
      <anchor>3ee12daec94dc696956fcd7b89265b5a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator RWLock &amp;</name>
      <anchorfile>structGlib_1_1StaticRWLock.html</anchorfile>
      <anchor>91c0f044b25a8ac53ef46ce08ac73c9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GStaticRWLock *</type>
      <name>gobj</name>
      <anchorfile>structGlib_1_1StaticRWLock.html</anchorfile>
      <anchor>4714a65b490f29119d021cecb4931e02</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="define">
      <type></type>
      <name>GLIBMM_STATIC_RW_LOCK_INIT</name>
      <anchorfile>structGlib_1_1StaticRWLock.html</anchorfile>
      <anchor>c075558893159f342830e8d3df59c6eb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::RWLock</name>
    <filename>classGlib_1_1RWLock.html</filename>
    <base>Glib::StaticRWLock</base>
    <member kind="function">
      <type></type>
      <name>RWLock</name>
      <anchorfile>classGlib_1_1RWLock.html</anchorfile>
      <anchor>71bb74cd3035b4abf617a10cfc50b723</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RWLock</name>
      <anchorfile>classGlib_1_1RWLock.html</anchorfile>
      <anchor>cb72fd652e847296b580f796bb82fa36</anchor>
      <arglist>()</arglist>
    </member>
    <class kind="class">Glib::RWLock::ReaderLock</class>
    <class kind="class">Glib::RWLock::WriterLock</class>
  </compound>
  <compound kind="class">
    <name>Glib::RWLock::ReaderLock</name>
    <filename>classGlib_1_1RWLock_1_1ReaderLock.html</filename>
    <member kind="function">
      <type></type>
      <name>ReaderLock</name>
      <anchorfile>classGlib_1_1RWLock_1_1ReaderLock.html</anchorfile>
      <anchor>3ec567d55a84fb8ddf5892ae8adf5a6f</anchor>
      <arglist>(RWLock &amp;rwlock)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ReaderLock</name>
      <anchorfile>classGlib_1_1RWLock_1_1ReaderLock.html</anchorfile>
      <anchor>a22f3de258861a7c9cfbf2c420bf60d8</anchor>
      <arglist>(RWLock &amp;rwlock, NotLock)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ReaderLock</name>
      <anchorfile>classGlib_1_1RWLock_1_1ReaderLock.html</anchorfile>
      <anchor>f3f9ffabd993ae5cc40f91afb673e96d</anchor>
      <arglist>(RWLock &amp;rwlock, TryLock)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ReaderLock</name>
      <anchorfile>classGlib_1_1RWLock_1_1ReaderLock.html</anchorfile>
      <anchor>fa8de82014987c3834dea5142642402a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acquire</name>
      <anchorfile>classGlib_1_1RWLock_1_1ReaderLock.html</anchorfile>
      <anchor>e36282c4d009bf76910d37c5b010cc7c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>try_acquire</name>
      <anchorfile>classGlib_1_1RWLock_1_1ReaderLock.html</anchorfile>
      <anchor>d30060213dc44abf4b3cfed6ad6fe2ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>release</name>
      <anchorfile>classGlib_1_1RWLock_1_1ReaderLock.html</anchorfile>
      <anchor>6859ec0e0caf92a7f3da8c96b9e22082</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>locked</name>
      <anchorfile>classGlib_1_1RWLock_1_1ReaderLock.html</anchorfile>
      <anchor>4d2188db0b43037dc7353385a6869e5f</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::RWLock::WriterLock</name>
    <filename>classGlib_1_1RWLock_1_1WriterLock.html</filename>
    <member kind="function">
      <type></type>
      <name>WriterLock</name>
      <anchorfile>classGlib_1_1RWLock_1_1WriterLock.html</anchorfile>
      <anchor>5aca4e3617470e59344f4c7f64b226ab</anchor>
      <arglist>(RWLock &amp;rwlock)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WriterLock</name>
      <anchorfile>classGlib_1_1RWLock_1_1WriterLock.html</anchorfile>
      <anchor>8eaaeaf2e0979b8032600c0a1144bf46</anchor>
      <arglist>(RWLock &amp;rwlock, NotLock)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WriterLock</name>
      <anchorfile>classGlib_1_1RWLock_1_1WriterLock.html</anchorfile>
      <anchor>a662238d1b2026823bcfafaf1f9b63d4</anchor>
      <arglist>(RWLock &amp;rwlock, TryLock)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~WriterLock</name>
      <anchorfile>classGlib_1_1RWLock_1_1WriterLock.html</anchorfile>
      <anchor>47bfa749496840f33b7f8451eb637850</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acquire</name>
      <anchorfile>classGlib_1_1RWLock_1_1WriterLock.html</anchorfile>
      <anchor>e508867d3b32dc73deab37cd5d785f4a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>try_acquire</name>
      <anchorfile>classGlib_1_1RWLock_1_1WriterLock.html</anchorfile>
      <anchor>597521878f1829509119c5b76ad96032</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>release</name>
      <anchorfile>classGlib_1_1RWLock_1_1WriterLock.html</anchorfile>
      <anchor>f8028a0eaebcebc1d71e2658e6b66b7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>locked</name>
      <anchorfile>classGlib_1_1RWLock_1_1WriterLock.html</anchorfile>
      <anchor>2e6e9c3ffb9280efccd3b1523d6fcf6f</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Cond</name>
    <filename>classGlib_1_1Cond.html</filename>
    <member kind="function">
      <type></type>
      <name>Cond</name>
      <anchorfile>classGlib_1_1Cond.html</anchorfile>
      <anchor>2182b1171de3bdd0b97ab2f16d88a17a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Cond</name>
      <anchorfile>classGlib_1_1Cond.html</anchorfile>
      <anchor>67919ec3f33e19185f72d9c1a0043605</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>signal</name>
      <anchorfile>classGlib_1_1Cond.html</anchorfile>
      <anchor>072cb37a06a695b54370209bc3280f4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>broadcast</name>
      <anchorfile>classGlib_1_1Cond.html</anchorfile>
      <anchor>2ed0ec9fc4e29140f8854a05bfb5df3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wait</name>
      <anchorfile>classGlib_1_1Cond.html</anchorfile>
      <anchor>e989bf2891954ff5ed745f447cdccf2a</anchor>
      <arglist>(Mutex &amp;mutex)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>timed_wait</name>
      <anchorfile>classGlib_1_1Cond.html</anchorfile>
      <anchor>cb37b09bf04ae36e30ec32c2f3d4af69</anchor>
      <arglist>(Mutex &amp;mutex, const Glib::TimeVal &amp;abs_time)</arglist>
    </member>
    <member kind="function">
      <type>GCond *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1Cond.html</anchorfile>
      <anchor>27a794031bc8a6c104db3b9977254c61</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Glib::StaticPrivate</name>
    <filename>structGlib_1_1StaticPrivate.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>void(*)</type>
      <name>DestroyNotifyFunc</name>
      <anchorfile>structGlib_1_1StaticPrivate.html</anchorfile>
      <anchor>5f4314e05191e1b40c3966a49647028a</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>get</name>
      <anchorfile>structGlib_1_1StaticPrivate.html</anchorfile>
      <anchor>d208b161d8e65e26ab559da7a306e1ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>structGlib_1_1StaticPrivate.html</anchorfile>
      <anchor>35d07a85ca83076789c2dcb268d6c25d</anchor>
      <arglist>(T *data, DestroyNotifyFunc notify_func=&amp;StaticPrivate&lt; T &gt;::delete_ptr)</arglist>
    </member>
    <member kind="function">
      <type>GStaticPrivate *</type>
      <name>gobj</name>
      <anchorfile>structGlib_1_1StaticPrivate.html</anchorfile>
      <anchor>bfc8325b959a71497571c53c37141d58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>delete_ptr</name>
      <anchorfile>structGlib_1_1StaticPrivate.html</anchorfile>
      <anchor>6c230680af925b13a85ce8507549ab76</anchor>
      <arglist>(void *data)</arglist>
    </member>
    <member kind="define">
      <type></type>
      <name>GLIBMM_STATIC_PRIVATE_INIT</name>
      <anchorfile>structGlib_1_1StaticPrivate.html</anchorfile>
      <anchor>fdbb70766398f948bc346fef14f1a53f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Private</name>
    <filename>classGlib_1_1Private.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>void(*)</type>
      <name>DestructorFunc</name>
      <anchorfile>classGlib_1_1Private.html</anchorfile>
      <anchor>d927ebf4c532513eebbb3611cd45e12c</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Private</name>
      <anchorfile>classGlib_1_1Private.html</anchorfile>
      <anchor>398953b6c89edf91b5b1be28f453006d</anchor>
      <arglist>(DestructorFunc destructor_func=&amp;Private&lt; T &gt;::delete_ptr)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Private.html</anchorfile>
      <anchor>7d643790e7724ef7f63ca0b2f9309768</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classGlib_1_1Private.html</anchorfile>
      <anchor>7e4636b15cd3f43010fadea300791dd2</anchor>
      <arglist>(T *data)</arglist>
    </member>
    <member kind="function">
      <type>GPrivate *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1Private.html</anchorfile>
      <anchor>bc4b19a17ca795b2878b5fd5a14f6fc9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>delete_ptr</name>
      <anchorfile>classGlib_1_1Private.html</anchorfile>
      <anchor>c98db7269b43438fb45313092ee80cb6</anchor>
      <arglist>(void *data)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::ThreadPool</name>
    <filename>classGlib_1_1ThreadPool.html</filename>
    <member kind="function">
      <type></type>
      <name>ThreadPool</name>
      <anchorfile>classGlib_1_1ThreadPool.html</anchorfile>
      <anchor>fd549a2867eafe34663d8935c17efbe2</anchor>
      <arglist>(int max_threads=-1, bool exclusive=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ThreadPool</name>
      <anchorfile>classGlib_1_1ThreadPool.html</anchorfile>
      <anchor>aed3b188194822da768fa9a29e608b16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>classGlib_1_1ThreadPool.html</anchorfile>
      <anchor>7b37fdac9f7a6e4a8791b4668e23e264</anchor>
      <arglist>(const sigc::slot&lt; void &gt; &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_max_threads</name>
      <anchorfile>classGlib_1_1ThreadPool.html</anchorfile>
      <anchor>e19ed9a523788e40509ee4f39d2b10a9</anchor>
      <arglist>(int max_threads)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_max_threads</name>
      <anchorfile>classGlib_1_1ThreadPool.html</anchorfile>
      <anchor>6dbe83ceeb65fd0f157e1b1895ed3db5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>get_num_threads</name>
      <anchorfile>classGlib_1_1ThreadPool.html</anchorfile>
      <anchor>2a6bc66c4eb03e346429e6f7fe3a5fe3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>unprocessed</name>
      <anchorfile>classGlib_1_1ThreadPool.html</anchorfile>
      <anchor>8eb62f226a5f5e2f93b66b25c49cc401</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_exclusive</name>
      <anchorfile>classGlib_1_1ThreadPool.html</anchorfile>
      <anchor>b59582875f80b94bf4707c1c77f234ba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shutdown</name>
      <anchorfile>classGlib_1_1ThreadPool.html</anchorfile>
      <anchor>14a3e00a1fec5fec2bded78ea6a2b796</anchor>
      <arglist>(bool immediately=false)</arglist>
    </member>
    <member kind="function">
      <type>GThreadPool *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1ThreadPool.html</anchorfile>
      <anchor>c7f444f305942afb54c45204f509bc39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GThreadPool *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1ThreadPool.html</anchorfile>
      <anchor>ba0bd84d5851f3a64269685dc102cd4b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set_max_unused_threads</name>
      <anchorfile>classGlib_1_1ThreadPool.html</anchorfile>
      <anchor>f057a2e30dc3e32137944f71658467db</anchor>
      <arglist>(int max_threads)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>get_max_unused_threads</name>
      <anchorfile>classGlib_1_1ThreadPool.html</anchorfile>
      <anchor>a0bb8c1914b2e36fa0222bbaeb44b94e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static unsigned int</type>
      <name>get_num_unused_threads</name>
      <anchorfile>classGlib_1_1ThreadPool.html</anchorfile>
      <anchor>9904f39dc346cd44296f361415147ae1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>stop_unused_threads</name>
      <anchorfile>classGlib_1_1ThreadPool.html</anchorfile>
      <anchor>132a7f8416d29f9499ed87ba102c37a3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Timer</name>
    <filename>classGlib_1_1Timer.html</filename>
    <member kind="function">
      <type></type>
      <name>Timer</name>
      <anchorfile>classGlib_1_1Timer.html</anchorfile>
      <anchor>1ff80cf54560a168274fa69be8f0c280</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Timer</name>
      <anchorfile>classGlib_1_1Timer.html</anchorfile>
      <anchor>261ce5699feab81230a37fd6f2f80fb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>classGlib_1_1Timer.html</anchorfile>
      <anchor>05067986b126f147111357ff7693aea6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>classGlib_1_1Timer.html</anchorfile>
      <anchor>3c54e67ddbc01f39b843b1df45aa3c17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classGlib_1_1Timer.html</anchorfile>
      <anchor>82d5eef4159c73d8412b9e927073625b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>elapsed</name>
      <anchorfile>classGlib_1_1Timer.html</anchorfile>
      <anchor>a1cb1f3f0105ad140122e661b4c74b6a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>elapsed</name>
      <anchorfile>classGlib_1_1Timer.html</anchorfile>
      <anchor>c627928a24ff72cce9779675606aba3d</anchor>
      <arglist>(unsigned long &amp;microseconds) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Glib::TimeVal</name>
    <filename>structGlib_1_1TimeVal.html</filename>
    <base>GTimeVal</base>
    <member kind="function">
      <type></type>
      <name>TimeVal</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>b1861a9cd1f66b581b99ba9bb9456626</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TimeVal</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>c72a9eada5c330236f7bc7f305b19179</anchor>
      <arglist>(long seconds, long microseconds)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TimeVal</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>5f889cb372ca5abb6796cfec44b8cc0d</anchor>
      <arglist>(const GTimeVal &amp;gtimeval)</arglist>
    </member>
    <member kind="function">
      <type>TimeVal &amp;</type>
      <name>operator=</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>2098aff57cd47005faacb51854ede6a9</anchor>
      <arglist>(const GTimeVal &amp;gtimeval)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign_current_time</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>9e28e3310fc1ee5e2dba7a7ed9cbb97e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>c94c07dbb768f3d1c68731e735f074ba</anchor>
      <arglist>(const TimeVal &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subtract</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>c47cd4e39665d3a25e3a236b0ced620d</anchor>
      <arglist>(const TimeVal &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_seconds</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>e24a9a526b4f66a16a2bc0047ac52ad6</anchor>
      <arglist>(long seconds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subtract_seconds</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>abd386d64098d531101589ba7f9aad4a</anchor>
      <arglist>(long seconds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_milliseconds</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>116ddecfdc3994b541e05d0fd27ce297</anchor>
      <arglist>(long milliseconds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subtract_milliseconds</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>08a82c224a744142db48b9d9f25a236f</anchor>
      <arglist>(long milliseconds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_microseconds</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>55648d2e807fd75d0eafffc3a595eaf0</anchor>
      <arglist>(long microseconds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subtract_microseconds</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>495a575cdc38ec785808e58750020957</anchor>
      <arglist>(long microseconds)</arglist>
    </member>
    <member kind="function">
      <type>TimeVal &amp;</type>
      <name>operator+=</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>ab1d96583d1fb003ec887f2cd6fa00b7</anchor>
      <arglist>(const TimeVal &amp;gtimeval)</arglist>
    </member>
    <member kind="function">
      <type>TimeVal &amp;</type>
      <name>operator-=</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>8f20714471ddf46966a0bbdda19448be</anchor>
      <arglist>(const TimeVal &amp;gtimeval)</arglist>
    </member>
    <member kind="function">
      <type>TimeVal &amp;</type>
      <name>operator+=</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>0fab78f2bb33e9f9dbcddbd5ea27cf76</anchor>
      <arglist>(long seconds)</arglist>
    </member>
    <member kind="function">
      <type>TimeVal &amp;</type>
      <name>operator-=</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>8868ad08d7f5e874b05b1045f8b4b230</anchor>
      <arglist>(long seconds)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>as_double</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>7ed446e8ac1aade48f0091a628b0e489</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>negative</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>293fe201a8511f7a982b36accfa1e75a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>0eafa6dacfbe329fd2a47ada4170ea2a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TimeVal</type>
      <name>operator+</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>73ff3d601bc8fa6c8930bb38bfc4b81a</anchor>
      <arglist>(const TimeVal &amp;lhs, const TimeVal &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>TimeVal</type>
      <name>operator+</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>ff0c676ec4f733efaa502a143a230c5f</anchor>
      <arglist>(const TimeVal &amp;lhs, long seconds)</arglist>
    </member>
    <member kind="function">
      <type>TimeVal</type>
      <name>operator-</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>535d26acb52dfff88be818f67fbdf374</anchor>
      <arglist>(const TimeVal &amp;lhs, const TimeVal &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>TimeVal</type>
      <name>operator-</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>53bcd5233d92b3af6a55cb4aff9fb6f6</anchor>
      <arglist>(const TimeVal &amp;lhs, long seconds)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>77e3f591d386260fe9e9c63aafa31173</anchor>
      <arglist>(const TimeVal &amp;lhs, const TimeVal &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>3519281c327ded4360495fc2dee669ee</anchor>
      <arglist>(const TimeVal &amp;lhs, const TimeVal &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>c68de516b4ddbd26ab553e661108fa83</anchor>
      <arglist>(const TimeVal &amp;lhs, const TimeVal &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>2bbae56f9818348985dac857054f4d78</anchor>
      <arglist>(const TimeVal &amp;lhs, const TimeVal &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>288728d04ff97620e97b8742c337e21d</anchor>
      <arglist>(const TimeVal &amp;lhs, const TimeVal &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>df5ab3ded63a7ff5c134622deaf03640</anchor>
      <arglist>(const TimeVal &amp;lhs, const TimeVal &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::ustring_Iterator</name>
    <filename>classGlib_1_1ustring__Iterator.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>std::bidirectional_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>classGlib_1_1ustring__Iterator.html</anchorfile>
      <anchor>9747bb41c8c89ff372d6c70e23f6682d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>gunichar</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1ustring__Iterator.html</anchorfile>
      <anchor>c41f5f5a8d57b96eb23a17f481a41f21</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string::difference_type</type>
      <name>difference_type</name>
      <anchorfile>classGlib_1_1ustring__Iterator.html</anchorfile>
      <anchor>a32792b92260dd761d004c690b972068</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type</type>
      <name>reference</name>
      <anchorfile>classGlib_1_1ustring__Iterator.html</anchorfile>
      <anchor>4426e6cc18ea0c46eb30244e76a40459</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>pointer</name>
      <anchorfile>classGlib_1_1ustring__Iterator.html</anchorfile>
      <anchor>ae8b8c32b749da9edfa1f181cc87e281</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ustring_Iterator</name>
      <anchorfile>classGlib_1_1ustring__Iterator.html</anchorfile>
      <anchor>f20ce404b0ffb807ace293af4ddf7f07</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ustring_Iterator</name>
      <anchorfile>classGlib_1_1ustring__Iterator.html</anchorfile>
      <anchor>456579af0eafeabf6014825dc8b3c103</anchor>
      <arglist>(const ustring_Iterator&lt; std::string::iterator &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>operator *</name>
      <anchorfile>classGlib_1_1ustring__Iterator.html</anchorfile>
      <anchor>b2585d371721f3de36fb80fb34290737</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ustring_Iterator&lt; T &gt; &amp;</type>
      <name>operator++</name>
      <anchorfile>classGlib_1_1ustring__Iterator.html</anchorfile>
      <anchor>da50c68ef23fd35a3d20d4ad57b02e57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ustring_Iterator&lt; T &gt;</type>
      <name>operator++</name>
      <anchorfile>classGlib_1_1ustring__Iterator.html</anchorfile>
      <anchor>1c746bd9a2ab884ba19190fcdeb428b5</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>ustring_Iterator&lt; T &gt; &amp;</type>
      <name>operator--</name>
      <anchorfile>classGlib_1_1ustring__Iterator.html</anchorfile>
      <anchor>70cc9ab14d049e21a0375e97d7b8759a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ustring_Iterator&lt; T &gt;</type>
      <name>operator--</name>
      <anchorfile>classGlib_1_1ustring__Iterator.html</anchorfile>
      <anchor>eebb923631e3535e9e96a1f65edec999</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ustring_Iterator</name>
      <anchorfile>classGlib_1_1ustring__Iterator.html</anchorfile>
      <anchor>1f4b5aaeadcc90211e016f08a0be846a</anchor>
      <arglist>(T pos)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>base</name>
      <anchorfile>classGlib_1_1ustring__Iterator.html</anchorfile>
      <anchor>1c81fae5230c3f0df726972abba61c5a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classGlib_1_1ustring__Iterator.html</anchorfile>
      <anchor>30394a0302c919ef89fd5a357668905a</anchor>
      <arglist>(const ustring_Iterator&lt; T &gt; &amp;lhs, const ustring_Iterator&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classGlib_1_1ustring__Iterator.html</anchorfile>
      <anchor>5dc6b022af2adaa7d900a71d7b0b2b5c</anchor>
      <arglist>(const ustring_Iterator&lt; T &gt; &amp;lhs, const ustring_Iterator&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classGlib_1_1ustring__Iterator.html</anchorfile>
      <anchor>8a21808a66bb616271e8a926b847d91e</anchor>
      <arglist>(const ustring_Iterator&lt; T &gt; &amp;lhs, const ustring_Iterator&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classGlib_1_1ustring__Iterator.html</anchorfile>
      <anchor>cf321255a4f5be0242eed626b24cc981</anchor>
      <arglist>(const ustring_Iterator&lt; T &gt; &amp;lhs, const ustring_Iterator&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classGlib_1_1ustring__Iterator.html</anchorfile>
      <anchor>4af8a599b5121d4e5d01d89771beaf0f</anchor>
      <arglist>(const ustring_Iterator&lt; T &gt; &amp;lhs, const ustring_Iterator&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classGlib_1_1ustring__Iterator.html</anchorfile>
      <anchor>a00ede3d9b77751efef1f68b61f90032</anchor>
      <arglist>(const ustring_Iterator&lt; T &gt; &amp;lhs, const ustring_Iterator&lt; T &gt; &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::ustring</name>
    <filename>classGlib_1_1ustring.html</filename>
    <member kind="typedef">
      <type>std::string::size_type</type>
      <name>size_type</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>67bac62e72402790de6b76919a678f0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string::difference_type</type>
      <name>difference_type</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>35fd6dff1d5e33f207c93b1fb9a393e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>gunichar</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>282e7bdfd09169c91913243e65d1bcc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>gunichar &amp;</type>
      <name>reference</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>f7abdeaff45f1839953696b3ab2b0bf4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const gunichar &amp;</type>
      <name>const_reference</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>217e97c14d897f663015955d1072605f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ustring_Iterator&lt; std::string::iterator &gt;</type>
      <name>iterator</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>1353523668478524d050a381540f0c5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ustring_Iterator&lt; std::string::const_iterator &gt;</type>
      <name>const_iterator</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>7772ea4022ea491d6eda042265b14f4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; iterator &gt;</type>
      <name>reverse_iterator</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>b48da172f9331e26f5691800a37910e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; const_iterator &gt;</type>
      <name>const_reverse_iterator</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>5cb2ea16c5fd222652cd50c5a9753b89</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ustring</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>71802782f4c2c408ef7ac69c6564b370</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ustring</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>f3b1f50569022372092fc6dd01ae304f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ustring</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>5dc4cc90abcdd62a33f9eb92852aac2e</anchor>
      <arglist>(const ustring &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a8f2a6f7f4321afd3800e8fa038d2609</anchor>
      <arglist>(const ustring &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>ab10391953b67135dba63ccee17bc0c8</anchor>
      <arglist>(ustring &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ustring</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a18a6019809b2cb64bb329a8422f1857</anchor>
      <arglist>(const std::string &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ustring</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>37655e890b5cb3a2f0fc862b85ba29cc</anchor>
      <arglist>(const ustring &amp;src, size_type i, size_type n=npos)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ustring</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>4a32814b94b8158c126f9dba4cc49839</anchor>
      <arglist>(const char *src, size_type n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ustring</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>c15b3452b5e61664c5cc03e63fc1cb87</anchor>
      <arglist>(const char *src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ustring</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>ca3b1f0ea95a872075249152726e26cc</anchor>
      <arglist>(size_type n, gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ustring</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>9578a8ed5b5efd1b85ff06064931cc04</anchor>
      <arglist>(size_type n, char c)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ustring</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>f15d08d8aa45cb64b171b8bc90ade80e</anchor>
      <arglist>(In pbegin, In pend)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>b09a3fb3ebcb703c9fe2c8a182ca61d9</anchor>
      <arglist>(const std::string &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>462c9ecbe5a1ba9f82f3d8fe65551799</anchor>
      <arglist>(const char *src)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>3a6b53d3bdad890c0c55a3dd5eb1ee6d</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>192af14563f29029f00e1dfc3cb97180</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>assign</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>042e31ee9f6f03238776b64901386fb1</anchor>
      <arglist>(const ustring &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>assign</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>35e75872182e516aecf7cbdc14e67ce2</anchor>
      <arglist>(const ustring &amp;src, size_type i, size_type n)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>assign</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>989c810b8a7d63893adac83020f9e974</anchor>
      <arglist>(const char *src, size_type n)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>assign</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>08c1aa84e95d2d4012faeb83b61e0c4f</anchor>
      <arglist>(const char *src)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>assign</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>6e17c136d7fce8916c2c72af1c403fbd</anchor>
      <arglist>(size_type n, gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>assign</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>8c5e94fc459cd41784a476bfd55c5fbe</anchor>
      <arglist>(size_type n, char c)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>assign</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>8ac4a1ad21cb3f682ba1ab67f26f46d9</anchor>
      <arglist>(In pbegin, In pend)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>operator+=</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>fefb665c88b67a3eaaa00f3a07977cf1</anchor>
      <arglist>(const ustring &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>operator+=</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>8b493156ea0a9b488765b4b683874ee5</anchor>
      <arglist>(const char *src)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>operator+=</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>9820af75b209405f70477c42e2cf76ce</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>operator+=</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>4752324b5d6ee7d39fa6581d473a5d4c</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>fdf6aaf1bdc127a37b779e872f005663</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a7d9d1a618d511a07aa8d6a297398c71</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>append</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>8ee78968938b742083e3dd785be1c82e</anchor>
      <arglist>(const ustring &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>append</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>62f1635fe0971922a42c0daed6014ae9</anchor>
      <arglist>(const ustring &amp;src, size_type i, size_type n)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>append</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>696bcfe283235e38a8bee7806cb80dba</anchor>
      <arglist>(const char *src, size_type n)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>append</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>41df279b9a20314cd810190a5732b7d4</anchor>
      <arglist>(const char *src)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>append</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>e1dc013550a42becdb36e407044d5b39</anchor>
      <arglist>(size_type n, gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>append</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>e2ff748e9869b087c3a5b7b486b94ae2</anchor>
      <arglist>(size_type n, char c)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>append</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>848e976a41f41fc295395fa1f4904d86</anchor>
      <arglist>(In pbegin, In pend)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>insert</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>dc7ed354d9657590e61f65dc9ea4b498</anchor>
      <arglist>(size_type i, const ustring &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>insert</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>7dee38b14e2975f3ca60ad407bef62b6</anchor>
      <arglist>(size_type i, const ustring &amp;src, size_type i2, size_type n)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>insert</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>67da2d68fda78fd3e1f70c915ad0c8f7</anchor>
      <arglist>(size_type i, const char *src, size_type n)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>insert</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>f3e79d497de7d2e593a1aa1e267cce64</anchor>
      <arglist>(size_type i, const char *src)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>insert</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>5c163a5f8690d593e44a2cad810bbd5f</anchor>
      <arglist>(size_type i, size_type n, gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>insert</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>3f60e626c9cdb00f1ae73804542a6cd4</anchor>
      <arglist>(size_type i, size_type n, char c)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>insert</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>b1b0455f1db1608834c2c6f7ab753f25</anchor>
      <arglist>(iterator p, gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>insert</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>e74a1b439755c000f9d77e3a51f2c522</anchor>
      <arglist>(iterator p, char c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>e0ba0b641b603d07490c90789f9592fb</anchor>
      <arglist>(iterator p, size_type n, gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a2ff066e10cb1ed9ecbee902e625c859</anchor>
      <arglist>(iterator p, size_type n, char c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>1237a8e08231c2e05b6702d09be3367c</anchor>
      <arglist>(iterator p, In pbegin, In pend)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>replace</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>0f0c9b5aaad58279d3ac87a86a173f4a</anchor>
      <arglist>(size_type i, size_type n, const ustring &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>replace</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>0e5c1ca4f4fe63ab8ba991339676ee16</anchor>
      <arglist>(size_type i, size_type n, const ustring &amp;src, size_type i2, size_type n2)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>replace</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>b0bb3c55c72e41f856be06f0026c7289</anchor>
      <arglist>(size_type i, size_type n, const char *src, size_type n2)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>replace</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>8111ac295e4d589075a78e46d304f908</anchor>
      <arglist>(size_type i, size_type n, const char *src)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>replace</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>41fd10a9dae5a6e5a48844255be3667e</anchor>
      <arglist>(size_type i, size_type n, size_type n2, gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>replace</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>b10df235025c2bd67bbc82630ae6169f</anchor>
      <arglist>(size_type i, size_type n, size_type n2, char c)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>replace</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>440d241c8506fef8d7db45390b7082bd</anchor>
      <arglist>(iterator pbegin, iterator pend, const ustring &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>replace</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>6175229e79d9e8331a59cf11a572ac7a</anchor>
      <arglist>(iterator pbegin, iterator pend, const char *src, size_type n)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>replace</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>44fca1dfd45c017330af208415752975</anchor>
      <arglist>(iterator pbegin, iterator pend, const char *src)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>replace</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>54e65b70536fb16267c7e229db929009</anchor>
      <arglist>(iterator pbegin, iterator pend, size_type n, gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>replace</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>880730452006fdb7f78a710fc5c51b9b</anchor>
      <arglist>(iterator pbegin, iterator pend, size_type n, char c)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>replace</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>3cc05f7a8511daf80e136ee047c4abb0</anchor>
      <arglist>(iterator pbegin, iterator pend, In pbegin2, In pend2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>29d71bbd400b18e9e81b1f51b193a172</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>erase</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>cd29a2b0ea0e40068a1b77a2276bb68e</anchor>
      <arglist>(size_type i, size_type n=npos)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>erase</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>dc5cf169c9af32e912727ce3bf541549</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>c6ea980bbbeeef8bcf727543c9bd5c69</anchor>
      <arglist>(iterator p)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>d550647c64ee20c076aae11c824ca147</anchor>
      <arglist>(iterator pbegin, iterator pend)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>d4f3c89d55b5ce58496c01bec13fbd87</anchor>
      <arglist>(const ustring &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>c0f5618d299fc7c9c9387dca4fee278e</anchor>
      <arglist>(const char *rhs) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>896603d088b3db98ba084ee6900b92b1</anchor>
      <arglist>(size_type i, size_type n, const ustring &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>3311a190eff2fcb3f01b6b736e574790</anchor>
      <arglist>(size_type i, size_type n, const ustring &amp;rhs, size_type i2, size_type n2) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>0de1dfcd10b91f85a0baea620fe30744</anchor>
      <arglist>(size_type i, size_type n, const char *rhs, size_type n2) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>0ebb73a80e6a0d6604eb84713642c4bf</anchor>
      <arglist>(size_type i, size_type n, const char *rhs) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>collate_key</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>7c0336492100e3087fc3d12e2104d9fc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>casefold_collate_key</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>387001c1a7a7e05948a0e1f4997a2e60</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>operator[]</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>8fcf9d29eb96df85bd813226d4d11351</anchor>
      <arglist>(size_type i) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>at</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>544f9aafff4f0148dfd58fa15cd734b8</anchor>
      <arglist>(size_type i) const </arglist>
    </member>
    <member kind="function">
      <type>ustring</type>
      <name>substr</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a20ce59c438020d4bfb29348ba572a30</anchor>
      <arglist>(size_type i=0, size_type n=npos) const </arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>6389a5bd22b924d09dd483c6f09cf80b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>bd3e8c51c3ee4f2a2e077e0956ab7b59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>56e38ee05aa5ef340710e40e7d86dd6e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>edf6c9ace813837cc76a4632fc3b6c96</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>6fa752b1bbfd0b816f338db1ec913da0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rend</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>67c0a179fa38d0f69396a7827d9e781e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a6e3d349dd64fc8475812e3914cdd36d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rend</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>93da84513eab5ff0d73cd2551d8dd38a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>86cec31bce94717ec2b439f328daed5c</anchor>
      <arglist>(const ustring &amp;str, size_type i=0) const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>d4ed9119acd67fe3a4384da1e60ec499</anchor>
      <arglist>(const char *str, size_type i, size_type n) const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>3550a7136033771698edff317302d94e</anchor>
      <arglist>(const char *str, size_type i=0) const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a615053805489910ba074ebc0d0cad48</anchor>
      <arglist>(gunichar uc, size_type i=0) const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>29d8dd34e719f7cbec450fb91b4bb556</anchor>
      <arglist>(char c, size_type i=0) const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>rfind</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>c26846cd48a717769e1b2feeda25a221</anchor>
      <arglist>(const ustring &amp;str, size_type i=npos) const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>rfind</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>02396723ecc7a754e7450f6adfbfdfa5</anchor>
      <arglist>(const char *str, size_type i, size_type n) const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>rfind</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>95b4ed711e22a6a78860dbe59601e654</anchor>
      <arglist>(const char *str, size_type i=npos) const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>rfind</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>218389637c6477e0cc84f0a4d5f929a5</anchor>
      <arglist>(gunichar uc, size_type i=npos) const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>rfind</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>869322295151ab1d23a03aee041a2fb0</anchor>
      <arglist>(char c, size_type i=npos) const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_first_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>9e28bc11a6b6b1eabb2fa17b3e276d72</anchor>
      <arglist>(const ustring &amp;match, size_type i=0) const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_first_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>e047dfb2f5e754c81c4bd820bc25d881</anchor>
      <arglist>(const char *match, size_type i, size_type n) const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_first_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>0aceb3705e0d61ae8cf5c2ddd465c383</anchor>
      <arglist>(const char *match, size_type i=0) const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_first_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>f493d05ec17bd0a99bc5160246fce606</anchor>
      <arglist>(gunichar uc, size_type i=0) const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_first_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>da49e2717e9e9f903cfefac46972479b</anchor>
      <arglist>(char c, size_type i=0) const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_last_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>828fb558a21a1dad8b665a3486c6e486</anchor>
      <arglist>(const ustring &amp;match, size_type i=npos) const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_last_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>51da6dde12afb2cf299aaf2709692da3</anchor>
      <arglist>(const char *match, size_type i, size_type n) const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_last_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>7498d0d9b746b0058297a4ba109f82b3</anchor>
      <arglist>(const char *match, size_type i=npos) const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_last_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>02607d18a0af132408a5e32837a45f26</anchor>
      <arglist>(gunichar uc, size_type i=npos) const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_last_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>257ee52dd685d2ea99410bc6db4b2d2c</anchor>
      <arglist>(char c, size_type i=npos) const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_first_not_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>40ca0b0d40320850fad996eca933764f</anchor>
      <arglist>(const ustring &amp;match, size_type i=0) const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_first_not_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>5940391f56e6459050bdbe69ad1234d8</anchor>
      <arglist>(const char *match, size_type i, size_type n) const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_first_not_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>8e373bb5e95739837b530a7b10d7eebe</anchor>
      <arglist>(const char *match, size_type i=0) const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_first_not_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>268574975883bf620d021a5c2e810db6</anchor>
      <arglist>(gunichar uc, size_type i=0) const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_first_not_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>26019b10db1f7c2577be880b459e7274</anchor>
      <arglist>(char c, size_type i=0) const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_last_not_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>75d5962c3e93735ae8b90bee26f7479f</anchor>
      <arglist>(const ustring &amp;match, size_type i=npos) const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_last_not_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>cea6cc5b53093ee2e20891a0357b380f</anchor>
      <arglist>(const char *match, size_type i, size_type n) const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_last_not_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>92afa2709fe6c35c8683aff79cda02fe</anchor>
      <arglist>(const char *match, size_type i=npos) const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_last_not_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>709427f91388967a54f1e0cad310d6a5</anchor>
      <arglist>(gunichar uc, size_type i=npos) const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_last_not_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>5ae0acd41523b37507fccdb006ed369c</anchor>
      <arglist>(char c, size_type i=npos) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>95013a2754a5c1608cca3c8eb07c9636</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>6bf6aa8759abcc433e4c650b40e67172</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>length</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>992bf7d88a34cb50ecccc812e38348c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>bytes</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>39740ad670046705f115db4096d07075</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>267b95424c7ab80b79a12e569d369368</anchor>
      <arglist>(size_type n, gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>cf40ef3330bbb5cb608c53346592f31a</anchor>
      <arglist>(size_type n, char c=&apos;\0&apos;)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>capacity</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a69a855ee81c46cd3b3289dfc3445b09</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>max_size</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>762f2328e195c7eb234ebaa03ced966c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>7b762f649f8c349f7d3b288aec797f7c</anchor>
      <arglist>(size_type n=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>65b883220a5ed55704831bde3a4cb0bf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>raw</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>bce477aaed0c307843e5577e0dd0ff64</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>data</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a3df2e7bde58b48d8a980869f95cc442</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>c_str</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>1a6efb61f73090178d51c716d1c73c08</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>copy</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>8c6aadc915926b11af63fad788c44edf</anchor>
      <arglist>(char *dest, size_type n, size_type i=0) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>validate</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>b5e9283bca93e84a8fd1d437edfac96b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>validate</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>e6880bcb529516f64ea7205136d65d44</anchor>
      <arglist>(iterator &amp;first_invalid)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>validate</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>e4eafd870c8ceaf2953e5fe0246316ab</anchor>
      <arglist>(const_iterator &amp;first_invalid) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_ascii</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>61f69372c10cd3aaa37c5f4c162e60cc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ustring</type>
      <name>normalize</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a0e1b26aa527761c40ccf784a3d8f485</anchor>
      <arglist>(NormalizeMode mode=NORMALIZE_DEFAULT_COMPOSE) const </arglist>
    </member>
    <member kind="function">
      <type>ustring</type>
      <name>uppercase</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>c350791ba2174806abce03973e662fce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ustring</type>
      <name>lowercase</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>6526539af982b427606c0c76d27bc044</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ustring</type>
      <name>casefold</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>5c7e3a9882aa343bff9476c1267a28b6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static GLIBMM_API const size_type</type>
      <name>npos</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>fe9e54c9ecf248998c177845036a308a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>6db8569e4295d0b6e620b5a423c572ac</anchor>
      <arglist>(std::istream &amp;is, Glib::ustring &amp;utf8_string)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>48666f99f399065075c916ee1742393c</anchor>
      <arglist>(std::ostream &amp;os, const Glib::ustring &amp;utf8_string)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>aa999f27120493fab2bbcb15ad32e1fd</anchor>
      <arglist>(ustring &amp;lhs, ustring &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>8de47e1d7bb26732cfa05ec51a4fcc36</anchor>
      <arglist>(const ustring &amp;lhs, const ustring &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>5c36c162303fcac90e0cad98e5d853ba</anchor>
      <arglist>(const ustring &amp;lhs, const char *rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>41d8c9b5ed68e92cab26695fc1f4ab25</anchor>
      <arglist>(const char *lhs, const ustring &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>769fa72dab1a8593936e4d1e7427d5bf</anchor>
      <arglist>(const ustring &amp;lhs, const ustring &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>fabe45d06c824249d356f845339dcf79</anchor>
      <arglist>(const ustring &amp;lhs, const char *rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>589cb7a5bbc1c182a98f9a2ddcc875ac</anchor>
      <arglist>(const char *lhs, const ustring &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>7db7cd5453e8ee3759e26bf4b6e64032</anchor>
      <arglist>(const ustring &amp;lhs, const ustring &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>33a94fc0e34c020891dbf7ce3370e4d3</anchor>
      <arglist>(const ustring &amp;lhs, const char *rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>0af331fc288b855db7a8a9a8ac4db2f1</anchor>
      <arglist>(const char *lhs, const ustring &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>2608d2a621b5dcc9d33aa70f2607c61c</anchor>
      <arglist>(const ustring &amp;lhs, const ustring &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>61c211450e992dde4d07a8ee903a06c1</anchor>
      <arglist>(const ustring &amp;lhs, const char *rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>73958401c880bdfe2dfeb5f8ebda29de</anchor>
      <arglist>(const char *lhs, const ustring &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>9ffc92d15e8c999e1de479ba49dc8f1b</anchor>
      <arglist>(const ustring &amp;lhs, const ustring &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>8b60486f4223c4aff0d7dcca8ca108e6</anchor>
      <arglist>(const ustring &amp;lhs, const char *rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>42b3c3fafd868c34b19590979b9f575c</anchor>
      <arglist>(const char *lhs, const ustring &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>0bb54254372b88a27847dada4bd57bb0</anchor>
      <arglist>(const ustring &amp;lhs, const ustring &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>501a833ed0b311598a9eef8fde525221</anchor>
      <arglist>(const ustring &amp;lhs, const char *rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>fead426b680bdfde61ba6ad91da5479f</anchor>
      <arglist>(const char *lhs, const ustring &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ustring</type>
      <name>operator+</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>6b11288ba72c136097f549369983f2ec</anchor>
      <arglist>(const ustring &amp;lhs, const ustring &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ustring</type>
      <name>operator+</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>c58ba66e58462e1ee1ff4f9408c8f351</anchor>
      <arglist>(const ustring &amp;lhs, const char *rhs)</arglist>
    </member>
    <member kind="function">
      <type>ustring</type>
      <name>operator+</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>bdd772f46a21d519578ac3795cb4a090</anchor>
      <arglist>(const char *lhs, const ustring &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ustring</type>
      <name>operator+</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>572b14b910b8a66510ab87f0ce6349d5</anchor>
      <arglist>(const ustring &amp;lhs, gunichar rhs)</arglist>
    </member>
    <member kind="function">
      <type>ustring</type>
      <name>operator+</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>d29db04ea21d148042cd8c4ad247781f</anchor>
      <arglist>(gunichar lhs, const ustring &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ustring</type>
      <name>operator+</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>7fad3f7c5b642aaad0e3cf8a9396446f</anchor>
      <arglist>(const ustring &amp;lhs, char rhs)</arglist>
    </member>
    <member kind="function">
      <type>ustring</type>
      <name>operator+</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>0d0409577fa7d97a469c1bd07367b53e</anchor>
      <arglist>(char lhs, const ustring &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::ValueBase</name>
    <filename>classGlib_1_1ValueBase.html</filename>
    <member kind="function">
      <type></type>
      <name>ValueBase</name>
      <anchorfile>classGlib_1_1ValueBase.html</anchorfile>
      <anchor>066cc345d62be564ff53b25bd11e62e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ValueBase</name>
      <anchorfile>classGlib_1_1ValueBase.html</anchorfile>
      <anchor>1af751f0ac927df5ccba7d584cb9e63f</anchor>
      <arglist>(const ValueBase &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ValueBase &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1ValueBase.html</anchorfile>
      <anchor>73ceadee7e4d2298b31d1dbe4bcd35e5</anchor>
      <arglist>(const ValueBase &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ValueBase</name>
      <anchorfile>classGlib_1_1ValueBase.html</anchorfile>
      <anchor>fc9306c3f8331458eaa66de6d352bf01</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classGlib_1_1ValueBase.html</anchorfile>
      <anchor>1659121f15f5e840cc1eba2b0aaefbb1</anchor>
      <arglist>(GType type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classGlib_1_1ValueBase.html</anchorfile>
      <anchor>1d31168845e6bb144a66904e813240e2</anchor>
      <arglist>(const GValue *value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classGlib_1_1ValueBase.html</anchorfile>
      <anchor>30c7bde0d772b87dc890da7a197c4494</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GValue *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1ValueBase.html</anchorfile>
      <anchor>33253264f47c41526ede3f78afdbe1e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GValue *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1ValueBase.html</anchorfile>
      <anchor>b8050dbb94b1708d7786d797a4657d2f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GValue</type>
      <name>gobject_</name>
      <anchorfile>classGlib_1_1ValueBase.html</anchorfile>
      <anchor>3472d8f4c0bd6513c939ee3a4633be0f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::ValueBase_Boxed</name>
    <filename>classGlib_1_1ValueBase__Boxed.html</filename>
    <base>Glib::ValueBase</base>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1ValueBase__Boxed.html</anchorfile>
      <anchor>e318a8c011c742c570a20c712f867015</anchor>
      <arglist>() G_GNUC_CONST</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set_boxed</name>
      <anchorfile>classGlib_1_1ValueBase__Boxed.html</anchorfile>
      <anchor>948e0b5fa5d14b14f67291d9ee8d5d9f</anchor>
      <arglist>(const void *data)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void *</type>
      <name>get_boxed</name>
      <anchorfile>classGlib_1_1ValueBase__Boxed.html</anchorfile>
      <anchor>ada9f8b16f9ea6da67e69808534a222f</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::ValueBase_Object</name>
    <filename>classGlib_1_1ValueBase__Object.html</filename>
    <base>Glib::ValueBase</base>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1ValueBase__Object.html</anchorfile>
      <anchor>af5e914784c20746a85ed127cfef1b43</anchor>
      <arglist>() G_GNUC_CONST</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set_object</name>
      <anchorfile>classGlib_1_1ValueBase__Object.html</anchorfile>
      <anchor>12d0e3946f35a2b07f95e01834f932c7</anchor>
      <arglist>(Glib::ObjectBase *data)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Glib::ObjectBase *</type>
      <name>get_object</name>
      <anchorfile>classGlib_1_1ValueBase__Object.html</anchorfile>
      <anchor>1f7282ba83b55da7ab6c3cc58c05ac3a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Glib::RefPtr&lt; Glib::ObjectBase &gt;</type>
      <name>get_object_copy</name>
      <anchorfile>classGlib_1_1ValueBase__Object.html</anchorfile>
      <anchor>d0641afcf8ecdd0939c5e2fc527802a0</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::ValueBase_Enum</name>
    <filename>classGlib_1_1ValueBase__Enum.html</filename>
    <base>Glib::ValueBase</base>
    <member kind="typedef">
      <type>gint</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1ValueBase__Enum.html</anchorfile>
      <anchor>a3e70968222a5e0dbd2081ef2738d176</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1ValueBase__Enum.html</anchorfile>
      <anchor>a09556f40e7864f465e44effc65cba50</anchor>
      <arglist>() G_GNUC_CONST</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set_enum</name>
      <anchorfile>classGlib_1_1ValueBase__Enum.html</anchorfile>
      <anchor>2f6c7a5ec5a223b8991f10bd0690521f</anchor>
      <arglist>(int data)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>get_enum</name>
      <anchorfile>classGlib_1_1ValueBase__Enum.html</anchorfile>
      <anchor>3986266c649b6bedf94feea0dbd2d9ae</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::ValueBase_Flags</name>
    <filename>classGlib_1_1ValueBase__Flags.html</filename>
    <base>Glib::ValueBase</base>
    <member kind="typedef">
      <type>guint</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1ValueBase__Flags.html</anchorfile>
      <anchor>7fc1b303e0c8391f47080f9775c722cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1ValueBase__Flags.html</anchorfile>
      <anchor>b2e8061a1d8f2c3c4ce3a84a6701cbaa</anchor>
      <arglist>() G_GNUC_CONST</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set_flags</name>
      <anchorfile>classGlib_1_1ValueBase__Flags.html</anchorfile>
      <anchor>28560a2e6e5d54f8f0b93abaf0da9eee</anchor>
      <arglist>(unsigned int data)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>unsigned int</type>
      <name>get_flags</name>
      <anchorfile>classGlib_1_1ValueBase__Flags.html</anchorfile>
      <anchor>830e8b2fc793376afc10416f70cce1c5</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::ValueBase_String</name>
    <filename>classGlib_1_1ValueBase__String.html</filename>
    <base>Glib::ValueBase</base>
    <member kind="typedef">
      <type>const gchar *</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1ValueBase__String.html</anchorfile>
      <anchor>699ddec928e03622e7b3d51cfe3ab96b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1ValueBase__String.html</anchorfile>
      <anchor>628083f9e48548b7121b4b320828bb89</anchor>
      <arglist>() G_GNUC_CONST</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set_cstring</name>
      <anchorfile>classGlib_1_1ValueBase__String.html</anchorfile>
      <anchor>ef09ab6b77be252853c1e13d28129f17</anchor>
      <arglist>(const char *data)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const char *</type>
      <name>get_cstring</name>
      <anchorfile>classGlib_1_1ValueBase__String.html</anchorfile>
      <anchor>4df7d13a576f0b2312050ba7c25f1775</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Value_Boxed</name>
    <filename>classGlib_1_1Value__Boxed.html</filename>
    <templarg>T</templarg>
    <base>Glib::ValueBase_Boxed</base>
    <member kind="typedef">
      <type>T</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Value__Boxed.html</anchorfile>
      <anchor>fe1dd4bc58dcd49a38f25c66a300f5fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::BaseObjectType *</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Value__Boxed.html</anchorfile>
      <anchor>9e0550be1bd0036cbd16a17fa0982257</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classGlib_1_1Value__Boxed.html</anchorfile>
      <anchor>26519e4ae30215089c64eac002a4c681</anchor>
      <arglist>(const CppType &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>CppType</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Value__Boxed.html</anchorfile>
      <anchor>82ea4b97e9d6c0e8a0b274b1ef99aeaf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1Value__Boxed.html</anchorfile>
      <anchor>3e53b3ba7cb78f6cc837c7d2636919fe</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Value_Enum</name>
    <filename>classGlib_1_1Value__Enum.html</filename>
    <templarg>T</templarg>
    <base>Glib::ValueBase_Enum</base>
    <member kind="typedef">
      <type>T</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Value__Enum.html</anchorfile>
      <anchor>47c0048474ce8024a46fbbc188eba4bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classGlib_1_1Value__Enum.html</anchorfile>
      <anchor>43e5aed8e5125a59a9dd4eb0de6eb93c</anchor>
      <arglist>(CppType data)</arglist>
    </member>
    <member kind="function">
      <type>CppType</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Value__Enum.html</anchorfile>
      <anchor>84efc2d936d8e7b61fdff09d32ae460c</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Value_Flags</name>
    <filename>classGlib_1_1Value__Flags.html</filename>
    <templarg>T</templarg>
    <base>Glib::ValueBase_Flags</base>
    <member kind="typedef">
      <type>T</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Value__Flags.html</anchorfile>
      <anchor>89b8d0aec7d3742a0252e031f2739bbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classGlib_1_1Value__Flags.html</anchorfile>
      <anchor>a097ffbbc6a4e925b34c369dcaaeec8e</anchor>
      <arglist>(CppType data)</arglist>
    </member>
    <member kind="function">
      <type>CppType</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Value__Flags.html</anchorfile>
      <anchor>fc17466944bafc2d94d3ff445bb99a78</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Value&lt; bool &gt;</name>
    <filename>classGlib_1_1Value_3_01bool_01_4.html</filename>
    <base>Glib::ValueBase</base>
    <member kind="typedef">
      <type>bool</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Value_3_01bool_01_4.html</anchorfile>
      <anchor>e88fb44930dbc920dac73e65c99e730c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>gboolean</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Value_3_01bool_01_4.html</anchorfile>
      <anchor>03e98e6b149669bab502ab2b40430125</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classGlib_1_1Value_3_01bool_01_4.html</anchorfile>
      <anchor>9fbbbc99675113812fad12fdda11a0f2</anchor>
      <arglist>(bool data)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Value_3_01bool_01_4.html</anchorfile>
      <anchor>c15f58528e1d076a95864787c1a5798f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1Value_3_01bool_01_4.html</anchorfile>
      <anchor>e4096d2ca258b9aea5802a04925e79eb</anchor>
      <arglist>() G_GNUC_CONST</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Value&lt; char &gt;</name>
    <filename>classGlib_1_1Value_3_01char_01_4.html</filename>
    <base>Glib::ValueBase</base>
    <member kind="typedef">
      <type>char</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Value_3_01char_01_4.html</anchorfile>
      <anchor>ce3fb1ef40b0bb9bd7531b29fd7c23c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>gchar</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Value_3_01char_01_4.html</anchorfile>
      <anchor>a73240b41e9a7a5070d059cf48998b54</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classGlib_1_1Value_3_01char_01_4.html</anchorfile>
      <anchor>2de97ae867d772bdb9da89e1359217bc</anchor>
      <arglist>(char data)</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Value_3_01char_01_4.html</anchorfile>
      <anchor>4d7b34e59b6c4794068cc81c0e9fa451</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1Value_3_01char_01_4.html</anchorfile>
      <anchor>01139eef034a2f2bf673d64597a82eef</anchor>
      <arglist>() G_GNUC_CONST</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Value&lt; unsigned char &gt;</name>
    <filename>classGlib_1_1Value_3_01unsigned_01char_01_4.html</filename>
    <base>Glib::ValueBase</base>
    <member kind="typedef">
      <type>unsigned char</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Value_3_01unsigned_01char_01_4.html</anchorfile>
      <anchor>12690f5fdde4602c8be31f5641671d79</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>guchar</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Value_3_01unsigned_01char_01_4.html</anchorfile>
      <anchor>a6e944a254862b4172ffb2f73f164b20</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classGlib_1_1Value_3_01unsigned_01char_01_4.html</anchorfile>
      <anchor>ab3178311695a913986d7e7741f65ccc</anchor>
      <arglist>(unsigned char data)</arglist>
    </member>
    <member kind="function">
      <type>unsigned char</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Value_3_01unsigned_01char_01_4.html</anchorfile>
      <anchor>d9052868813c9a91b8f74e98aafc8cf2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1Value_3_01unsigned_01char_01_4.html</anchorfile>
      <anchor>6a8af89e70efa08e661c166c9d4a4e50</anchor>
      <arglist>() G_GNUC_CONST</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Value&lt; int &gt;</name>
    <filename>classGlib_1_1Value_3_01int_01_4.html</filename>
    <base>Glib::ValueBase</base>
    <member kind="typedef">
      <type>int</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Value_3_01int_01_4.html</anchorfile>
      <anchor>488f430153510c8234488c2616fbab8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>gint</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Value_3_01int_01_4.html</anchorfile>
      <anchor>a49fa1442738ee32438f57060a5c5495</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classGlib_1_1Value_3_01int_01_4.html</anchorfile>
      <anchor>bd4c8e675046c0010591b10116c9e3aa</anchor>
      <arglist>(int data)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Value_3_01int_01_4.html</anchorfile>
      <anchor>11ee320cab4dd4d8b16a76764cbc1a2f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1Value_3_01int_01_4.html</anchorfile>
      <anchor>eb1b89192ac7c5016722864f1d1a472b</anchor>
      <arglist>() G_GNUC_CONST</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Value&lt; unsigned int &gt;</name>
    <filename>classGlib_1_1Value_3_01unsigned_01int_01_4.html</filename>
    <base>Glib::ValueBase</base>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Value_3_01unsigned_01int_01_4.html</anchorfile>
      <anchor>9f4c47503ccda8cc3cb8df5ba53ef4dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>guint</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Value_3_01unsigned_01int_01_4.html</anchorfile>
      <anchor>3bc327c92170cb334e4ed7c0e95f4ac4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classGlib_1_1Value_3_01unsigned_01int_01_4.html</anchorfile>
      <anchor>c3fda3995e4a33f71f359785d8fa8a88</anchor>
      <arglist>(unsigned int data)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Value_3_01unsigned_01int_01_4.html</anchorfile>
      <anchor>6cc745b3b9d106ea2a4f5ccb5eb16722</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1Value_3_01unsigned_01int_01_4.html</anchorfile>
      <anchor>4b2226e75b628210c47d25d428ddb098</anchor>
      <arglist>() G_GNUC_CONST</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Value&lt; long &gt;</name>
    <filename>classGlib_1_1Value_3_01long_01_4.html</filename>
    <base>Glib::ValueBase</base>
    <member kind="typedef">
      <type>long</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Value_3_01long_01_4.html</anchorfile>
      <anchor>2438871713d4f6fa942cf5321bfc543a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>glong</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Value_3_01long_01_4.html</anchorfile>
      <anchor>5acd60426eb1c8237812342aa115f856</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classGlib_1_1Value_3_01long_01_4.html</anchorfile>
      <anchor>8e572e84d90bf91abfb7dd5b476e5b9e</anchor>
      <arglist>(long data)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Value_3_01long_01_4.html</anchorfile>
      <anchor>948ae4d98cf20efe9bc7ac30686af7a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1Value_3_01long_01_4.html</anchorfile>
      <anchor>5dc21e361acfb05349f04c6d53c41cf6</anchor>
      <arglist>() G_GNUC_CONST</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Value&lt; unsigned long &gt;</name>
    <filename>classGlib_1_1Value_3_01unsigned_01long_01_4.html</filename>
    <base>Glib::ValueBase</base>
    <member kind="typedef">
      <type>unsigned long</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Value_3_01unsigned_01long_01_4.html</anchorfile>
      <anchor>356e9890b6eefb45260c0ad4cfb731f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>gulong</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Value_3_01unsigned_01long_01_4.html</anchorfile>
      <anchor>c21b6d7d6e739939ccd318c9449f8ab3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classGlib_1_1Value_3_01unsigned_01long_01_4.html</anchorfile>
      <anchor>89a290484aa20b8299a66b1023e8f135</anchor>
      <arglist>(unsigned long data)</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Value_3_01unsigned_01long_01_4.html</anchorfile>
      <anchor>9b4981d84a70b62e440c5c91e217aed8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1Value_3_01unsigned_01long_01_4.html</anchorfile>
      <anchor>628dd6127ee26763d655dfdf62eda021</anchor>
      <arglist>() G_GNUC_CONST</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Value&lt; long long &gt;</name>
    <filename>classGlib_1_1Value_3_01long_01long_01_4.html</filename>
    <base>Glib::ValueBase</base>
    <member kind="typedef">
      <type>long long</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Value_3_01long_01long_01_4.html</anchorfile>
      <anchor>bc1c49c64d34fc457730f6da71c02b8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>gint64</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Value_3_01long_01long_01_4.html</anchorfile>
      <anchor>35059c27560d29558671037cc7a7eca6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classGlib_1_1Value_3_01long_01long_01_4.html</anchorfile>
      <anchor>5f9d39c582e8eebccddf95614c45a8a6</anchor>
      <arglist>(long long data)</arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Value_3_01long_01long_01_4.html</anchorfile>
      <anchor>18fb60e520c80f2a7e089ca74d66b9c2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1Value_3_01long_01long_01_4.html</anchorfile>
      <anchor>571aabfd4a67cf697d24bb11fa13a03c</anchor>
      <arglist>() G_GNUC_CONST</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Value&lt; unsigned long long &gt;</name>
    <filename>classGlib_1_1Value_3_01unsigned_01long_01long_01_4.html</filename>
    <base>Glib::ValueBase</base>
    <member kind="typedef">
      <type>unsigned long long</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Value_3_01unsigned_01long_01long_01_4.html</anchorfile>
      <anchor>56c12feb80208cb23be5caef7db06012</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>guint64</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Value_3_01unsigned_01long_01long_01_4.html</anchorfile>
      <anchor>6bc8edb39e7e3ee0b26ee993ebbd7d8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classGlib_1_1Value_3_01unsigned_01long_01long_01_4.html</anchorfile>
      <anchor>190b1c8b1a2496a9b139d98c465eaffa</anchor>
      <arglist>(unsigned long long data)</arglist>
    </member>
    <member kind="function">
      <type>unsigned long long</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Value_3_01unsigned_01long_01long_01_4.html</anchorfile>
      <anchor>516c72a7c3c8e215db3fed4ed78d4b74</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1Value_3_01unsigned_01long_01long_01_4.html</anchorfile>
      <anchor>af17ea75fa63c7bcd821d3cb97ea7c64</anchor>
      <arglist>() G_GNUC_CONST</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Value&lt; float &gt;</name>
    <filename>classGlib_1_1Value_3_01float_01_4.html</filename>
    <base>Glib::ValueBase</base>
    <member kind="typedef">
      <type>float</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Value_3_01float_01_4.html</anchorfile>
      <anchor>433a5e8f5ef4b7acb5380c4caf8c3ea8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>gfloat</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Value_3_01float_01_4.html</anchorfile>
      <anchor>0be64034f31780a00829318259a5b7f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classGlib_1_1Value_3_01float_01_4.html</anchorfile>
      <anchor>14489a9eb51ff17ac80f07ecc1ac9c15</anchor>
      <arglist>(float data)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Value_3_01float_01_4.html</anchorfile>
      <anchor>7a63eac6755dd38d690ffa0d5d07d13e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1Value_3_01float_01_4.html</anchorfile>
      <anchor>eee8630e1e33db78aa94288f3ff454a5</anchor>
      <arglist>() G_GNUC_CONST</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Value&lt; double &gt;</name>
    <filename>classGlib_1_1Value_3_01double_01_4.html</filename>
    <base>Glib::ValueBase</base>
    <member kind="typedef">
      <type>double</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Value_3_01double_01_4.html</anchorfile>
      <anchor>26d2764c822a4d9df661bd0bc8fd9f86</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>gdouble</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Value_3_01double_01_4.html</anchorfile>
      <anchor>d421fba746b8423ad60a944c0ae42a9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classGlib_1_1Value_3_01double_01_4.html</anchorfile>
      <anchor>ef6e3c7dfda4a135bb2ee37b4ba468f8</anchor>
      <arglist>(double data)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Value_3_01double_01_4.html</anchorfile>
      <anchor>f1d30d9013028b281b80e17acd1021a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1Value_3_01double_01_4.html</anchorfile>
      <anchor>053c3303b2eb01debbb0a9666e588d3a</anchor>
      <arglist>() G_GNUC_CONST</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Value&lt; void * &gt;</name>
    <filename>classGlib_1_1Value_3_01void_01_5_01_4.html</filename>
    <base>Glib::ValueBase</base>
    <member kind="typedef">
      <type>void *</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Value_3_01void_01_5_01_4.html</anchorfile>
      <anchor>6aee0d99ba9bc3a023b71955f3f8d507</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>gpointer</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Value_3_01void_01_5_01_4.html</anchorfile>
      <anchor>bab9376bc45d880dd7d5159b8a0fb3c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classGlib_1_1Value_3_01void_01_5_01_4.html</anchorfile>
      <anchor>30f8bdfdaa2391c0a4f60f179ac30082</anchor>
      <arglist>(void *data)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Value_3_01void_01_5_01_4.html</anchorfile>
      <anchor>d501fcb3182b6d49a48d0a240b5a4efe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1Value_3_01void_01_5_01_4.html</anchorfile>
      <anchor>0e0ef137e6496915e0e1aef96d5dfa7c</anchor>
      <arglist>() G_GNUC_CONST</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Value_Pointer</name>
    <filename>classGlib_1_1Value__Pointer.html</filename>
    <templarg>T</templarg>
    <templarg>PtrT</templarg>
    <base>Glib::ValueBase_Object</base>
    <member kind="typedef">
      <type>PtrT</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Value__Pointer.html</anchorfile>
      <anchor>809c5275bcaa7ef88abf6858b634c7b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void *</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Value__Pointer.html</anchorfile>
      <anchor>9447a5e332b50ccbc223c621da09a207</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classGlib_1_1Value__Pointer.html</anchorfile>
      <anchor>d4b2133d4d67bfc3100bee5ce8ac7aaa</anchor>
      <arglist>(CppType data)</arglist>
    </member>
    <member kind="function">
      <type>CppType</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Value__Pointer.html</anchorfile>
      <anchor>3003fa507c1c4d9ed52936ea7b8d0220</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1Value__Pointer.html</anchorfile>
      <anchor>78bc94c0dd223084d3b602ed058b639f</anchor>
      <arglist>() G_GNUC_CONST</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Value</name>
    <filename>classGlib_1_1Value.html</filename>
    <templarg>T</templarg>
    <base>Glib::ValueBase_Boxed</base>
    <member kind="typedef">
      <type>T</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Value.html</anchorfile>
      <anchor>43ab35a7b991e3a3383e25315593b942</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T *</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Value.html</anchorfile>
      <anchor>c841aa34bcc65ae94ea869ae8cb6ef20</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classGlib_1_1Value.html</anchorfile>
      <anchor>d9750eff16879524796c8c13d4045c0e</anchor>
      <arglist>(const CppType &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>CppType</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Value.html</anchorfile>
      <anchor>8639f0b564d3f68d99c6a7295367f5be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1Value.html</anchorfile>
      <anchor>1a78ff909a3caf8062b9243aef39c6af</anchor>
      <arglist>() G_GNUC_CONST</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Value&lt; T * &gt;</name>
    <filename>classGlib_1_1Value_3_01T_01_5_01_4.html</filename>
    <templarg>T</templarg>
    <base>Glib::Value_Pointer&lt; T, T * &gt;</base>
  </compound>
  <compound kind="class">
    <name>Glib::Value&lt; const T * &gt;</name>
    <filename>classGlib_1_1Value_3_01const_01T_01_5_01_4.html</filename>
    <templarg>T</templarg>
    <base>Glib::Value_Pointer</base>
  </compound>
  <compound kind="class">
    <name>Glib::Value&lt; std::string &gt;</name>
    <filename>classGlib_1_1Value_3_01std_1_1string_01_4.html</filename>
    <base>Glib::ValueBase_String</base>
    <member kind="typedef">
      <type>std::string</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Value_3_01std_1_1string_01_4.html</anchorfile>
      <anchor>f58206c175d88442790af8968ff39238</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classGlib_1_1Value_3_01std_1_1string_01_4.html</anchorfile>
      <anchor>8e5930246b7013936186f464cff72ac0</anchor>
      <arglist>(const std::string &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Value_3_01std_1_1string_01_4.html</anchorfile>
      <anchor>d0e8f4a5f43bed22382bf3e824579264</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Value&lt; Glib::ustring &gt;</name>
    <filename>classGlib_1_1Value_3_01Glib_1_1ustring_01_4.html</filename>
    <base>Glib::ValueBase_String</base>
    <member kind="typedef">
      <type>Glib::ustring</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Value_3_01Glib_1_1ustring_01_4.html</anchorfile>
      <anchor>c6e6db38eac3192d12f7173733d589b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classGlib_1_1Value_3_01Glib_1_1ustring_01_4.html</anchorfile>
      <anchor>bb7f8cc0a7fc1b81b7e94e7959336690</anchor>
      <arglist>(const Glib::ustring &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Value_3_01Glib_1_1ustring_01_4.html</anchorfile>
      <anchor>4719b097ab75e65961538ddd180c7714</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Glib::Ascii</name>
    <filename>namespaceGlib_1_1Ascii.html</filename>
    <member kind="function">
      <type>double</type>
      <name>strtod</name>
      <anchorfile>group__StringUtils.html</anchorfile>
      <anchor>ga44aba9faa6575d4881b1fe779464f6b</anchor>
      <arglist>(const std::string &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>strtod</name>
      <anchorfile>group__StringUtils.html</anchorfile>
      <anchor>g6465a8320d790115c41a2c76d1d3233c</anchor>
      <arglist>(const std::string &amp;str, std::string::size_type &amp;end_index, std::string::size_type start_index=0)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>dtostr</name>
      <anchorfile>group__StringUtils.html</anchorfile>
      <anchor>gc740e6c99bca5896ccbfc12b621491ac</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isalnum</name>
      <anchorfile>namespaceGlib_1_1Ascii.html</anchorfile>
      <anchor>237f239d63fea6102675733dc5ad4532</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isalpha</name>
      <anchorfile>namespaceGlib_1_1Ascii.html</anchorfile>
      <anchor>0b553edea22d284c188942fab794cc78</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>iscntrl</name>
      <anchorfile>namespaceGlib_1_1Ascii.html</anchorfile>
      <anchor>fa8fe78a0c26cc3827c6240785aa135d</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isdigit</name>
      <anchorfile>namespaceGlib_1_1Ascii.html</anchorfile>
      <anchor>65a4e1ccf3858e96bcedc19d2f4b11dd</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isgraph</name>
      <anchorfile>namespaceGlib_1_1Ascii.html</anchorfile>
      <anchor>7f484ef6bd6d06df723e31b357f868a3</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>islower</name>
      <anchorfile>namespaceGlib_1_1Ascii.html</anchorfile>
      <anchor>cae72029ba931a9921a685f5a9aae892</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isprint</name>
      <anchorfile>namespaceGlib_1_1Ascii.html</anchorfile>
      <anchor>8157fffa4686d541c5953fc8e12f5cfa</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ispunct</name>
      <anchorfile>namespaceGlib_1_1Ascii.html</anchorfile>
      <anchor>7fb86bc4209b57cfb3c4f52b841d73e4</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isspace</name>
      <anchorfile>namespaceGlib_1_1Ascii.html</anchorfile>
      <anchor>a09ae30b62f155b8921cc9982342a314</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isupper</name>
      <anchorfile>namespaceGlib_1_1Ascii.html</anchorfile>
      <anchor>7f02fe9caa1467a4cfd4de81b9f29ac5</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isxdigit</name>
      <anchorfile>namespaceGlib_1_1Ascii.html</anchorfile>
      <anchor>d56e2eca24891cbfbc94c5466f33ba7e</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>tolower</name>
      <anchorfile>namespaceGlib_1_1Ascii.html</anchorfile>
      <anchor>441978a247c1dc46bbe7159fa25c4365</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>toupper</name>
      <anchorfile>namespaceGlib_1_1Ascii.html</anchorfile>
      <anchor>ffdbf0a8cc3cf286605a0ead51e524f6</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>digit_value</name>
      <anchorfile>namespaceGlib_1_1Ascii.html</anchorfile>
      <anchor>597106ad0bd771bef0698ca1482db880</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>xdigit_value</name>
      <anchorfile>namespaceGlib_1_1Ascii.html</anchorfile>
      <anchor>06d4bb1120cb8b48f7a8a4f1e9aeab53</anchor>
      <arglist>(char c)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Glib::Container_Helpers</name>
    <filename>namespaceGlib_1_1Container__Helpers.html</filename>
    <class kind="class">Glib::Container_Helpers::ArrayHandleIterator</class>
    <class kind="struct">Glib::Container_Helpers::TypeTraits</class>
    <class kind="class">Glib::Container_Helpers::ListHandleIterator</class>
    <class kind="class">Glib::Container_Helpers::SListHandleIterator</class>
  </compound>
  <compound kind="class">
    <name>Glib::Container_Helpers::ArrayHandleIterator</name>
    <filename>classGlib_1_1Container__Helpers_1_1ArrayHandleIterator.html</filename>
    <templarg>Tr</templarg>
    <member kind="typedef">
      <type>Tr::CppType</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayHandleIterator.html</anchorfile>
      <anchor>dff3475e83502a37f3d0dc29fa358e6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Tr::CType</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayHandleIterator.html</anchorfile>
      <anchor>965b558895aaee9558d78b18a4726e8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::random_access_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayHandleIterator.html</anchorfile>
      <anchor>9443f5a4ee0363391678a6b7e0df752b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CppType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayHandleIterator.html</anchorfile>
      <anchor>44b34dcb119a8fc76b8c006373becc16</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayHandleIterator.html</anchorfile>
      <anchor>cbf9c620e668311ccab6f8abc980c38c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type</type>
      <name>reference</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayHandleIterator.html</anchorfile>
      <anchor>3f1045d400a53be16e881e62c1d5cc0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>pointer</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayHandleIterator.html</anchorfile>
      <anchor>a6045b91a0212c6a175b6dee36f5e3ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrayHandleIterator</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayHandleIterator.html</anchorfile>
      <anchor>709ec1305f27a10ba5f1527e055231ac</anchor>
      <arglist>(const CType *pos)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>operator *</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayHandleIterator.html</anchorfile>
      <anchor>112be30937aaeebd626efcdad5a2469f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>operator[]</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayHandleIterator.html</anchorfile>
      <anchor>b6c88a12c97d54b2f5f25e4edc53edc8</anchor>
      <arglist>(difference_type offset) const </arglist>
    </member>
    <member kind="function">
      <type>ArrayHandleIterator&lt; Tr &gt; &amp;</type>
      <name>operator++</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayHandleIterator.html</anchorfile>
      <anchor>7af3c97787eb1f21de2ce787f5868dc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ArrayHandleIterator&lt; Tr &gt;</type>
      <name>operator++</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayHandleIterator.html</anchorfile>
      <anchor>367eb894a1d4ef9f294aa80babe3099f</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>ArrayHandleIterator&lt; Tr &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayHandleIterator.html</anchorfile>
      <anchor>9aec914efc7f70a869a7784274ebf84b</anchor>
      <arglist>(difference_type rhs)</arglist>
    </member>
    <member kind="function">
      <type>ArrayHandleIterator&lt; Tr &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayHandleIterator.html</anchorfile>
      <anchor>eaea65c60785bd648a91fd509fe7da42</anchor>
      <arglist>(difference_type rhs)</arglist>
    </member>
    <member kind="function">
      <type>const ArrayHandleIterator&lt; Tr &gt;</type>
      <name>operator+</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayHandleIterator.html</anchorfile>
      <anchor>01667e4c2eec88c09b70af6ed4f04236</anchor>
      <arglist>(difference_type rhs) const </arglist>
    </member>
    <member kind="function">
      <type>const ArrayHandleIterator&lt; Tr &gt;</type>
      <name>operator-</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayHandleIterator.html</anchorfile>
      <anchor>910ed1623ac20c62415c6f9dae2fbc31</anchor>
      <arglist>(difference_type rhs) const </arglist>
    </member>
    <member kind="function">
      <type>difference_type</type>
      <name>operator-</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayHandleIterator.html</anchorfile>
      <anchor>343b0e83133bf4c0b4d81f9ffa0680c9</anchor>
      <arglist>(const ArrayHandleIterator&lt; Tr &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayHandleIterator.html</anchorfile>
      <anchor>5c9a60ba1ef1254957846696e325c22e</anchor>
      <arglist>(const ArrayHandleIterator&lt; Tr &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayHandleIterator.html</anchorfile>
      <anchor>00cfeb8f26bf3d5fedc64c6fd7ea51f7</anchor>
      <arglist>(const ArrayHandleIterator&lt; Tr &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayHandleIterator.html</anchorfile>
      <anchor>448b00c676c876123f0f7c3c06e98399</anchor>
      <arglist>(const ArrayHandleIterator&lt; Tr &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayHandleIterator.html</anchorfile>
      <anchor>d92dda17b4e08feeedd9cdf19c25f7f8</anchor>
      <arglist>(const ArrayHandleIterator&lt; Tr &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayHandleIterator.html</anchorfile>
      <anchor>d559afbb2c7b51b0c4689febc0afac9e</anchor>
      <arglist>(const ArrayHandleIterator&lt; Tr &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayHandleIterator.html</anchorfile>
      <anchor>1ff27e015e1197fe7815d0c931bb8004</anchor>
      <arglist>(const ArrayHandleIterator&lt; Tr &gt; &amp;rhs) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Glib::Container_Helpers::TypeTraits</name>
    <filename>structGlib_1_1Container__Helpers_1_1TypeTraits.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>CppType</name>
      <anchorfile>structGlib_1_1Container__Helpers_1_1TypeTraits.html</anchorfile>
      <anchor>c8674dd3a910b6687a2eb99a8b049ef9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>CType</name>
      <anchorfile>structGlib_1_1Container__Helpers_1_1TypeTraits.html</anchorfile>
      <anchor>255875880315ff4d66e05f285380a94d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>CTypeNonConst</name>
      <anchorfile>structGlib_1_1Container__Helpers_1_1TypeTraits.html</anchorfile>
      <anchor>47927adfe9619705b0a0fd015539c705</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CType</type>
      <name>to_c_type</name>
      <anchorfile>structGlib_1_1Container__Helpers_1_1TypeTraits.html</anchorfile>
      <anchor>3c7532f3fc3a23d440a3b1c9b4c5d569</anchor>
      <arglist>(const CppType &amp;item)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CppType</type>
      <name>to_cpp_type</name>
      <anchorfile>structGlib_1_1Container__Helpers_1_1TypeTraits.html</anchorfile>
      <anchor>6b238c68d4ccf001b0448c229c2e95c3</anchor>
      <arglist>(const CType &amp;item)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>release_c_type</name>
      <anchorfile>structGlib_1_1Container__Helpers_1_1TypeTraits.html</anchorfile>
      <anchor>2c83ea71bbe91a6edbcc0f5c364dadd3</anchor>
      <arglist>(const CType &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Container_Helpers::ListHandleIterator</name>
    <filename>classGlib_1_1Container__Helpers_1_1ListHandleIterator.html</filename>
    <templarg>Tr</templarg>
    <member kind="typedef">
      <type>Tr::CppType</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ListHandleIterator.html</anchorfile>
      <anchor>c2402a5186067981f72d6e21736d93b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Tr::CType</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ListHandleIterator.html</anchorfile>
      <anchor>67610a82695dbfd1e74f0973e9678cbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::forward_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ListHandleIterator.html</anchorfile>
      <anchor>e2691a6d2f7d64bcd7d0b698a9bb758c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CppType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ListHandleIterator.html</anchorfile>
      <anchor>95ec1de19679cec5e8fc357643fbf106</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ListHandleIterator.html</anchorfile>
      <anchor>2bf8ae8976e6cb7bf37123155666a36a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type</type>
      <name>reference</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ListHandleIterator.html</anchorfile>
      <anchor>4c826a0c6395e6e08560771577bdc687</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>pointer</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ListHandleIterator.html</anchorfile>
      <anchor>4bd9eb806e945f81d06c5e6ceb85258d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ListHandleIterator</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ListHandleIterator.html</anchorfile>
      <anchor>84fef11f5e094c1bb93d42230d8ffccc</anchor>
      <arglist>(const GList *node)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>operator *</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ListHandleIterator.html</anchorfile>
      <anchor>e80076b4c27dd703cf08c2555479d43d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ListHandleIterator&lt; Tr &gt; &amp;</type>
      <name>operator++</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ListHandleIterator.html</anchorfile>
      <anchor>7cc9afbcb243ab911dbdeebfdb0109a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ListHandleIterator&lt; Tr &gt;</type>
      <name>operator++</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ListHandleIterator.html</anchorfile>
      <anchor>f7a2724416fb63a7999e0bab08028b83</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ListHandleIterator.html</anchorfile>
      <anchor>9242153510f70bd61e84d77f7625c0d6</anchor>
      <arglist>(const ListHandleIterator&lt; Tr &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ListHandleIterator.html</anchorfile>
      <anchor>3f1583c79cec6d9d90cd6a16d07aa753</anchor>
      <arglist>(const ListHandleIterator&lt; Tr &gt; &amp;rhs) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Container_Helpers::SListHandleIterator</name>
    <filename>classGlib_1_1Container__Helpers_1_1SListHandleIterator.html</filename>
    <templarg>Tr</templarg>
    <member kind="typedef">
      <type>Tr::CppType</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1SListHandleIterator.html</anchorfile>
      <anchor>b13f3bd444bd76ff2b4724b8452a6441</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Tr::CType</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1SListHandleIterator.html</anchorfile>
      <anchor>ecb831763ee474abe8e2b534177ecee1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::forward_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1SListHandleIterator.html</anchorfile>
      <anchor>d8a9e6331094733970e281c2f5c75567</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CppType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1SListHandleIterator.html</anchorfile>
      <anchor>248e7cc7c0e88effb208fbc4237a20e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1SListHandleIterator.html</anchorfile>
      <anchor>053a7eadc116fb6f57241882dc5bdd15</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type</type>
      <name>reference</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1SListHandleIterator.html</anchorfile>
      <anchor>de98ba1b16eff09a135deb10ec00e4b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>pointer</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1SListHandleIterator.html</anchorfile>
      <anchor>45bf5e1f6d31ae05172c72b8dd7effd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SListHandleIterator</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1SListHandleIterator.html</anchorfile>
      <anchor>400ac29db268beae7ef6ee53a9b12932</anchor>
      <arglist>(const GSList *node)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>operator *</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1SListHandleIterator.html</anchorfile>
      <anchor>b02a087badf8cefca0e06cd6ccdd8cad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SListHandleIterator&lt; Tr &gt; &amp;</type>
      <name>operator++</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1SListHandleIterator.html</anchorfile>
      <anchor>1dff0d5d688af87a8fd7494efac16b85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SListHandleIterator&lt; Tr &gt;</type>
      <name>operator++</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1SListHandleIterator.html</anchorfile>
      <anchor>0d78b286f03a60cb52696d2c54eaa482</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1SListHandleIterator.html</anchorfile>
      <anchor>2b75a40dc9b1e8219374f3db19ed7741</anchor>
      <arglist>(const SListHandleIterator&lt; Tr &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1SListHandleIterator.html</anchorfile>
      <anchor>13ca5ae3df96c2be3976c8284988fc99</anchor>
      <arglist>(const SListHandleIterator&lt; Tr &gt; &amp;rhs) const </arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Glib::Markup</name>
    <filename>namespaceGlib_1_1Markup.html</filename>
    <class kind="class">Glib::Markup::AttributeKeyLess</class>
    <class kind="class">Glib::Markup::Parser</class>
    <class kind="class">Glib::Markup::ParseContext</class>
    <member kind="typedef">
      <type>Glib::MarkupError</type>
      <name>Error</name>
      <anchorfile>group__Markup.html</anchorfile>
      <anchor>g7d0403c76601e7d3ba4641737e094e77</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ParseFlags</name>
      <anchor>ga4fcaf917b6eb2aa085817e83b0a4108</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DO_NOT_USE_THIS_UNSUPPORTED_FLAG</name>
      <anchor>gga4fcaf917b6eb2aa085817e83b0a41083f48cb56dd56d529c9379ae244441e90</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>escape_text</name>
      <anchorfile>group__Markup.html</anchorfile>
      <anchor>gc95c5843d8dada8449f90f2fd635feb1</anchor>
      <arglist>(const Glib::ustring &amp;text)</arglist>
    </member>
    <member kind="function">
      <type>ParseFlags</type>
      <name>operator|</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g330303c9d78eb78547012d549d4bb018</anchor>
      <arglist>(ParseFlags lhs, ParseFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ParseFlags</type>
      <name>operator &amp;</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g047083096ed55facc653af5bee27ac66</anchor>
      <arglist>(ParseFlags lhs, ParseFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ParseFlags</type>
      <name>operator^</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gb059cb7acda2b29eb2066958fc71951a</anchor>
      <arglist>(ParseFlags lhs, ParseFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ParseFlags</type>
      <name>operator~</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g1fb97b62ae844c056b400e2813a21ee2</anchor>
      <arglist>(ParseFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>ParseFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g6b24d718f166cb352be94ee6e4090296</anchor>
      <arglist>(ParseFlags &amp;lhs, ParseFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ParseFlags &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>g084074808cf89b0b36f257af49dc9bac</anchor>
      <arglist>(ParseFlags &amp;lhs, ParseFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ParseFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gf59b9479390c508dff23dba221177bcc</anchor>
      <arglist>(ParseFlags &amp;lhs, ParseFlags rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Markup::AttributeKeyLess</name>
    <filename>classGlib_1_1Markup_1_1AttributeKeyLess.html</filename>
    <member kind="typedef">
      <type>Glib::ustring</type>
      <name>first_argument_type</name>
      <anchorfile>classGlib_1_1Markup_1_1AttributeKeyLess.html</anchorfile>
      <anchor>a895a53dfd0959afb851bde44ba25a56</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Glib::ustring</type>
      <name>second_argument_type</name>
      <anchorfile>classGlib_1_1Markup_1_1AttributeKeyLess.html</anchorfile>
      <anchor>582ece5a1a2865e997e2df0f341b0ed0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>bool</type>
      <name>result_type</name>
      <anchorfile>classGlib_1_1Markup_1_1AttributeKeyLess.html</anchorfile>
      <anchor>a640c46e68bcaa011cee7f72284f3b33</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classGlib_1_1Markup_1_1AttributeKeyLess.html</anchorfile>
      <anchor>9ec46a3ed1da9e184aeb9b593803aa97</anchor>
      <arglist>(const Glib::ustring &amp;lhs, const Glib::ustring &amp;rhs) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Markup::Parser</name>
    <filename>classGlib_1_1Markup_1_1Parser.html</filename>
    <base>sigc::trackable</base>
    <member kind="typedef">
      <type>std::map&lt; Glib::ustring, Glib::ustring, Glib::Markup::AttributeKeyLess &gt;</type>
      <name>AttributeMap</name>
      <anchorfile>classGlib_1_1Markup_1_1Parser.html</anchorfile>
      <anchor>65bc2af877b64b3077f8635ef81213dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual</type>
      <name>~Parser</name>
      <anchorfile>classGlib_1_1Markup_1_1Parser.html</anchorfile>
      <anchor>9932a9141e04ece2d063dad4eefa0380</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Parser</name>
      <anchorfile>classGlib_1_1Markup_1_1Parser.html</anchorfile>
      <anchor>b36908e49f4d711f0490837f4d1cdfe7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_start_element</name>
      <anchorfile>classGlib_1_1Markup_1_1Parser.html</anchorfile>
      <anchor>e6d6ae3c4f3aab7c2ee22a079fcb7915</anchor>
      <arglist>(ParseContext &amp;context, const Glib::ustring &amp;element_name, const AttributeMap &amp;attributes)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_end_element</name>
      <anchorfile>classGlib_1_1Markup_1_1Parser.html</anchorfile>
      <anchor>c0917070686ec7dc72d544feeda24942</anchor>
      <arglist>(ParseContext &amp;context, const Glib::ustring &amp;element_name)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_text</name>
      <anchorfile>classGlib_1_1Markup_1_1Parser.html</anchorfile>
      <anchor>481ae1c7007fe49e968bfc4393b9ad3d</anchor>
      <arglist>(ParseContext &amp;context, const Glib::ustring &amp;text)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_passthrough</name>
      <anchorfile>classGlib_1_1Markup_1_1Parser.html</anchorfile>
      <anchor>2f01a92bf1571497c23cfc38137751a5</anchor>
      <arglist>(ParseContext &amp;context, const Glib::ustring &amp;passthrough_text)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_error</name>
      <anchorfile>classGlib_1_1Markup_1_1Parser.html</anchorfile>
      <anchor>ddad19d661fea6b71fa0a88cb677b3cc</anchor>
      <arglist>(ParseContext &amp;context, const MarkupError &amp;error)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Markup::ParseContext</name>
    <filename>classGlib_1_1Markup_1_1ParseContext.html</filename>
    <base>sigc::trackable</base>
    <member kind="function">
      <type></type>
      <name>ParseContext</name>
      <anchorfile>classGlib_1_1Markup_1_1ParseContext.html</anchorfile>
      <anchor>550fecdf32455c57fb84e8de8b53ef78</anchor>
      <arglist>(Parser &amp;parser, ParseFlags flags=ParseFlags(0))</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ParseContext</name>
      <anchorfile>classGlib_1_1Markup_1_1ParseContext.html</anchorfile>
      <anchor>f549ca123bac2ddafc27980dc03d86e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parse</name>
      <anchorfile>classGlib_1_1Markup_1_1ParseContext.html</anchorfile>
      <anchor>1158f306b9d7211d97fa02fdfbfddf50</anchor>
      <arglist>(const Glib::ustring &amp;text)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parse</name>
      <anchorfile>classGlib_1_1Markup_1_1ParseContext.html</anchorfile>
      <anchor>e173b1cb8e2c9e9a5ef288006ccdbda7</anchor>
      <arglist>(const char *text_begin, const char *text_end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>end_parse</name>
      <anchorfile>classGlib_1_1Markup_1_1ParseContext.html</anchorfile>
      <anchor>cd4b854317c6c562f55e0595f62aafb0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_element</name>
      <anchorfile>classGlib_1_1Markup_1_1ParseContext.html</anchorfile>
      <anchor>5324c8b9dcfd837c3ed79173c9aaf7fb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_line_number</name>
      <anchorfile>classGlib_1_1Markup_1_1ParseContext.html</anchorfile>
      <anchor>2d9fc34abb30f2e2a75c23ed7da78c41</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_char_number</name>
      <anchorfile>classGlib_1_1Markup_1_1ParseContext.html</anchorfile>
      <anchor>ed00dd8c7ca8bd43a44158c9491477e4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Parser *</type>
      <name>get_parser</name>
      <anchorfile>classGlib_1_1Markup_1_1ParseContext.html</anchorfile>
      <anchor>4dcbfbf2ba04a4014378bc9b74bab281</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Parser *</type>
      <name>get_parser</name>
      <anchorfile>classGlib_1_1Markup_1_1ParseContext.html</anchorfile>
      <anchor>9dfac516a37a2fc5a82dc162e259e75b</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Glib::Unicode</name>
    <filename>namespaceGlib_1_1Unicode.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>validate</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>b64054c4576955fd0285dae603fad4bc</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isalnum</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>bd50a6139564bb0d2351855470d1a69b</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isalpha</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>9620b1df5b96a81a44cebbee81b2f09a</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>iscntrl</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>937030a624b77cf949f95c0e9a8c6461</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isdigit</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>1f82bfebc6c5094bfb6372a6ba4c4019</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isgraph</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>8c3c04d4dcdafc485266a393da455ee3</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>islower</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>eef7ef9a28faaa25215b1c5e94bab1dd</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isprint</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>e4d9f8199f86bd64d269854dffb92008</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ispunct</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>b81127c9fc1a6ddc04f3f7171c23111b</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isspace</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>a78d1b888a48ab92ddcbc6122592478f</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isupper</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>042c4000427af2f777150f5d88f3d154</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isxdigit</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>059de050d5449076c62756a490c91eba</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>istitle</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>083a3cf6b6fd165b0e272ad1e4c6ac33</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isdefined</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>8d4c5c43e6892e7567d3e30f817ff9a2</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>iswide</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>fa1f9e1a5bcba3dc2e2c6bf4d39620c7</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>gunichar</type>
      <name>toupper</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>1abe6ec99b03e1a4eb4462251e088e85</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>gunichar</type>
      <name>tolower</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>0b6fd738acb468a21fd83e66af9b67a8</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>gunichar</type>
      <name>totitle</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>5c4a3831dfd19f0a05aaea992795f939</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>digit_value</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>5cf00f04bd69129448f48cd278bff522</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>xdigit_value</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>8f036631847c5058f13196a9f815822b</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>Glib::UnicodeType</type>
      <name>type</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>042d1c3fdb1a22daf647211210af80c3</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>Glib::UnicodeBreakType</type>
      <name>break_type</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>c426083d525f1e30e4b5bff28962575b</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
  </compound>
</tagfile>
