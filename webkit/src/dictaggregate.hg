/* $Id: dictaggregate.hg,v 1.1 2006/05/08 10:18:53 murrayc Exp $ */
// -*- C++ -*- // this is for the .hg, I realize gensig puts one in

/* dictaggregate.h
 *
 * Copyright 2006 libgdamm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or(at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <libgdamm/object.h>
#include <libgdamm/xmlstorage.h>
#include <libgdamm/dicttype.h>

_DEFS(libgdamm,libgda)
_PINCLUDE(libgdamm/private/object_p.h)

namespace Gnome
{

namespace Gda
{

class Connection;
class Dict;

/** Represents an aggregate in the DBMS (like COUNT() or AVG(), for example).
 * Because aggregates can be polymorphic, the name is not enough to identify them, so the DBMS provides a unique id which 
 * can be used to uniquely identify an aggregate.
 * 
 * @ingroup Dictionaries.
 */
class DictAggregate
: public Gda::Object,
  public XmlStorage
{
  _CLASS_GOBJECT(DictAggregate, GdaDictAggregate, GDA_DICT_AGGREGATE, Gda::Object, GdaObject)
  _IMPLEMENTS_INTERFACE(XmlStorage)
protected:

 _CTOR_DEFAULT

public:
  _WRAP_CREATE()

  _WRAP_METHOD(void set_dbms_id(const Glib::ustring& id), gda_dict_aggregate_set_dbms_id)
  _WRAP_METHOD(Glib::ustring get_dbms_id() const, gda_dict_aggregate_get_dbms_id)
  _WRAP_METHOD(void set_sqlname(const Glib::ustring& sqlname), gda_dict_aggregate_set_sqlname)
  _WRAP_METHOD(Glib::ustring get_sqlname() const, gda_dict_aggregate_get_sqlname)
  _WRAP_METHOD(void set_arg_dict_type(const Glib::RefPtr<DictType>& dt), gda_dict_aggregate_set_arg_dict_type)

  _WRAP_METHOD(Glib::RefPtr<DictType> get_arg_dict_type(), gda_dict_aggregate_get_arg_dict_type, refreturn)
  _WRAP_METHOD(Glib::RefPtr<const DictType> get_arg_dict_type() const, gda_dict_aggregate_get_arg_dict_type, constversion)

  _WRAP_METHOD(void set_ret_dict_type(const Glib::RefPtr<DictType>& dt), gda_dict_aggregate_set_ret_dict_type)

  _WRAP_METHOD(Glib::RefPtr<DictType> get_ret_dict_type(), gda_dict_aggregate_get_ret_dict_type, refreturn)
  _WRAP_METHOD(Glib::RefPtr<const DictType> get_ret_dict_type() const, gda_dict_aggregate_get_ret_dict_type, constversion)
};

} // namespace Gda
} // namespace Gnome

