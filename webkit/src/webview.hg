/* webview.h
 *
 * Copyright 2008 Jonathon Jongsma
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */
 
_DEFS(webkitmm,webkit)
_PINCLUDE(gtkmm/private/container_p.h)

#include <webkit/webkitwebview.h>
#include <gtkmm/container.h>
#include <webkitmm/webframe.h>
#include <webkitmm/networkrequest.h>

namespace Gtk
{
class Adjustment;
class Menu;
}

namespace WebKit
{
_WRAP_ENUM(NavigationResponse, WebKitNavigationResponse, NO_GTYPE)

class WebSettings;
class WebBackForwardList;
class WebHistoryItem;

class WebView : public Gtk::Container
{
  _CLASS_GTKOBJECT(WebView, WebKitWebView, WEBKIT_WEB_VIEW, Gtk::Container, GtkContainer)

  public:
  // FIXME: this doesn't seem to work -- can I put this enum inside the class?
  _WRAP_ENUM(TargetInfo, WebKitWebViewTargetInfo, NO_GTYPE)

  _CTOR_DEFAULT();
  _WRAP_METHOD(void set_maintains_back_forward_list(bool flag=true), webkit_web_view_set_maintains_back_forward_list);

  _WRAP_METHOD(Glib::RefPtr<WebBackForwardList> get_back_forward_list(), webkit_web_view_get_back_forward_list)
  _WRAP_METHOD(Glib::RefPtr<const WebBackForwardList> get_back_forward_list() const, webkit_web_view_get_back_forward_list, constversion)
  _WRAP_METHOD(bool go_to_back_forward_item(const Glib::RefPtr<WebHistoryItem>& item), webkit_web_view_go_to_back_forward_item)
  _WRAP_METHOD(bool can_go_back() const, webkit_web_view_can_go_back)
  _WRAP_METHOD(bool can_go_back_or_forward (int steps) const, webkit_web_view_can_go_back_or_forward)
  _WRAP_METHOD(bool can_go_forward () const, webkit_web_view_can_go_forward)
  _WRAP_METHOD(void go_back (), webkit_web_view_go_back)
  _WRAP_METHOD(void go_back_or_forward (int steps), webkit_web_view_go_back_or_forward)
  _WRAP_METHOD(void go_forward (), webkit_web_view_go_forward)
  _WRAP_METHOD(void stop_loading (), webkit_web_view_stop_loading)
  _WRAP_METHOD(void open (const Glib::ustring& uri), webkit_web_view_open)
  _WRAP_METHOD(void reload(), webkit_web_view_reload)
  //TODO: double-check std::string vs Glib::ustring
  _WRAP_METHOD(void load_string (const std::string& content, const Glib::ustring& content_mime_type, const Glib::ustring& content_encoding, const Glib::ustring& base_uri), webkit_web_view_load_string)
  _WRAP_METHOD(void load_html_string (const Glib::ustring& content, const Glib::ustring& base_uri), webkit_web_view_load_html_string)
  _WRAP_METHOD(bool search_text (const Glib::ustring& string, bool case_sensitive, bool forward, bool wrap), webkit_web_view_search_text)
  _WRAP_METHOD(guint mark_text_matches (const Glib::ustring& string, bool case_sensitive, guint limit), webkit_web_view_mark_text_matches)
  _WRAP_METHOD(void set_highlight_text_matches (bool highlight=true), webkit_web_view_set_highlight_text_matches)
  _WRAP_METHOD(void unmark_text_matches(), webkit_web_view_unmark_text_matches)
  _WRAP_METHOD(Glib::RefPtr<WebFrame> get_main_frame(), webkit_web_view_get_main_frame)
  _WRAP_METHOD(Glib::RefPtr<const WebFrame> get_main_frame() const, webkit_web_view_get_main_frame, constversion)
  _WRAP_METHOD(Glib::RefPtr<WebFrame> get_focused_frame(), webkit_web_view_get_focused_frame)
  _WRAP_METHOD(Glib::RefPtr<const WebFrame> get_focused_frame() const, webkit_web_view_get_focused_frame, constversion)
  _WRAP_METHOD(void execute_script(const Glib::ustring& script), webkit_web_view_execute_script)
  _WRAP_METHOD(bool can_cut_clipboard () const, webkit_web_view_can_cut_clipboard);
  _WRAP_METHOD(bool can_copy_clipboard () const, webkit_web_view_can_copy_clipboard);
  _WRAP_METHOD(bool can_paste_clipboard () const, webkit_web_view_can_paste_clipboard)
  _WRAP_METHOD(void cut_clipboard (), webkit_web_view_cut_clipboard)
  _WRAP_METHOD(void copy_clipboard (), webkit_web_view_copy_clipboard)
  _WRAP_METHOD(void paste_clipboard (), webkit_web_view_paste_clipboard)
  _WRAP_METHOD(void delete_selection (), webkit_web_view_delete_selection)
  _WRAP_METHOD(bool has_selection () const, webkit_web_view_has_selection)
  _WRAP_METHOD(void select_all (), webkit_web_view_select_all)
  _WRAP_METHOD(bool get_editable () const, webkit_web_view_get_editable)
  _WRAP_METHOD(void set_editable (bool flag=true), webkit_web_view_set_editable)
  _WRAP_METHOD(Glib::RefPtr<Gtk::TargetList> get_copy_target_list(), webkit_web_view_get_copy_target_list)
  _WRAP_METHOD(Glib::RefPtr<const Gtk::TargetList> get_copy_target_list() const, webkit_web_view_get_copy_target_list, constversion)
  _WRAP_METHOD(Glib::RefPtr<Gtk::TargetList> get_paste_target_list(), webkit_web_view_get_paste_target_list)
  _WRAP_METHOD(Glib::RefPtr<const Gtk::TargetList> get_paste_target_list() const, webkit_web_view_get_paste_target_list, constversion)
  _WRAP_METHOD(void set_settings(const Glib::RefPtr<WebSettings>& settings), webkit_web_view_set_settings)
  _WRAP_METHOD(Glib::RefPtr<WebSettings> get_settings(), webkit_web_view_get_settings)
  _WRAP_METHOD(Glib::RefPtr<const WebSettings> get_settings() const, webkit_web_view_get_settings, constversion)
  _WRAP_METHOD(bool get_transparent () const, webkit_web_view_get_transparent)
  _WRAP_METHOD(void set_transparent (bool flag=true), webkit_web_view_set_transparent)
  _WRAP_METHOD(float get_zoom_level () const, webkit_web_view_get_zoom_level)
  _WRAP_METHOD(void set_zoom_level (float zoom_level), webkit_web_view_set_zoom_level)
  _WRAP_METHOD(void zoom_in (), webkit_web_view_zoom_in)
  _WRAP_METHOD(void zoom_out (), webkit_web_view_zoom_out)
  _WRAP_METHOD(bool get_full_content_zoom () const, webkit_web_view_get_full_content_zoom)
  _WRAP_METHOD(void set_full_content_zoom (bool full_content_zoom=true), webkit_web_view_set_full_content_zoom)

  // signals
#m4 _CONVERSION(`WebKitWebFrame*',`const Glib::RefPtr<WebFrame>&',`Glib::wrap($3, true)')
#m4 _CONVERSION(`WebKitNetworkRequest*',`const Glib::RefPtr<NetworkRequest>&',`Glib::wrap($3, true)')
  _WRAP_SIGNAL(NavigationResponse navigation_requested(const Glib::RefPtr<WebFrame>& frame, const Glib::RefPtr<NetworkRequest>& request), "navigation-requested")
  //_WRAP_SIGNAL(void window_object_cleared(Glib::RefPtr<WebFrame> frame, JSGlobalContextRef context, JSObjectRef window_object), "window-object-cleared")
#m4 _CONVERSION(`const gchar*', `const Glib::ustring&',__GCHARP_TO_USTRING)
  //_WRAP_VFUNC(Glib::ustring choose_file(Glib::RefPtr<WebFrame> frame, const Glib::ustring& old_file), "choose-file")
  _WRAP_SIGNAL(bool script_alert(Glib::RefPtr<WebFrame> frame, const Glib::ustring& alert_message), "script-alert")
#m4 _CONVERSION(`bool&',`gboolean*',`reinterpret_cast<gboolean*>(&$3)')
#m4 _CONVERSION(`gboolean*',`bool&',`*reinterpret_cast<bool*>($3)')
  _WRAP_SIGNAL(bool script_confirm(Glib::RefPtr<WebFrame> frame, const Glib::ustring& confirm_message, bool& did_confirm), "script-confirm")
  _WRAP_SIGNAL(void select_all(), "select-all");
  _WRAP_SIGNAL(void cut_clipboard(), "cut-clipboard");
  _WRAP_SIGNAL(void copy_clipboard(), "copy-clipboard");
  _WRAP_SIGNAL(void paste_clipboard(), "paste-clipboard");
  _WRAP_SIGNAL(void icon_loaded(), "icon-loaded", no_default_handler)
  _WRAP_SIGNAL(void load_progress_changed(int progress), "load-progress-changed", no_default_handler)
#m4 _CONVERSION(`GtkMenu*',`Gtk::Menu*',`Glib::wrap($3)')
  _WRAP_SIGNAL(void populate_popup(Gtk::Menu* menu), "populate-popup", no_default_handler)
  _WRAP_SIGNAL(void load_committed(const Glib::RefPtr<WebFrame>& frame), "load-committed", no_default_handler)
  _WRAP_SIGNAL(void status_bar_text_changed(const Glib::ustring& text), "status-bar-text-changed", no_default_handler)
  // FIXME: argument names, gchar** arg
  _WRAP_SIGNAL(bool script_prompt(const Glib::RefPtr<WebFrame>& frame, const Glib::ustring& a, const Glib::ustring& b, gchar** c), "script-prompt")
  // FIXME: argument names
  _WRAP_SIGNAL(void set_scroll_adjustments(Gtk::Adjustment* adj1, Gtk::Adjustment* adj2), "set-scroll-adjustments")
  _WRAP_SIGNAL(void selection_changed(), "selection-changed", no_default_handler)
  _WRAP_SIGNAL(void load_started(const Glib::RefPtr<WebFrame>& frame), "load-started", no_default_handler)
  _WRAP_SIGNAL(void load_finished(const Glib::RefPtr<WebFrame>& frame), "load-finished", no_default_handler)
  _WRAP_SIGNAL(void hovering_over_link(const Glib::ustring& a, const Glib::ustring& b), "hovering-over-link", no_default_handler)
  _WRAP_SIGNAL(void title_changed(const Glib::RefPtr<WebFrame>& frame, const Glib::ustring& title), "title-changed", no_default_handler)
  // FIXME: argument names
  _WRAP_SIGNAL(bool console_message(const Glib::ustring& a, guint b, const Glib::ustring& c), "console-message")
  // FIXME: argument names, gpointer args
  _WRAP_SIGNAL(void window_object_cleared(const Glib::RefPtr<WebFrame>& frame, gpointer a, gpointer b), "window-object-cleared", no_default_handler)

};

} // namespace WebKit
