/* webview.h
 *
 * Copyright 2008 Jonathon Jongsma
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */
 
_DEFS(webkitmm,webkit)
_PINCLUDE(gtkmm/private/container_p.h)

#include <webkit/webkitwebview.h>
#include <gtkmm/container.h>

namespace WebKit
{

class WebView : public Gtk::Container
{
  _CLASS_GTKOBJECT(WebView, WebKitWebView, WEBKIT_WEB_VIEW, Gtk::Container, GtkContainer)

  public:
  _CTOR_DEFAULT();
  _WRAP_METHOD(void set_maintains_back_forward_list(bool flag=true), webkit_web_view_set_maintains_back_forward_list);

  // WebKitWebBackForwardList* webkit_web_view_get_back_forward_list (WebKitWebView* web_view);
  // gboolean webkit_web_view_go_to_back_forward_item (WebKitWebView *web_view, WebKitWebHistoryItem* item);
  _WRAP_METHOD(bool can_go_back() const, webkit_web_view_can_go_back)
  _WRAP_METHOD(bool can_go_back_or_forward (int steps) const, webkit_web_view_can_go_back_or_forward)
  _WRAP_METHOD(bool can_go_forward () const, webkit_web_view_can_go_forward)
  _WRAP_METHOD(void go_back (), webkit_web_view_go_back)
  _WRAP_METHOD(void go_back_or_forward (int steps), webkit_web_view_go_back_or_forward)
  _WRAP_METHOD(void go_forward (), webkit_web_view_go_forward)
  _WRAP_METHOD(void stop_loading (), webkit_web_view_stop_loading)
  _WRAP_METHOD(void open (const Glib::ustring& uri), webkit_web_view_open)
  _WRAP_METHOD(void reload(), webkit_web_view_reload)
  //void webkit_web_view_load_string (WebKitWebView* web_view, const gchar* content, const gchar* content_mime_type, const gchar* content_encoding, const gchar* base_uri);
  //void webkit_web_view_load_html_string (WebKitWebView* web_view, const gchar* content, const gchar* base_uri);
  //gboolean webkit_web_view_search_text (WebKitWebView* web_view, const gchar* string, gboolean case_sensitive, gboolean forward, gboolean wrap);
  //guint webkit_web_view_mark_text_matches (WebKitWebView* web_view, const gchar* string, gboolean case_sensitive, guint limit);
  _WRAP_METHOD(void set_highlight_text_matches (bool highlight=true), webkit_web_view_set_highlight_text_matches)
  _WRAP_METHOD(void unmark_text_matches(), webkit_web_view_unmark_text_matches)
  //WebKitWebFrame* webkit_web_view_get_main_frame (WebKitWebView* web_view);
  //WebKitWebFrame* webkit_web_view_get_focused_frame (WebKitWebView* web_view);
  _WRAP_METHOD(void execute_script(const Glib::ustring& script), webkit_web_view_execute_script)
  _WRAP_METHOD(bool can_cut_clipboard () const, webkit_web_view_can_cut_clipboard);
  _WRAP_METHOD(bool can_copy_clipboard () const, webkit_web_view_can_copy_clipboard);
  _WRAP_METHOD(bool can_paste_clipboard () const, webkit_web_view_can_paste_clipboard)
  _WRAP_METHOD(void cut_clipboard (), webkit_web_view_cut_clipboard)
  _WRAP_METHOD(void copy_clipboard (), webkit_web_view_copy_clipboard)
  _WRAP_METHOD(void paste_clipboard (), webkit_web_view_paste_clipboard)
  _WRAP_METHOD(void delete_selection (), webkit_web_view_delete_selection)
  _WRAP_METHOD(bool has_selection () const, webkit_web_view_has_selection)
  _WRAP_METHOD(void select_all (), webkit_web_view_select_all)
  _WRAP_METHOD(bool get_editable () const, webkit_web_view_get_editable)
  _WRAP_METHOD(void set_editable (bool flag=true), webkit_web_view_set_editable)
  //GtkTargetList* webkit_web_view_get_copy_target_list (WebKitWebView* web_view);
  //GtkTargetList* webkit_web_view_get_paste_target_list (WebKitWebView* web_view);
  //void webkit_web_view_set_settings (WebKitWebView* web_view, WebKitWebSettings* settings);
  //WebKitWebSettings* webkit_web_view_get_settings (WebKitWebView* web_view);
  _WRAP_METHOD(bool get_transparent () const, webkit_web_view_get_transparent)
  _WRAP_METHOD(void set_transparent (bool flag=true), webkit_web_view_set_transparent)
  _WRAP_METHOD(float get_zoom_level () const, webkit_web_view_get_zoom_level)
  _WRAP_METHOD(void set_zoom_level (float zoom_level), webkit_web_view_set_zoom_level)
  _WRAP_METHOD(void zoom_in (), webkit_web_view_zoom_in)
  _WRAP_METHOD(void zoom_out (), webkit_web_view_zoom_out)
  _WRAP_METHOD(bool get_full_content_zoom () const, webkit_web_view_get_full_content_zoom)
  _WRAP_METHOD(void set_full_content_zoom (bool full_content_zoom=true), webkit_web_view_set_full_content_zoom)

};

} // namespace WebKit
