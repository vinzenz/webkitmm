/* webbackforwardlist.h
 *
 * Copyright 2008 Jonathon Jongsma
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */
 
_DEFS(webkitmm,webkit)
_PINCLUDE(glibmm/private/object_p.h)

#include <glibmm/object.h>
#include <webkitmm/webview.h>
#include <webkitmm/webhistoryitem.h>

namespace WebKit
{

class WebBackForwardList : public Glib::Object
{
  _CLASS_GOBJECT(WebBackForwardList, WebKitWebBackForwardList, WEBKIT_WEB_BACK_FORWARD_LIST, Glib::Object, GObject)

  protected:
  _WRAP_CTOR(WebBackForwardList(WebView& web_view), webkit_web_back_forward_list_new_with_web_view)
  public:
  _WRAP_CREATE(WebView& web_view)

  _WRAP_METHOD(void go_forward(), webkit_web_back_forward_list_go_forward)
  _WRAP_METHOD(void go_back(), webkit_web_back_forward_list_go_back)
  _WRAP_METHOD(bool contains_item(const Glib::RefPtr<WebHistoryItem>& history_item) const, webkit_web_back_forward_list_contains_item)
  _WRAP_METHOD(void go_to_item(const Glib::RefPtr<WebHistoryItem>& history_item), webkit_web_back_forward_list_go_to_item)
  // TODO: should we use the get_*_list_with_limit terminology ?
#m4 _CONVERSION(`GList*',`Glib::ListHandle<Glib::RefPtr<WebHistoryItem> >',`$2($3, Glib::OWNERSHIP_DEEP)')
  _WRAP_METHOD(Glib::ListHandle<Glib::RefPtr<WebHistoryItem> > get_forward_list(int limit), webkit_web_back_forward_list_get_forward_list_with_limit)
  _WRAP_METHOD(Glib::ListHandle<Glib::RefPtr<WebHistoryItem> > get_back_list(int limit), webkit_web_back_forward_list_get_back_list_with_limit)
  _WRAP_METHOD(Glib::RefPtr<WebHistoryItem> get_back_item(), webkit_web_back_forward_list_get_back_item)
  _WRAP_METHOD(Glib::RefPtr<const WebHistoryItem> get_back_item() const, webkit_web_back_forward_list_get_back_item, constversion)
  _WRAP_METHOD(Glib::RefPtr<WebHistoryItem> get_current_item(), webkit_web_back_forward_list_get_current_item)
  _WRAP_METHOD(Glib::RefPtr<const WebHistoryItem> get_current_item() const, webkit_web_back_forward_list_get_current_item, constversion)
  _WRAP_METHOD(Glib::RefPtr<WebHistoryItem> get_forward_item(), webkit_web_back_forward_list_get_forward_item)
  _WRAP_METHOD(Glib::RefPtr<const WebHistoryItem> get_forward_item() const, webkit_web_back_forward_list_get_forward_item, constversion)
  _WRAP_METHOD(Glib::RefPtr<WebHistoryItem> get_nth_item(int index), webkit_web_back_forward_list_get_nth_item)
  _WRAP_METHOD(Glib::RefPtr<const WebHistoryItem> get_nth_item(int index) const, webkit_web_back_forward_list_get_nth_item, constversion)
  _WRAP_METHOD(int get_back_length() const, webkit_web_back_forward_list_get_back_length)
  _WRAP_METHOD(int get_forward_length() const, webkit_web_back_forward_list_get_forward_length)
  _WRAP_METHOD(int get_limit() const, webkit_web_back_forward_list_get_limit)
  _WRAP_METHOD(void set_limit(int limit), webkit_web_back_forward_list_set_limit)

  // signals
};

} // namespace WebKit
