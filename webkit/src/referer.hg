// -*- C++ -*- // this is for the .hg, I realize gensig puts one in

/* referer.h
 *
 * Copyright 2003 libgdamm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <glibmm/interface.h>
#include <libgda/gda-referer.h>

_DEFS(libgdamm,libgda)
_PINCLUDE(glibmm/private/interface_p.h)

namespace Gnome
{

namespace Gda
{

class Object;

/** Base class to know when on object is completely defined.
 *
 * @ingroup Miscellaneous
 */
class Referer : public Glib::Interface
{
  _CLASS_INTERFACE(Referer, GdaReferer, GDA_REFERER, GdaRefererIface)
public:

  _WRAP_METHOD(bool activate(), gda_referer_activate)
  _WRAP_METHOD(void deactivate(), gda_referer_deactivate)
  _WRAP_METHOD(bool is_active() const, gda_referer_is_active)

  #m4 _CONVERSION(`GSList*', `Glib::SListHandle<Glib::RefPtr<Object> >', `$2($3, Glib::OWNERSHIP_SHALLOW)')
  #m4 _CONVERSION(`GSList*', `Glib::SListHandle<Glib::RefPtr<const Object> >', `$2($3, Glib::OWNERSHIP_SHALLOW)')
  _WRAP_METHOD(Glib::SListHandle<Glib::RefPtr<Object> > get_ref_objects(), gda_referer_get_ref_objects)
  _WRAP_METHOD(Glib::SListHandle<Glib::RefPtr<const Object> > get_ref_objects() const, gda_referer_get_ref_objects)

  // TODO: How to wrap GHashTable?
  //_WRAP_METHOD(void replace_refs(GHashTable* replacements), gda_referer_replace_refs)

  // TODO: Find out what the purpose of gda_referer_get_ref_objects and
  // gda_referer_replace_refs are for and wrap them appropriately.
  
  _WRAP_SIGNAL(void activated(), "activated")
  _WRAP_SIGNAL(void deactivated(), "deactivated")
};

} // namespace Gda
} // namespace Gnome

