// -*- C++ -*- // this is for the .hg, I realize gensig puts one in

/* querycondition.h
 *
 * Copyright 2003 libgdamm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <glibmm/object.h>

#include <libgdamm/xmlstorage.h>
#include <libgdamm/referer.h>
#include <libgdamm/renderer.h>
#include <libgdamm/queryobject.h>

_DEFS(libgdamm,libgda)
_PINCLUDE(libgdamm/private/queryobject_p.h)

namespace Gnome
{

namespace Gda
{

class Query;
class QueryField;
class QueryTarget;

_WRAP_ENUM(QueryConditionType, GdaQueryConditionType)
_WRAP_ENUM(QueryConditionOperator, GdaQueryConditionOperator)

/** Represents a condition within a query.
 *
 * @ingroup Queries
 */
class QueryCondition
 : public QueryObject,
   public XmlStorage,
   public Referer,
   public Renderer
{
  _CLASS_GOBJECT(QueryCondition, GdaQueryCondition, GDA_QUERY_CONDITION, QueryObject, GdaQueryObject)

  _IMPLEMENTS_INTERFACE(XmlStorage)
  _IMPLEMENTS_INTERFACE(Referer)
  _IMPLEMENTS_INTERFACE(Renderer)

protected:
  QueryCondition(const Glib::RefPtr<Query>& query, QueryConditionType type);
  _IGNORE(gda_query_condition_new)

  // TODO: If we want to wrap gda_query_condition_new_from_sql, libgda
  // should either provide a sql_cond property or a
  // gda_query_condition_set_sql_text() function.

public:
  _WRAP_CREATE(const Glib::RefPtr<Query>& query, QueryConditionType type)

  _WRAP_METHOD(void set_cond_type(QueryConditionType type), gda_query_condition_set_cond_type)
  _WRAP_METHOD(QueryConditionType get_cond_type() const, gda_query_condition_get_cond_type)

  #m4 _CONVERSION(`GSList*', `Glib::SListHandle<Glib::RefPtr<QueryCondition> >', `$2($3, Glib::OWNERSHIP_SHALLOW)')
  #m4 _CONVERSION(`GSList*', `Glib::SListHandle<Glib::RefPtr<const QueryCondition> >', `$2($3, Glib::OWNERSHIP_SHALLOW)')
  _WRAP_METHOD(Glib::SListHandle<Glib::RefPtr<QueryCondition> > get_children(), gda_query_condition_get_children)
  _WRAP_METHOD(Glib::SListHandle<Glib::RefPtr<const QueryCondition> > get_children() const, gda_query_condition_get_children)

  _WRAP_METHOD(Glib::RefPtr<QueryCondition> get_parent(), gda_query_condition_get_parent, refreturn)
  _WRAP_METHOD(Glib::RefPtr<const QueryCondition> get_parent() const, gda_query_condition_get_parent, constversion, refreturn)
  _WRAP_METHOD(Glib::RefPtr<QueryCondition> get_child_by_xml_id(const Glib::ustring& xml_id), gda_query_condition_get_child_by_xml_id, refreturn)
  _WRAP_METHOD(Glib::RefPtr<const QueryCondition> get_child_by_xml_id(const Glib::ustring& xml_id) const, gda_query_condition_get_child_by_xml_id, refreturn)

  _WRAP_METHOD(bool is_ancestor(const Glib::RefPtr<QueryCondition>& ancestor) const, gda_query_condition_is_ancestor)
  _WRAP_METHOD(bool is_leaf() const, gda_query_condition_is_leaf)
  _WRAP_METHOD(bool node_add_child(const Glib::RefPtr<QueryCondition>& child), gda_query_condition_node_add_child, errthrow)
  _WRAP_METHOD(void node_del_child(const Glib::RefPtr<QueryCondition>& child), gda_query_condition_node_del_child)
  _WRAP_METHOD(void leaf_set_operator(QueryConditionOperator op, const Glib::RefPtr<QueryField>& field), gda_query_condition_leaf_set_operator)
  _WRAP_METHOD(Glib::RefPtr<QueryField> leaf_get_operator(QueryConditionOperator op), gda_query_condition_leaf_get_operator, refreturn)
  _WRAP_METHOD(Glib::RefPtr<const QueryField> leaf_get_operator(QueryConditionOperator op) const, gda_query_condition_leaf_get_operator, refreturn, constversion)

  // TODO: Wrap gda_query_condition_represents_join and gda_query_condition_represents_join_strict

  _WRAP_METHOD(Glib::SListHandle<Glib::RefPtr<QueryCondition> > get_main_conditions(), gda_query_condition_get_main_conditions)
  _WRAP_METHOD(Glib::SListHandle<Glib::RefPtr<const QueryCondition> > get_main_conditions() const, gda_query_condition_get_main_conditions)

  // TODO: Wrap gda_query_condition_get_ref_objects_all
  
  _WRAP_PROPERTY("cond-type", QueryConditionType)
  //_WRAP_PROPERTY("join", Glib::RefPtr<QueryJoin>)
  _WRAP_PROPERTY("query", Glib::RefPtr<Query>)
};

} // namespace Gda
} // namespace Gnome

