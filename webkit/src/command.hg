/* $Id: command.hg,v 1.6 2006/11/30 06:58:55 murrayc Exp $ */
// -*- C++ -*- // this is for the .hg, I realize gensig puts one in

/* command.h
 *
 * Copyright 2003 libgdamm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <glibmm/object.h>

_DEFS(libgdamm,libgda)
_PINCLUDE(glibmm/private/object_p.h)


#ifndef DOXYGEN_SHOULD_SKIP_THIS
extern "C" { typedef struct _GdaCommand GdaCommand; } 
#endif

namespace Gnome
{

namespace Gda
{

_WRAP_ENUM(CommandType, GdaCommandType)
_WRAP_ENUM(CommandOptions, GdaCommandOptions)

/** For issuing commands to the provider.
 * The Command object holds data needed to issue a command to the providers. Applications usually create a Command, set 
 * its properties (via the set_* methods) and pass it over to the database using the Connection methods.
 *
 * Commands is that they can be reused. That is, applications don't need to create a command object every time they want to 
 * run a command on the connected database. Moreover, the ability to create command strings with placeholders allows the 
 * use of parameters to specify the values for those placeholders. Thus, an application can create a command of the form:
 *
 * INSERT INTO employees VALUES (id, name, address, salary)
 *
 * and reuse the same command over and over, just using different values for the placeholders.
 *
 * The value for the placeholders is specified when sending the Command to a database connection, 
 * which is done via the Gda::Connection::execute function.
 *
 * @ingroup Connections
 */
class Command
{
  _CLASS_OPAQUE_COPYABLE(Command, GdaCommand, NONE, gda_command_copy, gda_command_free)
  _IGNORE(gda_command_copy, gda_command_free)
public:
  //TODO: What do the other command types do? How do they work?

  /** Creates a new Command.
   * If there are conflicting options, this will set options to GDA_COMMAND_OPTION_DEFAULT.
   * @param text The text of the command.
   * @param type The type of the command.
   * @param options Additional command options.
   */
  explicit Command(const Glib::ustring& text, CommandType type = COMMAND_TYPE_SQL, CommandOptions options = COMMAND_OPTION_STOP_ON_ERRORS);
 
  _WRAP_METHOD(Glib::ustring get_text() const, gda_command_get_text)
  _WRAP_METHOD(void set_text(const Glib::ustring& text), gda_command_set_text)
  _WRAP_METHOD(CommandType get_command_type() const, gda_command_get_command_type)
  _WRAP_METHOD(void set_command_type(CommandType type), gda_command_set_command_type)
  _WRAP_METHOD(CommandOptions get_options() const, gda_command_get_options)
  _WRAP_METHOD(void set_options(CommandOptions options), gda_command_set_options)

};

} // namespace Gda
} // namespace Gnome

