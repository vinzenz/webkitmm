<root>
<function name="gda_query_field_value_is_parameter">
<description>
Tells if @field can be considered as a parameter


</description>
<parameters>
<parameter name="field">
<parameter_description> a #GdaQueryFieldValue object
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @field can be considered as a parameter
</return>
</function>

<function name="gda_quark_list_new_from_string">
<description>
Creates a new #GdaQuarkList given a connection string.


</description>
<parameters>
<parameter name="string">
<parameter_description> a connection string.
</parameter_description>
</parameter>
</parameters>
<return> the newly created #GdaQuarkList.
</return>
</function>

<function name="gda_config_has_section">
<description>
Checks whether the given section exists in the configuration
system.


</description>
<parameters>
<parameter name="path">
<parameter_description> path to the configuration section.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the section exists, %FALSE otherwise.
</return>
</function>

<function name="gda_column_set_unique_key">
<description>
Sets the &apos;unique key&apos; flag of the given column.

</description>
<parameters>
<parameter name="column">
<parameter_description> a #GdaColumn.
</parameter_description>
</parameter>
<parameter name="uk">
<parameter_description> whether if the given column should be an unique key.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_connection_rollback_savepoint">
<description>
Rollback all the modifications made after the SAVEPOINT named @name.


</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection object
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> name of the savepoint to rollback to
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_dict_type_get_g_type">
<description>
Get the gda type of a data type


</description>
<parameters>
<parameter name="dt">
<parameter_description> a #GdaDictType object
</parameter_description>
</parameter>
</parameters>
<return> the gda type
</return>
</function>

<function name="gda_query_add_join">
<description>
Add a join to @query. A join is defined by the two #GdaQueryTarget objects it joins and by
a join condition which MUST ONLY make use of fields of the two entities represented by the
targets.

For any given couple of #GdaQueryTarget objects, there can exist ONLY ONE #GdaQueryJoin which joins the
two.


</description>
<parameters>
<parameter name="query">
<parameter_description> a #GdaQuery object
</parameter_description>
</parameter>
<parameter name="join">
<parameter_description> a #GdaQueryJoin object
</parameter_description>
</parameter>
</parameters>
<return> TRUE on success, and FALSE otherwise
</return>
</function>

<function name="gda_dict_get_object_by_string_id">
<description>
Fetch a pointer to the #GdaObject which has the @strid string ID.


</description>
<parameters>
<parameter name="dict">
<parameter_description> a #GdaDict object
</parameter_description>
</parameter>
<parameter name="strid">
<parameter_description> a string
</parameter_description>
</parameter>
</parameters>
<return> the corresponding #GdaObject, or %NULL if none found
</return>
</function>

<function name="gda_value_compare_ext">
<description>
Like gda_value_compare(), compares two values of the same type, except that NULL values and values
of type GDA_TYPE_NULL are considered equals


</description>
<parameters>
<parameter name="value1">
<parameter_description> a #GValue to compare.
</parameter_description>
</parameter>
<parameter name="value2">
<parameter_description> the other #GValue to be compared to @value1.
</parameter_description>
</parameter>
</parameters>
<return> 0 if both contain the same value, an integer less than 0 if @value1 is less than @value2 or
an integer greater than 0 if @value1 is greater than @value2.
</return>
</function>

<function name="gda_graphviz_add_to_graph">
<description>
Adds @obj to be graphed by @graph

</description>
<parameters>
<parameter name="graph">
<parameter_description> a #GdaGraphviz object
</parameter_description>
</parameter>
<parameter name="obj">
<parameter_description> a #GObject object to be graphed
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_dict_class_always_register">
<description>
Make sure all new GdaDict object will use @func to register
a type of object

</description>
<parameters>
<parameter name="func">
<parameter_description> a #GdaDictRegFunc function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_row_get_is_default">
<description>
Tells if the value at column @num in @row must be considered as a default value


</description>
<parameters>
<parameter name="row">
<parameter_description> a #GdaRow
</parameter_description>
</parameter>
<parameter name="num">
<parameter_description> field index
</parameter_description>
</parameter>
</parameters>
<return>
</return>
</function>

<function name="gda_server_provider_escape_string">
<description>
Escapes @str for use within an SQL command (to avoid SQL injection attacks). Note that the returned value still needs
to be enclosed in single quotes before being used in an SQL statement.


</description>
<parameters>
<parameter name="provider">
<parameter_description> a server provider.
</parameter_description>
</parameter>
<parameter name="cnc">
<parameter_description> a #GdaConnection object, or %NULL
</parameter_description>
</parameter>
<parameter name="str">
<parameter_description> a string to escape
</parameter_description>
</parameter>
</parameters>
<return> a new string suitable to use in SQL statements
</return>
</function>

<function name="gda_object_ref_set_ref_object">
<description>
Rather than to set the XML Id of the object @ref has to reference, this function allows
to directly give the object, in case the object is known.

</description>
<parameters>
<parameter name="ref">
<parameter_description> a #GdaObjectRef object
</parameter_description>
</parameter>
<parameter name="object">
<parameter_description> the object to keep a reference to
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_query_field_field_get_ref_field">
<description>
Get the real #GdaEntityField object (well, the object which implements that interface)
referenced by @field


</description>
<parameters>
<parameter name="field">
<parameter_description> a #GdaQueryFieldField object
</parameter_description>
</parameter>
</parameters>
<return> the #GdaEntityField object, or NULL if @field is not active
</return>
</function>

<function name="gda_connection_add_savepoint">
<description>
Adds a SAVEPOINT named @name.


</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection object
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> name of the savepoint to add
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_query_set_query_type">
<description>
Sets the type of @query

</description>
<parameters>
<parameter name="query">
<parameter_description> a #GdaQuery object
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> the new type of query
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_connection_new">
<description>
This function creates a new #GdaConnection object. It is not
intended to be used directly by applications (use
#gda_client_open_connection instead).

The connection is not opened at this stage; use 
gda_connection_open() to open the connection.


</description>
<parameters>
<parameter name="client">
<parameter_description> a #GdaClient object.
</parameter_description>
</parameter>
<parameter name="provider">
<parameter_description> a #GdaServerProvider object.
</parameter_description>
</parameter>
<parameter name="dsn">
<parameter_description> GDA data source to connect to.
</parameter_description>
</parameter>
<parameter name="username">
<parameter_description> user name to use to connect.
</parameter_description>
</parameter>
<parameter name="password">
<parameter_description> password for @username.
</parameter_description>
</parameter>
<parameter name="options">
<parameter_description> options for the connection.
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated #GdaConnection object.
</return>
</function>

<function name="gda_object_destroy">
<description>
Force the @gdaobj object to be destroyed, even if we don&apos;t have a reference on it
(we can&apos;t call g_object_unref() then) and even if the object is referenced
multiple times by other objects.

The &quot;destroyed&quot; signal is then emitted to tell the other reference holders that the object
must be destroyed and that they should give back their reference (using g_object_unref()).
However if a reference is still present, the object will not actually be destroyed and will
still be alive, but its state may not be deterministic.

This is usefull because sometimes objects need to disappear even if they are referenced by other
objects. This usage is the same as with the gtk_widget_destroy() function on widgets.

When this method returns, @gdaobj should have been destroyed and should not be used anymore.

</description>
<parameters>
<parameter name="gdaobj">
<parameter_description> a #GdaObject object
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_column_set_auto_increment">
<description>
Sets the auto increment flag for the given column.

</description>
<parameters>
<parameter name="column">
<parameter_description> a #GdaColumn.
</parameter_description>
</parameter>
<parameter name="is_auto">
<parameter_description> auto increment status.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_data_model_array_new">
<description>
Creates a new #GdaDataModel object without initializing the column
types. Using gda_data_model_array_new_with_g_types() is usually better.


</description>
<parameters>
<parameter name="cols">
<parameter_description> number of columns for rows in this data model.
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the newly created #GdaDataModel.
</return>
</function>

<function name="gda_dict_aggregate_get_arg_dict_type">
<description>
To consult the list of arguments types (and number) of a aggregate.


</description>
<parameters>
<parameter name="agg">
<parameter_description> a #GdaDictAggregate object
</parameter_description>
</parameter>
</parameters>
<return> a list of #GdaDictType objects, the list MUST NOT be modified.
</return>
</function>

<function name="gda_query_condition_leaf_get_operator">
<description>
Get one of @condition&apos;s operators.


</description>
<parameters>
<parameter name="condition">
<parameter_description> a #GdaQueryCondition object
</parameter_description>
</parameter>
<parameter name="op">
<parameter_description> which oparetor is concerned
</parameter_description>
</parameter>
</parameters>
<return> the requested #GdaQueryField object
</return>
</function>

<function name="gda_query_get_parameter_list">
<description>
Like the gda_query_get_parameters() method, get a list of parameters which the query accepts,
except that the parameters are stored within a #GdaParameterList object, and can be used as an argument
to the gda_query_execute() method.


</description>
<parameters>
<parameter name="query">
<parameter_description> a #GdaQuery object
</parameter_description>
</parameter>
</parameters>
<return> a new #GdaParameterList object, or %NULL if @query does not accept any parameter.
</return>
</function>

<function name="gda_data_proxy_get_value_attributes">
<description>
Get the attributes of the value stored at (proxy_row, col) in @proxy, which
is an ORed value of #GdaValueAttribute flags


</description>
<parameters>
<parameter name="proxy">
<parameter_description> a #GdaDataProxy object
</parameter_description>
</parameter>
<parameter name="proxy_row">
<parameter_description> a proxy row
</parameter_description>
</parameter>
<parameter name="col">
<parameter_description> a valid proxy column
</parameter_description>
</parameter>
</parameters>
<return> the attribute
</return>
</function>

<function name="gda_row_set_default">
<description>
Instructs the @row that the value at column @num must be considered as a default value

</description>
<parameters>
<parameter name="row">
<parameter_description> a #GdaRow
</parameter_description>
</parameter>
<parameter name="num">
<parameter_description> field index
</parameter_description>
</parameter>
<parameter name="is_default">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_connection_event_get_source">
<description>

</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdaConnectionEvent.
</parameter_description>
</parameter>
</parameters>
<return> @event&apos;s source. 
</return>
</function>

<function name="gda_column_index_get_column_name">
<description>

</description>
<parameters>
<parameter name="dmcia">
<parameter_description> a #GdaColumnIndex.
</parameter_description>
</parameter>
</parameters>
<return> the column name of @dmcia.
</return>
</function>

<function name="gda_dict_database_get_table_constraints">
<description>
Get all the constraints applicable to @table


</description>
<parameters>
<parameter name="db">
<parameter_description> a #GdaDictDatabase object
</parameter_description>
</parameter>
<parameter name="table">
<parameter_description> a #GdaDictTable, part of @db
</parameter_description>
</parameter>
</parameters>
<return> a new GSList of #GdaDictConstraint objects
</return>
</function>

<function name="gda_dict_type_set_g_type">
<description>
Set the gda type for a data type

</description>
<parameters>
<parameter name="dt">
<parameter_description> a #GdaDictType object
</parameter_description>
</parameter>
<parameter name="g_type">
<parameter_description> 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_threader_cancel">
<description>

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gda_delimiter_concat_list">
<description>
Creates one #GdaDelimiterStatement from all the statements in @statements


</description>
<parameters>
<parameter name="statements">
<parameter_description> a list of #GdaDelimiterStatement structures
</parameter_description>
</parameter>
</parameters>
<return> a new #GdaDelimiterStatement or %NULL if @statements is %NULL
</return>
</function>

<function name="gda_insert_row_into_table_from_string">
<description>
This is just a convenient function to insert a row with the values given as arguments.
The values must be strings that could be converted to the type in the corresponding
column. Finish the list with NULL.

The arguments must be pairs of column name followed by his value.

The SQL command is like: 
INSERT INTO table_name (column1, column2, ...) VALUES (value1, value2, ...)


</description>
<parameters>
<parameter name="cnn">
<parameter_description> an opened connection
</parameter_description>
</parameter>
<parameter name="table_name">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> a list of strings to be converted as value, finished by %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred, and FALSE and set error otherwise
</return>
</function>

<function name="gda_query_get_query_type">
<description>
Get the type of a query


</description>
<parameters>
<parameter name="query">
<parameter_description> a #GdaQuery object
</parameter_description>
</parameter>
</parameters>
<return> the type of @query
</return>
</function>

<function name="gda_entity_add_field">
<description>
Add @field to @iface&apos;s fields (at the end of the list)

</description>
<parameters>
<parameter name="iface">
<parameter_description> an object implementing the #GdaEntity interface
</parameter_description>
</parameter>
<parameter name="field">
<parameter_description> an object implementing the #GdaEntityField interface to add
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_connection_get_last_insert_id">
<description>
Retrieve from the given #GdaConnection the ID of the last inserted row.
A connection must be specified, and, optionally, a result set. If not NULL,
the underlying provider should try to get the last insert ID for the given result set.


</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection object.
</parameter_description>
</parameter>
<parameter name="recset">
<parameter_description> recordset.
</parameter_description>
</parameter>
</parameters>
<return> a string representing the ID of the last inserted row, or NULL
if an error occurred or no row has been inserted. It is the caller&apos;s
reponsibility to free the returned string.
</return>
</function>

<function name="gda_parameter_list_find_group_for_param">
<description>
Finds a #GdaParameterListGroup which lists a  #GdaParameterListNode containing @param,
don&apos;t modify the returned structure.


</description>
<parameters>
<parameter name="paramlist">
<parameter_description> a #GdaParameterList object
</parameter_description>
</parameter>
<parameter name="param">
<parameter_description> a #GdaParameter object
</parameter_description>
</parameter>
</parameters>
<return> a #GdaParameterListGroup or %NULL
</return>
</function>

<function name="gda_parameter_has_restrict_values">
<description>
Tells if @param has its values restricted by a #GdaDataModel, and optionnaly
allows to fetch the resteictions.


</description>
<parameters>
<parameter name="param">
<parameter_description> a #GdaParameter
</parameter_description>
</parameter>
<parameter name="model">
<parameter_description> a place to store a pointer to the model restricting the parameter, or %NULL
</parameter_description>
</parameter>
<parameter name="col">
<parameter_description> a place to store the column in the model restricting the parameter, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @param has its values restricted.
</return>
</function>

<function name="gda_value_get_blob">
<description>

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue whose value we want to get.
</parameter_description>
</parameter>
</parameters>
<return> the value stored in @value.
</return>
</function>

<function name="gda_data_handler_accepts_g_type">
<description>
Checks wether the GdaDataHandler is able to handle the gda type given as argument.


</description>
<parameters>
<parameter name="dh">
<parameter_description> an object which implements the #GdaDataHandler interface
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the gda type can be handled
</return>
</function>

<function name="gda_parameter_list_merge">
<description>
Add to @paramlist all the parameters of @paramlist_to_merge.

</description>
<parameters>
<parameter name="paramlist">
<parameter_description> a #GdaParameterList object
</parameter_description>
</parameter>
<parameter name="paramlist_to_merge">
<parameter_description> a #GdaParameterList object
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_query_join_render_type">
<description>
Get the SQL version of the join type (&quot;INNER JOIN&quot;, &quot;LEFT JOIN&quot;, etc)


</description>
<parameters>
<parameter name="join">
<parameter_description> a #GdaQueryJoin object
</parameter_description>
</parameter>
</parameters>
<return> the type as a const string
</return>
</function>

<function name="gda_config_get_boolean">
<description>
Gets the value of the specified configuration entry as a boolean.


</description>
<parameters>
<parameter name="path">
<parameter_description> path to the configuration entry.
</parameter_description>
</parameter>
</parameters>
<return> the value stored at the given entry.
</return>
</function>

<function name="gda_query_object_get_int_id">
<description>
Get the integer ID of @qobj

Return: the integer ID

</description>
<parameters>
<parameter name="qobj">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_data_model_send_hint">
<description>
Sends a hint to the data model. The hint may or may not be handled by the data
model, depending on its implementation

</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModel
</parameter_description>
</parameter>
<parameter name="hint">
<parameter_description> a hint to send to the model
</parameter_description>
</parameter>
<parameter name="hint_value">
<parameter_description> an optional value to specify the hint, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_data_model_hash_set_n_columns">
<description>
Sets the number of columns for rows inserted in this model.
@cols must be greater than or equal to 0. 

Also clears @model&apos;s contents.

This function calls #gda_data_model_hash_clear to free the
existing rows if any.

</description>
<parameters>
<parameter name="model">
<parameter_description> the #GdaDataModelHash.
</parameter_description>
</parameter>
<parameter name="cols">
<parameter_description> the number of columns for rows inserted in @model.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_server_provider_split_update_query">
<description>
When an update query will impact N&amp;gt;1 rows, it can be refined into a new update query which can be executed N times wich
will impact one row at a time. This is usefull for providers implementations when dealing with BLOBs where updating
rows with a blob can be done only one row at a time.

After execution, @out_select contains a new GdaQuery, or %NULL if it is not possible to create the update query.

For example UPDATE blobs set name = ##/ *name:&apos;name&apos; type:gchararray* /, data = ##/ *name:&apos;theblob&apos; type:&apos;GdaBlob&apos;* / WHERE name= ##/ *name:&apos;oname&apos; type:gchararray* /
will create (if &apos;id&apos; is a PK of the table to update):
UPDATE blobs set name = ##/ *name:&apos;name&apos; type:gchararray* /, data = ##/ *name:&apos;theblob&apos; type:&apos;GdaBlob&apos;* / WHERE id= ##/ *name:&apos;oid&apos; type:gint* /


</description>
<parameters>
</parameters>
<return> TRUE if no error occurred.
</return>
</function>

<function name="gda_data_source_info_equal">
<description>
Tells if @info1 and @info2 are equal


</description>
<parameters>
<parameter name="info1">
<parameter_description> a data source information
</parameter_description>
</parameter>
<parameter name="info2">
<parameter_description> a data source information
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @info1 and @info2 are equal
</return>
</function>

<function name="gda_data_handler_get_sane_init_value">
<description>
Creates a new GValue which holds a sane initial value to be used if no value is specifically
provided. For example for a simple string, this would return a new value containing the &quot;&quot; string.


</description>
<parameters>
<parameter name="dh">
<parameter_description> an object which implements the #GdaDataHandler interface
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> 
</parameter_description>
</parameter>
</parameters>
<return> the new GValue, or %NULL if no such value can be created.
</return>
</function>

<function name="gda_connection_get_username">
<description>
Gets the user name used to open this connection.


</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection object.
</parameter_description>
</parameter>
</parameters>
<return> the user name.
</return>
</function>

<function name="gda_command_set_options">
<description>
Sets the command options of @cmd. If there conflicting options, it will just
leave the value as before.

</description>
<parameters>
<parameter name="cmd">
<parameter_description> a #GdaCommand
</parameter_description>
</parameter>
<parameter name="options">
<parameter_description> the command options.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_dict_field_is_pkey_part">
<description>
Test if @field is part of a primary key constraint


</description>
<parameters>
<parameter name="field">
<parameter_description> a #GdaDictField object
</parameter_description>
</parameter>
</parameters>
<return>
</return>
</function>

<function name="gda_config_list_keys">
<description>
Returns: a list containing all the key names.

</description>
<parameters>
<parameter name="path">
<parameter_description> path for root dir.
</parameter_description>
</parameter>
</parameters>
<return> a list containing all the key names.
</return>
</function>

<function name="gda_blob_op_write_all">
<description>
Writes the whole contents of @blob into the blob manipulated by @op. If necessary the resulting
blob is truncated from its previous length.


</description>
<parameters>
<parameter name="op">
<parameter_description> a #GdaBlobOp
</parameter_description>
</parameter>
<parameter name="blob">
<parameter_description> a #GdaBlob which contains the data to write
</parameter_description>
</parameter>
</parameters>
<return> TRUE on success
</return>
</function>

<function name="gda_connection_add_events_list">
<description>
This is just another convenience function which lets you add
a list of #GdaConnectionEvent&apos;s to the given connection.*
As with
#gda_connection_add_event and #gda_connection_add_event_string,
this function makes the connection object emit the &quot;error&quot;
signal for each error event.

@events_list is copied to an internal list and freed.

</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection object.
</parameter_description>
</parameter>
<parameter name="events_list">
<parameter_description> a list of #GdaConnectionEvent.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_quark_list_foreach">
<description>
Calls the given function for each of the key/value pairs in @qlist. The function is passed the key and value 
of each pair, and the given user_data parameter. @qlist may not be modified while iterating over it.

</description>
<parameters>
<parameter name="qlist">
<parameter_description> a #GdaQuarkList structure.
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> the function to call for each key/value pair
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data to pass to the function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_graph_item_get_ref_object">
<description>
Get the referenced #GdaObject object, if it exists.


</description>
<parameters>
<parameter name="item">
<parameter_description> a #GdaGraphItem object
</parameter_description>
</parameter>
</parameters>
<return> the referenced object, or %NULL
</return>
</function>

<function name="gda_query_is_update_query">
<description>
Tells if @query is a UPDATE query.


</description>
<parameters>
<parameter name="query">
<parameter_description> a # GdaQuery object
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @query is an update query
</return>
</function>

<function name="gda_query_get_target_by_alias">
<description>
Get a pointer to a #GdaQueryTarget (which must be within @query) using
its alias (if not found then @alias_or_name is interpreted as the target name)


</description>
<parameters>
<parameter name="query">
<parameter_description> a #GdaQuery object
</parameter_description>
</parameter>
<parameter name="alias_or_name">
<parameter_description> the alias or name
</parameter_description>
</parameter>
</parameters>
<return> the #GdaQueryTarget object, or NULL if not found
</return>
</function>

<function name="gda_parameter_list_new_from_spec_node">
<description>
Creates a new #GdaParameterList object from the @xml_spec
specifications


</description>
<parameters>
<parameter name="dict">
<parameter_description> a #GdaDict object, or %NULL
</parameter_description>
</parameter>
<parameter name="xml_spec">
<parameter_description> a #xmlNodePtr for a &amp;lt;parameters&amp;gt; tag
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store the error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a new object, or %NULL if an error occurred
</return>
</function>

<function name="gda_row_set_model">
<description>
Set the #GdaDataModel the given #GdaRow belongs to. Note that calling
this method should be reserved to GdaDataModel implementations and should
therefore not be called by the user.

</description>
<parameters>
<parameter name="row">
<parameter_description> a #GdaRow.
</parameter_description>
</parameter>
<parameter name="model">
<parameter_description> a #GdaDataModel this row belongs to, or %NULL if the row is outside any data model
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_parameter_list_find_source_for_param">
<description>
Finds a #GdaParameterListSource which contains the #GdaDataModel restricting the possible values of
@param, don&apos;t modify the returned structure.


</description>
<parameters>
<parameter name="paramlist">
<parameter_description> a #GdaParameterList object
</parameter_description>
</parameter>
<parameter name="param">
<parameter_description> a #GdaParameter object
</parameter_description>
</parameter>
</parameters>
<return> a #GdaParameterListSource or %NULL
</return>
</function>

<function name="gda_connection_get_client">
<description>
Gets the #GdaClient object associated with a connection. This
is always the client that created the connection, as returned
by #gda_client_open_connection.


</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection object.
</parameter_description>
</parameter>
</parameters>
<return> the client to which the connection belongs to.
</return>
</function>

<function name="gda_object_get_owner">
<description>
Fetch the owner of the GdaObject object.


</description>
<parameters>
<parameter name="gdaobj">
<parameter_description> a #GdaObject object
</parameter_description>
</parameter>
</parameters>
<return> the object&apos;s owner.
</return>
</function>

<function name="gda_dict_declare_object">
<description>
Declares the existence of a new object to @dict: @dict knows about @object but does not
hold any reference to it. If @dict must hold such a reference, then use gda_dict_assume_object().

</description>
<parameters>
<parameter name="dict">
<parameter_description> a #GdaDict object
</parameter_description>
</parameter>
<parameter name="object">
<parameter_description> a #GdaObject object
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_value_copy">
<description>
Creates a new #GValue from an existing one.


</description>
<parameters>
<parameter name="value">
<parameter_description> value to get a copy from.
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated #GValue with a copy of the data in @value.
</return>
</function>

<function name="gda_value_take_blob">
<description>
Stores @val into @value, but on the contrary to gda_value_set_blob(), the @blob
argument is not copied, but used as-is and it should be considered owned by @value.

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue that will store @val.
</parameter_description>
</parameter>
<parameter name="blob">
<parameter_description> a #GdaBlob structure with the data and its size to be stored in @value.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_data_model_dump">
<description>
Dumps a textual representation of the @model to the @to_stream stream

</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModel.
</parameter_description>
</parameter>
<parameter name="to_stream">
<parameter_description> where to dump the data model
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_query_add_target">
<description>
Adds a target to @query. A target represents a entity (it can actually be a table,
a view, or another query) which @query will use. 

For a SELECT query, the targets appear
after the FROM clause. The targets can be joined two by two using #GdaQueryJoin objects

For UPDATE, DELETE or INSERT queries, there can be only ONE #GdaQueryTarget object which is
the one where the data modifications are performed.

For UNION and INTERSECT queries, there is no possible #GdaQueryTarget object.


</description>
<parameters>
<parameter name="query">
<parameter_description> a #GdaQuery object
</parameter_description>
</parameter>
<parameter name="target">
<parameter_description> a #GdaQueryTarget to add to @query
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_graph_get_graph_type">
<description>
Get the graph type of @graph.


</description>
<parameters>
<parameter name="graph">
<parameter_description> a #GdaGraph object
</parameter_description>
</parameter>
</parameters>
<return> the type
</return>
</function>

<function name="gda_config_find_data_source">
<description>
Gets a #GdaDataSourceInfo structure from the data source list given its 
name. After usage, the returned structure&apos;s memory must be freed using
gda_data_source_info_free().


</description>
<parameters>
<parameter name="name">
<parameter_description> name of the data source to search for.
</parameter_description>
</parameter>
</parameters>
<return> a new #GdaDataSourceInfo structure, if found, or %NULL if not found.
</return>
</function>

<function name="gda_query_get_first_field_for_target">
<description>
Finds the first occurence of a #GdaQueryFieldField object whose target is @target in @query


</description>
<parameters>
<parameter name="query">
<parameter_description> a #GdaQuery object
</parameter_description>
</parameter>
<parameter name="target">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return> the requested field, or %NULL
</return>
</function>

<function name="gda_data_model_hash_insert_row">
<description>
Inserts a @row in the @model.

</description>
<parameters>
<parameter name="model">
<parameter_description> the #GdaDataModelHash which is gonna hold the row.
</parameter_description>
</parameter>
<parameter name="rownum">
<parameter_description> the number of the row.
</parameter_description>
</parameter>
<parameter name="row">
<parameter_description> the row to insert. The model is responsible of freeing it!
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_connection_get_schema">
<description>
Asks the underlying data source for a list of database objects.

This is the function that lets applications ask the different
providers about all their database objects (tables, views, procedures,
etc). The set of database objects that are retrieved are given by the
2 parameters of this function: @schema, which specifies the specific
schema required, and @params, which is a list of parameters that can
be used to give more detail about the objects to be returned.

The list of parameters is specific to each schema type, see the
&amp;lt;link linkend=&quot;libgda-provider-get-schema&quot;&amp;gt;get_schema() virtual method for providers&amp;lt;/link&amp;gt; for more details.


</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection object.
</parameter_description>
</parameter>
<parameter name="schema">
<parameter_description> database schema to get.
</parameter_description>
</parameter>
<parameter name="params">
<parameter_description> parameter list.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GdaDataModel containing the data required. The caller is responsible
of freeing the returned model using g_object_unref().
</return>
</function>

<function name="gda_dict_constraint_unique_set_fields">
<description>

</description>
<parameters>
<parameter name="cstr">
<parameter_description> a #GdaDictConstraint object
</parameter_description>
</parameter>
<parameter name="fields">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_parameter_get_not_null">
<description>
Get wether the parameter can be NULL or not


</description>
<parameters>
<parameter name="param">
<parameter_description> a #GdaParameter object
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the parameter cannot be NULL
</return>
</function>

<function name="gda_server_operation_get_root_nodes">
<description>
Get an array of strings containing the paths of nodes situated at the root of @op.


</description>
<parameters>
<parameter name="op">
<parameter_description> a #GdaServerOperation object
</parameter_description>
</parameter>
</parameters>
<return> a new array, which must be freed with g_strfreev().
</return>
</function>

<function name="gda_query_get_parameters">
<description>
Get a list of parameters which the query accepts.


</description>
<parameters>
<parameter name="query">
<parameter_description> a #GdaQuery object
</parameter_description>
</parameter>
</parameters>
<return> a list of #GdaParameter objects (the list and objects must be freed by the caller)
</return>
</function>

<function name="gda_column_get_primary_key">
<description>

</description>
<parameters>
<parameter name="column">
<parameter_description> a #GdaColumn.
</parameter_description>
</parameter>
</parameters>
<return> whether if the given column is a primary key (%TRUE or %FALSE).
</return>
</function>

<function name="gda_utility_build_decoded_id">
<description>
Reverse of gda_utility_build_encoded_id()

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gda_data_model_filter_sql_set_sql">
<description>
Sets the SQL command to be used on the given #GdaDataModelFilterSQL object
for filtering rows from the source data model (which is
set with #gda_data_model_filter_sql_set_source).

</description>
<parameters>
<parameter name="sel">
<parameter_description> a #GdaDataModelFilterSQL object.
</parameter_description>
</parameter>
<parameter name="sql">
<parameter_description> the SQL command to be used for filtering rows.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_data_model_import_new_file">
<description>
Creates a new #GdaDataModel object which contains the data stored within the @filename file.


</description>
<parameters>
<parameter name="filename">
<parameter_description> the file to import data from
</parameter_description>
</parameter>
<parameter name="random_access">
<parameter_description> TRUE if random access will be required
</parameter_description>
</parameter>
<parameter name="options">
<parameter_description> list of options for the export
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the newly created #GdaDataModel.
</return>
</function>

<function name="gda_parameter_list_find_param">
<description>
Finds a #GdaParameter using its name


</description>
<parameters>
<parameter name="paramlist">
<parameter_description> a #GdaParameterList object
</parameter_description>
</parameter>
<parameter name="param_name">
<parameter_description> the name of the requested parameter
</parameter_description>
</parameter>
</parameters>
<return> a #GdaParameter or %NULL
</return>
</function>

<function name="gda_value_get_ushort">
<description>

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue whose value we want to get.
</parameter_description>
</parameter>
</parameters>
<return> the value stored in @value.
</return>
</function>

<function name="gda_server_operation_load_data_from_xml">
<description>
Loads the contents of @node into @op. The XML tree passed through the @node
argument must correspond to an XML tree saved using gda_server_operation_save_data_to_xml().


</description>
<parameters>
<parameter name="op">
<parameter_description> a #GdaServerOperation object
</parameter_description>
</parameter>
<parameter name="node">
<parameter_description> a #xmlNodePtr
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if no error occurred
</return>
</function>

<function name="gda_handler_string_new">
<description>
Creates a data handler for strings


</description>
<parameters>
</parameters>
<return> the new object
</return>
</function>

<function name="gda_aggregates_get_by_name_arg">
<description>
To find a DBMS aggregate which is uniquely identified by its name and the type
of its argument.

About the aggregates accepting any data type for their argument: if @argtype is not %NULL
then such an aggregate will be a candidate, and if @argtype is %NULL
then only such an aggregate will be a candidate.

If several aggregates are found, then the aggregate completely matching will be returned, or
an aggregate where the argument type has the same GDA typa as the @argtype, or lastly an
aggregate accepting any data type as argument.


</description>
<parameters>
<parameter name="dict">
<parameter_description> a #GdaDict object
</parameter_description>
</parameter>
<parameter name="aggname">
<parameter_description> the name of the aggregate
</parameter_description>
</parameter>
<parameter name="argtype">
<parameter_description> the type of argument or %NULL
</parameter_description>
</parameter>
</parameters>
<return> The aggregate or NULL if not found
</return>
</function>

<function name="gda_dict_aggregate_set_sqlname">
<description>
Set the SQL name of the data type.

</description>
<parameters>
<parameter name="agg">
<parameter_description> a #GdaDictAggregate object
</parameter_description>
</parameter>
<parameter name="sqlname">
<parameter_description> 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_query_join_set_join_type">
<description>
Sets the type of @join

</description>
<parameters>
<parameter name="join">
<parameter_description> a #GdaQueryJoin object
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> the new type of join
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_data_proxy_row_is_deleted">
<description>
Tells if the row number @proxy_row is marked to be deleted.


</description>
<parameters>
<parameter name="proxy">
<parameter_description> a #GdaDataProxy object
</parameter_description>
</parameter>
<parameter name="proxy_row">
<parameter_description> A proxy row number
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the row is marked to be deleted
</return>
</function>

<function name="gda_connection_event_set_gda_code">
<description>
Sets @event&apos;s gda code: that code is standardized by the libgda
library. If you want to specify the corresponding provider specific code,
use gda_connection_event_get_code() instead.

</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdaConnectionEvent
</parameter_description>
</parameter>
<parameter name="code">
<parameter_description> a code
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_entity_get_field_by_xml_id">
<description>


</description>
<parameters>
<parameter name="iface">
<parameter_description> an object implementing the #GdaEntity interface
</parameter_description>
</parameter>
<parameter name="xml_id">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return> the requested GdaEntityField
</return>
</function>

<function name="gda_graphviz_save_file">
<description>
Saves a dot representation of the @graph object to @filename


</description>
<parameters>
<parameter name="graph">
<parameter_description> a #GdaGraphviz object
</parameter_description>
</parameter>
<parameter name="filename">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_data_model_get_column_title">
<description>

</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModel object.
</parameter_description>
</parameter>
<parameter name="col">
<parameter_description> column number.
</parameter_description>
</parameter>
</parameters>
<return> the title for the given column in a data model object.
</return>
</function>

<function name="gda_dict_database_get_table_by_xml_id">
<description>
Get a reference to a GdaDictTable using its XML id.


</description>
<parameters>
<parameter name="db">
<parameter_description> a #GdaDictDatabase object
</parameter_description>
</parameter>
<parameter name="xml_id">
<parameter_description> the XML id of the requested table
</parameter_description>
</parameter>
</parameters>
<return> The GdaDictTable pointer or NULL if the requested table does not exist.
</return>
</function>

<function name="gda_data_model_query_new">
<description>
Creates a new #GdaDataModel object using the data returned by the execution of the
@query SELECT query.


</description>
<parameters>
<parameter name="query">
<parameter_description> a SELECT query 
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the newly created #GdaDataModel.
</return>
</function>

<function name="gda_object_ref_set_ref_object_type">
<description>
Rather than to set the XML Id of the object @ref has to reference, this function allows
to directly give the object, and specify the requested type, in case the object is known.

</description>
<parameters>
<parameter name="ref">
<parameter_description> a #GdaObjectRef object
</parameter_description>
</parameter>
<parameter name="object">
<parameter_description> the object to keep a reference to
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> the type of object requested: it must be a type in the class hierarchy of @object
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_value_get_numeric">
<description>

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue whose value we want to get.
</parameter_description>
</parameter>
</parameters>
<return> the value stored in @value.
</return>
</function>

<function name="BLOB">
<description>

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gda_value_set_short">
<description>
Stores @val into @value.

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue that will store @val.
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> value to be stored in @value.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_server_provider_blob_list_for_update">
<description>
Create a SELECT query from an UPDATE query which lists all the BLOB fields in the
query which will be updated. This function is used by GdaServerProvider implementations
when dealing with BLOB updates.

After execution, @out_select contains a new GdaQuery, or %NULL if the update query does not have any
BLOB to update.

For example UPDATE blobs set name = ##/ *name:&apos;name&apos; type:gchararray* /, data = ##/ *name:&apos;theblob&apos; type:&apos;GdaBlob&apos;* / WHERE id= ##/ *name:&apos;id&apos; type:gint* /
will create:
SELECT t1.data FROM blobs AS t1 WHERE id= ##/ *name:&apos;id&apos; type:gint* /


</description>
<parameters>
</parameters>
<return> TRUE if no error occurred.
</return>
</function>

<function name="gda_data_proxy_get_model">
<description>
Get the #GdaDataModel which holds the unmodified (reference) data of @proxy


</description>
<parameters>
<parameter name="proxy">
<parameter_description> a #GdaDataProxy object
</parameter_description>
</parameter>
</parameters>
<return> the #GdaDataModel
</return>
</function>

<function name="gda_entity_is_writable">
<description>
Tells if the real entity (the corresponding DBMS object) represented by @iface can be written to.


</description>
<parameters>
<parameter name="iface">
<parameter_description> an object implementing the #GdaEntity interface
</parameter_description>
</parameter>
</parameters>
<return> TRUE if it is possible to write to @iface
</return>
</function>

<function name="gda_row_set_number">
<description>
Sets the row number for the given row.

</description>
<parameters>
<parameter name="row">
<parameter_description> a #GdaRow.
</parameter_description>
</parameter>
<parameter name="number">
<parameter_description> the new row number.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_client_notify_connection_opened_event">
<description>
Notifies the given #GdaClient of the #GDA_CLIENT_EVENT_CONNECTION_OPENED 
event.

</description>
<parameters>
<parameter name="client">
<parameter_description> a #GdaClient object.
</parameter_description>
</parameter>
<parameter name="cnc">
<parameter_description> a #GdaConnection object.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_client_open_connection_from_string">
<description>
Opens a connection given a provider ID and a connection string. This
allows applications to open connections without having to create
a data source in the configuration. The format of @cnc_string is
similar to PostgreSQL and MySQL connection strings. It is a semicolumn-separated
series of key=value pairs. Do not add extra whitespace after the semicolumn
separator. The possible keys depend on the provider, but
these keys should work with all providers:
USER, PASSWORD, HOST, DATABASE, PORT

The username and password used to actually open the connection are the first
non-NULL string being chosen by order from
&amp;lt;itemizedlist&amp;gt;
&amp;lt;listitem&amp;gt;the @username or @password&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;the USERNAME= and PASSWORD= parts of the @cnc_string&amp;lt;/listitem&amp;gt;
&amp;lt;/itemizedlist&amp;gt;




</description>
<parameters>
<parameter name="client">
<parameter_description> a #GdaClient object.
</parameter_description>
</parameter>
<parameter name="provider_id">
<parameter_description> provider ID to connect to.
</parameter_description>
</parameter>
<parameter name="cnc_string">
<parameter_description> connection string.
</parameter_description>
</parameter>
<parameter name="username">
<parameter_description> user name.
</parameter_description>
</parameter>
<parameter name="password">
<parameter_description> password for @username.
</parameter_description>
</parameter>
<parameter name="options">
<parameter_description> options for the connection (see #GdaConnectionOptions).
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store an error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the opened connection if successful, %NULL if there is
an error.
</return>
</function>

<function name="gda_query_field_all_get_target">
<description>
Get the #GdaQueryTarget object @field &apos;belongs&apos; to


</description>
<parameters>
<parameter name="field">
<parameter_description> a #GdaQueryFieldAll object
</parameter_description>
</parameter>
</parameters>
<return> the #GdaQueryTarget object
</return>
</function>

<function name="gda_data_model_index__free">
<description>
Deallocates all memory associated to the given #GdaDataModelIndex object.

</description>
<parameters>
<parameter name="dmi">
<parameter_description> the resource to free.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_server_provider_select_query_has_blobs">
<description>
Determines if @query (which must be a SELECT query) returns a data model with some BLOB data

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gda_dict_extend_with_functions">
<description>
Make @dict handle functions and aggregates

</description>
<parameters>
<parameter name="dict">
<parameter_description> a #GdaDict object
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_query_is_insert_query">
<description>
Tells if @query is a INSERT query.


</description>
<parameters>
<parameter name="query">
<parameter_description> a # GdaQuery object
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @query is an insertion query
</return>
</function>

<function name="gda_referer_is_active">
<description>
Get the status of an object


</description>
<parameters>
<parameter name="iface">
<parameter_description> an object which implements the #GdaReferer interface
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the object is active
</return>
</function>

<function name="gda_blob_op_write">
<description>
Writes a chunk of bytes from a @blob to the BLOB accessible through @op.


</description>
<parameters>
<parameter name="op">
<parameter_description> a #GdaBlobOp
</parameter_description>
</parameter>
<parameter name="blob">
<parameter_description> a #GdaBlob which contains the data to write
</parameter_description>
</parameter>
<parameter name="offset">
<parameter_description> offset to write from the start of the blob (starts at 0)
</parameter_description>
</parameter>
</parameters>
<return> the number of bytes written. In case of error, -1 is returned and the
provider should have added an error to the connection.
</return>
</function>

<function name="gda_blob_copy">
<description>
Creates a new #GdaBlob structure from an existing one.


</description>
<parameters>
<parameter name="boxed">
<parameter_description> source to get a copy from.
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated #GdaBlob which contains a copy of
information in @boxed.
</return>
</function>

<function name="gda_query_condition_is_ancestor">
<description>
Tests if @ancestor is an ancestor of @condition


</description>
<parameters>
<parameter name="condition">
<parameter_description> a #GdaQueryCondition object
</parameter_description>
</parameter>
<parameter name="ancestor">
<parameter_description> a #GdaQueryCondition object
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @ancestor is an ancestor of @condition
</return>
</function>

<function name="gda_dict_constraint_unique_get_fields">
<description>
Get the list of fields represented by this UNIQUE constraint. It&apos;s up to the caller to free the list.


</description>
<parameters>
<parameter name="cstr">
<parameter_description> a #GdaDictConstraint object
</parameter_description>
</parameter>
</parameters>
<return> a new list of fields
</return>
</function>

<function name="gda_parameter_list_add_param">
<description>
Adds @param to the list of parameters managed within @paramlist.
WARNING: the paramlist may decide not to use the @param parameter, but to
modify another parameter already present within the paramlist. The publicly available
lists from the @paramlist object may also be changed in the process.

</description>
<parameters>
<parameter name="paramlist">
<parameter_description> a #GdaParameterList object
</parameter_description>
</parameter>
<parameter name="param">
<parameter_description> a #GdaParameter object
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_drop_table">
<description>
This is just a convenient function to drop a table in an opened connection.


</description>
<parameters>
<parameter name="cnn">
<parameter_description> an opened connection
</parameter_description>
</parameter>
<parameter name="table_name">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the table was dropped
</return>
</function>

<function name="gda_data_model_set_values">
<description>
If any value in @values is actually %NULL, then 
it is considered as a default value.


</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModel object.
</parameter_description>
</parameter>
<parameter name="row">
<parameter_description> row number.
</parameter_description>
</parameter>
<parameter name="values">
<parameter_description> a list of #GValue, one for each n (&amp;lt;nb_cols) columns of @model
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the value in the data model has been updated and no error occurred
</return>
</function>

<function name="gda_column_set_primary_key">
<description>
Sets the &apos;primary key&apos; flag of the given column.

</description>
<parameters>
<parameter name="column">
<parameter_description> a #GdaColumn.
</parameter_description>
</parameter>
<parameter name="pk">
<parameter_description> whether if the given column should be a primary key.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_renderer_render_as_str">
<description>
Build a human readable string representing the object, in the specified context.


</description>
<parameters>
<parameter name="iface">
<parameter_description> an object which implements the #GdaRenderer interface
</parameter_description>
</parameter>
<parameter name="context">
<parameter_description> rendering context
</parameter_description>
</parameter>
</parameters>
<return> the new string
</return>
</function>

<function name="gda_connection_get_infos">
<description>
Get a pointer to a #GdaServerProviderInfo structure (which must not be modified)
to retreive specific information about the provider used by @cnc.

</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection object
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_delimiter_split_sql">
<description>
Splits @sql_text into a NULL-terminated array of SQL statements, like the g_strsplit()
function.

As a side note, this function returns %NULL if @sql_text is %NULL or if no statement was found.


</description>
<parameters>
<parameter name="sql_text">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated NULL-terminated array of strings. Use g_strfreev() to free it.
</return>
</function>

<function name="gda_value_is_number">
<description>
Gets whether the value stored in the given #GValue is of
numeric type or not.


</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if a number, %FALSE otherwise.
</return>
</function>

<function name="gda_dict_constraint_uses_field">
<description>
Tests if @field is part of the @cstr constraint


</description>
<parameters>
<parameter name="cstr">
<parameter_description> a #GdaDictConstraint object
</parameter_description>
</parameter>
<parameter name="field">
<parameter_description> a #GdaDictField object
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @cstr uses @field
</return>
</function>

<function name="gda_parameter_set_exists_default_value">
<description>
Tells if @param has default unspecified value. This function is usefull
if one wants to inform that @param has a default value but does not know
what that default value actually is.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gda_server_provider_get_data_handler_gtype">
<description>
Find a #GdaDataHandler object to manipulate data of type @for_type.


</description>
<parameters>
<parameter name="provider">
<parameter_description> a server provider.
</parameter_description>
</parameter>
<parameter name="cnc">
<parameter_description> a #GdaConnection object, or %NULL
</parameter_description>
</parameter>
<parameter name="for_type">
<parameter_description> a #GType
</parameter_description>
</parameter>
</parameters>
<return> a #GdaDataHandler, or %NULL if the provider does not support the requested @for_type data type 
</return>
</function>

<function name="gda_dict_database_add_constraint">
<description>
Add the @cstr constraint to the database. The @cstr constraint is a user-defined constraint
(which is not part of the database structure itself).

</description>
<parameters>
<parameter name="db">
<parameter_description> a #GdaDictDatabase object
</parameter_description>
</parameter>
<parameter name="cstr">
<parameter_description> a #GdaDictConstraint
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_data_proxy_cancel_all_changes">
<description>
Cancel all the changes stored in the proxy (the @proxy will be reset to its state
as it was just after creation).


</description>
<parameters>
<parameter name="proxy">
<parameter_description> a #GdaDataProxy object
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_config_get_provider_list">
<description>
Returns: a GList of #GdaProviderInfo structures, don&apos;t free or modify it!

</description>
<parameters>
</parameters>
<return> a GList of #GdaProviderInfo structures, don&apos;t free or modify it!
</return>
</function>

<function name="gda_data_model_index_get_name">
<description>

</description>
<parameters>
<parameter name="dmi">
<parameter_description> a #GdaDataModelIndex.
</parameter_description>
</parameter>
</parameters>
<return> the name of @dmi.
</return>
</function>

<function name="gda_query_object_set_int_id">
<description>
Sets the integer ID of @qobj; this also triggers a change in the string ID 
(which can be obtained using gda_object_get_id()) of the object.

</description>
<parameters>
<parameter name="qobj">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="id">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_connection_value_to_sql_string">
<description>
Produces a fully quoted and escaped string from a GValue


</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection object.
</parameter_description>
</parameter>
<parameter name="from">
<parameter_description> #GValue to convert from
</parameter_description>
</parameter>
</parameters>
<return> escaped and quoted value or NULL if not supported.
</return>
</function>

<function name="gda_dict_register_object_type">
<description>
Make @dict manage objects of type @reg-&amp;gt;type.

</description>
<parameters>
<parameter name="dict">
<parameter_description> a #GdaDict object
</parameter_description>
</parameter>
<parameter name="reg">
<parameter_description> a #GdaDictRegisterStruct structure
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_server_operation_get_sequence_min_size">
<description>

</description>
<parameters>
<parameter name="op">
<parameter_description> a #GdaServerOperation object
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> a complete path to a sequence node (starting with &quot;/&quot;)
</parameter_description>
</parameter>
</parameters>
<return> the minimum number of items in the sequence at @path, or 0 if @path is not a sequence node
</return>
</function>

<function name="gda_dict_aggregate_set_dbms_id">
<description>
Set the DBMS identifier of the aggregate

</description>
<parameters>
<parameter name="agg">
<parameter_description> a #GdaDictAggregate object
</parameter_description>
</parameter>
<parameter name="id">
<parameter_description> the DBMS identifier
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_dict_field_set_dict_type">
<description>
Sets the data type of the field

</description>
<parameters>
<parameter name="field">
<parameter_description> a #GdaDictField  object
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> a #GdaDictType object
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_object_ref_new_copy">
<description>
Creates a new GdaObjectRef object which is a copy of @orig. This is a copy constructor.


</description>
<parameters>
<parameter name="orig">
<parameter_description> a #GdaObjectRef object
</parameter_description>
</parameter>
</parameters>
<return> the new object
</return>
</function>

<function name="gda_data_model_filter_sql_add_source">
<description>
Adds a data model as a source of data for the #GdaDataModelFilterSQL object. When
the select object is run (via #gda_data_model_filter_sql_run), it will parse the SQL
and get the required data from the source data models.

</description>
<parameters>
<parameter name="sel">
<parameter_description> a #GdaDataModelFilterSQL object.
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> name to identify the data model (usually a table name).
</parameter_description>
</parameter>
<parameter name="source">
<parameter_description> a #GdaDataModel from which to get data.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_server_operation_get_sequence_item_names">
<description>
Fetch the contents of a sequence. @path can describe either a sequence (for example &quot;/SEQNAME&quot;) or an item in a sequence
(for example &quot;/SEQNAME/3&quot;)


</description>
<parameters>
<parameter name="op">
<parameter_description> a #GdaServerOperation object
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> a complete path to a sequence node (starting with &quot;/&quot;)
</parameter_description>
</parameter>
</parameters>
<return> a array of strings containing the complete paths of the nodes contained at @path (free with g_strfreev())
</return>
</function>

<function name="gda_server_provider_value_to_sql_string">
<description>
Produces a fully quoted and escaped string from a GValue


</description>
<parameters>
<parameter name="provider">
<parameter_description> a server provider.
</parameter_description>
</parameter>
<parameter name="cnc">
<parameter_description> a #GdaConnection object, or %NULL
</parameter_description>
</parameter>
<parameter name="from">
<parameter_description> #GValue to convert from
</parameter_description>
</parameter>
</parameters>
<return> escaped and quoted value or NULL if not supported.
</return>
</function>

<function name="gda_data_model_index_set_primary_key">
<description>
Sets if a #GdaDataModelIndex is a primary key.

</description>
<parameters>
<parameter name="dmi">
<parameter_description> a #GdaDataModelIndex.
</parameter_description>
</parameter>
<parameter name="pk">
<parameter_description> the new primary key setting of @dmi.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_data_model_query_refresh">
<description>
(Re)-runs the SELECT query to update the contents of @model


</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModelQuery data model
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_parameter_list_add_param_from_value">
<description>
Creates and adds a new #GdaParameter to @paramlist. The ID and name of the new parameter
are set as @name. The parameter&apos;s value is a copy of @value.


</description>
<parameters>
<parameter name="paramlist">
<parameter_description> a #GdaParameterList object
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name to give to the new parameter
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the value to give to the new parameter, must not be NULL or of type null
</parameter_description>
</parameter>
</parameters>
<return> the new #GdaParameter for information, or %NULL if an error occurred
</return>
</function>

<function name="gda_parameter_new">
<description>
Creates a new parameter of type @type


</description>
<parameters>
<parameter name="type">
<parameter_description> the #GType requested
</parameter_description>
</parameter>
</parameters>
<return> a new #GdaParameter object
</return>
</function>

<function name="gda_create_table">
<description>
Create a Table over an opened connection using a pair list of colum name and 
GType as arguments, you need to finish the list using NULL.

This is just a convenient function to create tables quickly, 
using defaults for the provider and converting the #GType passed to the corresponding 
type in the provider; to use a custom type or more advanced characteristics in a 
specific provider use the #GdaServerOperation framework.


</description>
<parameters>
<parameter name="cnn">
<parameter_description> an opened connection
</parameter_description>
</parameter>
<parameter name="table_name">
<parameter_description>
@num_columns
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> pairs of column name and #GType, finish with NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the table was created; FALSE and set @error otherwise
</return>
</function>

<function name="gda_server_provider_get_schema_nb_columns">
<description>

</description>
<parameters>
<parameter name="schema">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return> the number of columns the #GdaDataModel for the requested schema
must have
</return>
</function>

<function name="gda_query_join_set_condition_from_sql">
<description>
Parses @cond and if it represents a valid SQL expression to be @join&apos;s
condition, then set it to be @join&apos;s condition.


</description>
<parameters>
<parameter name="join">
<parameter_description> a #GdaQueryJoin object
</parameter_description>
</parameter>
<parameter name="cond">
<parameter_description> a SQL expression
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> place to store the error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a TRUE on success
</return>
</function>

<function name="gda_data_proxy_get_proxied_model_n_cols">
<description>
Get the number of columns in the proxied data model


</description>
<parameters>
<parameter name="proxy">
<parameter_description> a #GdaDataProxy object
</parameter_description>
</parameter>
</parameters>
<return> the number of columns, or -1 if an error occurred
</return>
</function>

<function name="gda_utility_check_data_model">
<description>
Check the column types of a GdaDataModel.


</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModel object
</parameter_description>
</parameter>
<parameter name="nbcols">
<parameter_description> the minimum requested number of columns
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> @nbcols arguments of type GType or -1 (if any data type is accepted)
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the data model&apos;s columns match the provided data types and number
</return>
</function>

<function name="scan">
<description>
@return the newly allocated buffer state object.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gda_dict_database_get_field_by_xml_id">
<description>
Get a reference to a GdaDictField specifying its XML id


</description>
<parameters>
<parameter name="db">
<parameter_description> a #GdaDictDatabase object
</parameter_description>
</parameter>
<parameter name="xml_id">
<parameter_description> the XML id of the requested table field
</parameter_description>
</parameter>
</parameters>
<return> The GdaDictField pointer or NULL if the requested field does not exist.
</return>
</function>

<function name="gda_query_join_get_join_type">
<description>
Get the type of a join


</description>
<parameters>
<parameter name="join">
<parameter_description> a #GdaQueryJoin object
</parameter_description>
</parameter>
</parameters>
<return> the type of @join
</return>
</function>

<function name="gda_value_take_binary">
<description>
Stores @val into @value, but on the contrary to gda_value_set_binary(), the @binary
argument is not copied, but used as-is and it should be considered owned by @value.

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue that will store @val.
</parameter_description>
</parameter>
<parameter name="binary">
<parameter_description> a #GdaBinary structure with the data and its size to be stored in @value.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_parameter_get_default_value">
<description>
Get the default value held into the parameter. WARNING: the default value does not need to be of 
the same type as the one required by @param.


</description>
<parameters>
<parameter name="param">
<parameter_description> a #GdaParameter object
</parameter_description>
</parameter>
</parameters>
<return> the default value
</return>
</function>

<function name="gda_dict_load">
<description>
Loads an XML file which respects the Libgda DTD, and creates all the necessary
objects that are defined within the XML file. During the creation of the other
objects, all the normal signals are emitted.

If the GdaDict object already has some contents, then it is first of all
destroyed (to return its state as when it was first created).

If an error occurs during loading then the GdaDict object is left as empty
as when it is first created.

The file loaded is the one specified using gda_dict_set_xml_filename()


</description>
<parameters>
<parameter name="dict">
<parameter_description> a #GdaDict object
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if loading was successfull and FALSE otherwise.
</return>
</function>

<function name="gda_data_source_info_free">
<description>
Deallocates all memory associated to the given #GdaDataSourceInfo.

</description>
<parameters>
<parameter name="info">
<parameter_description> data source information to free.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_query_get_joins">
<description>
Get a list of all the joins used in @query


</description>
<parameters>
<parameter name="query">
<parameter_description> a #GdaQuery object
</parameter_description>
</parameter>
</parameters>
<return> a new list of the joins
</return>
</function>

<function name="gda_query_new_from_sql">
<description>
Creates a new #GdaQuery object and fills its structure by parsing the @sql. If the parsing failed,
then the returned query is of type GDA_QUERY_TYPE_NON_PARSED_SQL.

To be parsed successfully, the expected SQL must respect the SQL standard; some extensions have been
added to be able to define variables within the SQL statement. See the introduction to the #GdaQuery
for more information. 

The @error is set only if the SQL statement parsing produced an error; there is always a new #GdaQuery
object which is returned.


</description>
<parameters>
<parameter name="dict">
<parameter_description> a #GdaDict object
</parameter_description>
</parameter>
<parameter name="sql">
<parameter_description> an SQL statement
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a new #GdaQuery
</return>
</function>

<function name="gda_data_model_hash_new">
<description>

</description>
<parameters>
<parameter name="cols">
<parameter_description> number of columns for rows in this data model.
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the newly created #GdaDataModel.
</return>
</function>

<function name="gda_client_get_connections">
<description>
Gets the list of all open connections in the given #GdaClient object.
The GList returned is an internal pointer, so DON&apos;T TRY TO
FREE IT.


</description>
<parameters>
<parameter name="client">
<parameter_description> a #GdaClient object.
</parameter_description>
</parameter>
</parameters>
<return> a GList of #GdaConnection objects; dont&apos;t modify that list
</return>
</function>

<function name="gda_query_condition_new_from_sql">
<description>
Creates a new #GdaQueryCondition object, which references other objects of @query, 
from the @sql_cond statement.


</description>
<parameters>
<parameter name="query">
<parameter_description> a #GdaQuery object
</parameter_description>
</parameter>
<parameter name="sql_cond">
<parameter_description> a SQL statement representing a valid condition
</parameter_description>
</parameter>
<parameter name="targets">
<parameter_description> location to store a list of targets used by the new condition (and its children), or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a new #GdaQueryCondition, or %NULL if there was an error in @sql_cond
</return>
</function>

<function name="gda_data_model_hash_clear">
<description>
Frees all the rows inserted in @model.

</description>
<parameters>
<parameter name="model">
<parameter_description> the model to clear.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_entity_get_fields">
<description>
Get a new list containing all the #GdaEntityField objects held within the object
implementing the #GdaEntity interface.

The returned list nodes are in the order in which the fields are within the entity.


</description>
<parameters>
<parameter name="iface">
<parameter_description> an object implementing the #GdaEntity interface
</parameter_description>
</parameter>
</parameters>
<return> the new list.
</return>
</function>

<function name="gda_dict_dump">
<description>
Dumps the whole dictionary managed by the GdaDict object

</description>
<parameters>
<parameter name="dict">
<parameter_description> a #GdaDict object
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_data_model_iter_is_valid">
<description>
Tells if @iter is a valid iterator (if it actually corresponds to a valid row in the model)


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GdaDataModelIter object
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @iter is valid
</return>
</function>

<function name="gda_parameter_list_find_param_for_user">
<description>
Finds a #GdaParameter which is to be used by @user


</description>
<parameters>
<parameter name="paramlist">
<parameter_description> a #GdaParameterList object
</parameter_description>
</parameter>
<parameter name="user">
<parameter_description> a #GdaObject object
</parameter_description>
</parameter>
</parameters>
<return> a #GdaParameter or %NULL
</return>
</function>

<function name="gda_numeric_copy">
<description>
Creates a new #GdaNumeric structure from an existing one.


</description>
<parameters>
<parameter name="boxed">
<parameter_description> source to get a copy from.
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated #GdaNumeric which contains a copy of
information in @boxed.
</return>
</function>

<function name="gda_entity_get_n_fields">
<description>
Get the number of fields in @iface


</description>
<parameters>
<parameter name="iface">
<parameter_description> an object implementing the #GdaEntity interface
</parameter_description>
</parameter>
</parameters>
<return> the number of fields, or -1 if an error occurred
</return>
</function>

<function name="gda_numeric_free">
<description>
Deallocates all memory associated to the given @boxed

</description>
<parameters>
<parameter name="boxed">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_column_get_dbms_type">
<description>

</description>
<parameters>
<parameter name="column">
<parameter_description> a #GdaColumn.
</parameter_description>
</parameter>
</parameters>
<return> the dbms_type of @column.
</return>
</function>

<function name="gda_query_field_is_internal">
<description>

</description>
<parameters>
<parameter name="qfield">
<parameter_description> a #GdaQueryField object
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @field is internal
</return>
</function>

<function name="gda_xml_storage_get_xml_id">
<description>
Fetch the xml id string of the object, it&apos;s up to the caller to
free the string.


</description>
<parameters>
<parameter name="iface">
<parameter_description> an object which implements the #GdaXmlStorage interface
</parameter_description>
</parameter>
</parameters>
<return> the xml id.
</return>
</function>

<function name="gda_query_field_set_alias">
<description>
Sets @qfield&apos;s alias

</description>
<parameters>
<parameter name="qfield">
<parameter_description> a #GdaQueryField object
</parameter_description>
</parameter>
<parameter name="alias">
<parameter_description> the alias to set @qfield to
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_parameter_list_set_param_default_value">
<description>
Stores @value in @paramlist to make it possible for @paramlist&apos;s users to find a default value
for @param when one is required, instead of %NULL.

@paramlist only provides a storage functionnality, the way the value obtained with 
gda_parameter_list_get_param_default_value() is used is up to @paramlist&apos;s user.

</description>
<parameters>
<parameter name="paramlist">
<parameter_description> a #GdaParameterList object
</parameter_description>
</parameter>
<parameter name="param">
<parameter_description> a #GdaParameter object, managed by @paramlist
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a #GValue, of the same type as @param, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_query_field_field_get_target">
<description>
Get the #GdaQueryTarget object @field &apos;belongs&apos; to


</description>
<parameters>
<parameter name="field">
<parameter_description> a #GdaQueryFieldField object
</parameter_description>
</parameter>
</parameters>
<return> the #GdaQueryTarget object
</return>
</function>

<function name="gda_utility_parameter_load_attributes">
<description>
WARNING: may set the &quot;source&quot; custom string property 

</description>
<parameters>
<parameter name="param">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="node">
<parameter_description> an xmlNodePtr with a &amp;lt;parameter&amp;gt; tag
</parameter_description>
</parameter>
<parameter name="sources">
<parameter_description> a list of #GdaDataModel
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_query_new">
<description>
Creates a new #GdaQuery object


</description>
<parameters>
<parameter name="dict">
<parameter_description> a #GdaDict object
</parameter_description>
</parameter>
</parameters>
<return> the new object
</return>
</function>

<function name="gda_update_values_in_table">
<description>
This is just a convenient function to update values in a table on a given column where
the row is fitting the given condition.

The SQL command is like: 
UPDATE INTO table_name SET column1 = new_value1, column2 = new_value2 ... WHERE condition_column_name = condition


</description>
<parameters>
<parameter name="cnn">
<parameter_description> an opened connection
</parameter_description>
</parameter>
<parameter name="table_name">
<parameter_description> the name of the table where the update will be done
</parameter_description>
</parameter>
<parameter name="condition_column_name">
<parameter_description> the name of the column to used in the WHERE condition clause
</parameter_description>
</parameter>
<parameter name="condition">
<parameter_description> a GValue to used to find the values to be updated; it must correspond with the
column&apos;s @GType
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> a list of string/@GValue pairs where the string is the name of the column to be 
updated followed by the new @GValue to set, finished by %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_query_undeclare_condition">
<description>
Explicitely ask @query to forget about the existence of @cond. This function is used by the
#GdaQueryCondition implementation, and should not be called directly

</description>
<parameters>
<parameter name="query">
<parameter_description> a #GdaQuery object
</parameter_description>
</parameter>
<parameter name="cond">
<parameter_description> a #GdaQueryCondition object
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_handler_type_new">
<description>
Creates a data handler for Gda types


</description>
<parameters>
</parameters>
<return> the new object
</return>
</function>

<function name="gda_row_new_from_list">
<description>
Creates a #GdaRow from a list of #GValue&apos;s.  These GValue&apos;s are
value-copied and the user are still responsible for freeing them.

See the gda_row_new() function&apos;s documentation for more information about the @model attribute


</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModel this row belongs to, or %NULL if the row is outside any data model
</parameter_description>
</parameter>
<parameter name="values">
<parameter_description> a list of #GValue&apos;s.
</parameter_description>
</parameter>
</parameters>
<return> the newly created row.
</return>
</function>

<function name="gda_data_model_set_value_at">
<description>

</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModel object.
</parameter_description>
</parameter>
<parameter name="col">
<parameter_description> column number.
</parameter_description>
</parameter>
<parameter name="row">
<parameter_description> row number.
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a #GValue, or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the value in the data model has been updated and no error occurred
</return>
</function>

<function name="gda_column_new">
<description>

</description>
<parameters>
</parameters>
<return> a newly allocated #GdaColumn object.
</return>
</function>

<function name="gda_graph_del_item">
<description>
Removes @item from @graph

</description>
<parameters>
<parameter name="graph">
<parameter_description> a #GdaGraph object
</parameter_description>
</parameter>
<parameter name="item">
<parameter_description> a #GdaGraphItem object
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_dict_constraint_non_null_get_field">
<description>

</description>
<parameters>
<parameter name="cstr">
<parameter_description> a #GdaDictConstraint object
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_data_model_dump_as_string">
<description>
Dumps a textual representation of the @model into a new string


</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModel.
</parameter_description>
</parameter>
</parameters>
<return> a new string.
</return>
</function>

<function name="gda_query_field_field_get_ref_field_name">
<description>
Get the real name of the represented field. The returned name can be in either forms:
&amp;lt;itemizedlist&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;field_name&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;table_name.field_name&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;/itemizedlist&amp;gt;


</description>
<parameters>
<parameter name="field">
<parameter_description> a #GdaQueryFieldField object
</parameter_description>
</parameter>
</parameters>
<return> represented field name (free the memory after usage)
</return>
</function>

<function name="gda_query_condition_new_copy">
<description>
This is a copy constructor


</description>
<parameters>
<parameter name="orig">
<parameter_description> a #GdaQueryCondition to copy
</parameter_description>
</parameter>
<parameter name="replacements">
<parameter_description> a hash table to store replacements, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the new object
</return>
</function>

<function name="gda_server_operation_is_valid">
<description>
Tells if all the required values in @op have been defined.

if @xml_file is not %NULL, the validity of @op is tested against that specification, 
and not againts the current @op&apos;s specification.


</description>
<parameters>
<parameter name="op">
<parameter_description> a #GdaServerOperation widget
</parameter_description>
</parameter>
<parameter name="xml_file">
<parameter_description> a XML specification file (see gda_server_operation_new())
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store an error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @op is valid
</return>
</function>

<function name="data">
<description>
Finds or creates anew GdaDictType if possible. if @created is returned as TRUE, then the
caller of this function _does_ have a reference on the returned object.


</description>
<parameters>
</parameters>
<return> a #GdaDictType, or %NULL if it was not possible to find and create one
</return>
</function>

<function name="gda_dict_function_get_dbms_id">
<description>
Get the DBMS identifier of the function


</description>
<parameters>
<parameter name="func">
<parameter_description> a #GdaDictFunction object
</parameter_description>
</parameter>
</parameters>
<return> a new string with the function&apos;s id
</return>
</function>

<function name="gda_query_field_agg_get_ref_agg">
<description>
Get the real #GdaDictAggregate object used by @agg


</description>
<parameters>
<parameter name="agg">
<parameter_description> a #GdaQueryFieldAgg object
</parameter_description>
</parameter>
</parameters>
<return> the #GdaDictAggregate object, or NULL if @agg is not active
</return>
</function>

<function name="gda_dict_field_is_null_allowed">
<description>
Test if @field can be %NULL or not


</description>
<parameters>
<parameter name="field">
<parameter_description> a #GdaDictField object
</parameter_description>
</parameter>
</parameters>
<return>
</return>
</function>

<function name="gda_data_proxy_row_has_changed">
<description>
Tells if the row number @proxy_row has changed


</description>
<parameters>
<parameter name="proxy">
<parameter_description> a #GdaDataProxy object
</parameter_description>
</parameter>
<parameter name="proxy_row">
<parameter_description> A proxy row number
</parameter_description>
</parameter>
</parameters>
<return>
</return>
</function>

<function name="gda_query_condition_node_add_child">
<description>
Adds a child to @condition; this is possible only if @condition is a node type (AND, OR, etc)


</description>
<parameters>
<parameter name="condition">
<parameter_description> a #GdaQueryCondition object
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> a #GdaQueryCondition object
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_handler_string_new_with_provider">
<description>
Creates a data handler for strings, which will use some specific methods implemented
by the @prov object (possibly also @cnc).


</description>
<parameters>
<parameter name="prov">
<parameter_description> a #GdaServerProvider object
</parameter_description>
</parameter>
<parameter name="cnc">
<parameter_description> a #GdaConnection object, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the new object
</return>
</function>

<function name="gda_column_set_position">
<description>
Sets the position of the column refer to in the containing
data model.

</description>
<parameters>
<parameter name="column">
<parameter_description> a #GdaColumn.
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> the wanted position of the column in the containing data model.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_query_expand_all_field">
<description>
Converts each visible &quot;target.*&quot; (#GdaQueryFieldAll) field into its list of fields. For example &quot;t1.*&quot; becomes &quot;t1.a, t1.b&quot;
if table t1 is composed of fields &quot;a&quot; and &quot;b&quot;. The original GdaQueryFieldAll field is not removed, but
simply rendered non visible.

The returned list must be free&apos;d by the caller using g_slist_free().


</description>
<parameters>
<parameter name="query">
<parameter_description> a #GdaQuery object
</parameter_description>
</parameter>
<parameter name="target">
<parameter_description> a #GdaQueryTarget, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a new list of the #GdaQueryField objects which have been created
</return>
</function>

<function name="gda_query_target_get_represented_entity">
<description>
Get the #GdaEntity object which is represented by @target


</description>
<parameters>
<parameter name="target">
<parameter_description> a #GdaQueryTarget object
</parameter_description>
</parameter>
</parameters>
<return> the #GdaEntity object or NULL if @target is not active
</return>
</function>

<function name="gda_data_proxy_find_row_from_values">
<description>
Find the first row where all the values in @values at the columns identified at
@cols_index match.

NOTE: the @cols_index array MUST contain a column index for each value in @values


</description>
<parameters>
<parameter name="proxy">
<parameter_description> a #GdaDataProxy object
</parameter_description>
</parameter>
<parameter name="values">
<parameter_description> a list of #GValue values
</parameter_description>
</parameter>
<parameter name="cols_index">
<parameter_description> an array of #gint containing the column number to match each value of @values
</parameter_description>
</parameter>
</parameters>
<return> proxy row number if the row has been identified, or -1 otherwise
</return>
</function>

<function name="gda_dict_table_get_parents">
<description>
Get the parent tables of the table given as argument. This is significant only
for DBMS which support tables inheritance (like PostgreSQL for example).


</description>
<parameters>
<parameter name="table">
<parameter_description> a #GdaDictTable object
</parameter_description>
</parameter>
</parameters>
<return> a constant list of #GdaDictTable objects
</return>
</function>

<function name="gda_blob_set_op">
<description>
correctly assigns @op to @blob

</description>
<parameters>
<parameter name="blob">
<parameter_description> a #GdaBlob value
</parameter_description>
</parameter>
<parameter name="op">
<parameter_description> a #GdaBlobOp object, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_server_provider_rollback_savepoint">
<description>

</description>
<parameters>
<parameter name="provider">
<parameter_description> a #GdaServerProvider object
</parameter_description>
</parameter>
<parameter name="cnc">
<parameter_description> a #GdaConnection object
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> name of the savepoint to rollback to
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_delimiter_display">
<description>

</description>
<parameters>
<parameter name="statement">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_graph_get_items">
<description>
Get a list of #GdaGraphItem objects which are items of @graph


</description>
<parameters>
<parameter name="graph">
<parameter_description> a #GdaGraph object
</parameter_description>
</parameter>
</parameters>
<return> a new list of #GdaGraphItem objects
</return>
</function>

<function name="gda_data_model_query_get_parameter_list">
<description>
If some parameters are required to execute the SELECT query used in the @model data model, then
Returns: a #GdaParameterList object, or %NULL

</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModelQuery data model
</parameter_description>
</parameter>
</parameters>
<return> a #GdaParameterList object, or %NULL
</return>
</function>

<function name="gda_data_model_import_from_model">
<description>
Copy the contents of the @from data model to the @to data model. The copy stops as soon as an error
orrurs.

The @cols_trans is a hash table for which keys are @to columns numbers and the values are
the corresponding column numbers in the @from data model. To set the values of a column in @to to NULL,
create an entry in the hash table with a negative value.


</description>
<parameters>
<parameter name="to">
<parameter_description> the destination #GdaDataModel
</parameter_description>
</parameter>
<parameter name="from">
<parameter_description> the source #GdaDataModel
</parameter_description>
</parameter>
<parameter name="overwrite">
<parameter_description> TRUE if @to is completely overwritten by @from&apos;s data, and FALSE if @from&apos;s data is appended to @to
</parameter_description>
</parameter>
<parameter name="cols_trans">
<parameter_description> a #GHashTable for columns translating, or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred.
</return>
</function>

<function name="gda_column_set_name">
<description>
Sets the name of @column to @name.

</description>
<parameters>
<parameter name="column">
<parameter_description> a #GdaColumn.
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the new name of @column.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_delimiter_to_string">
<description>
Converts a statement to a string

</description>
<parameters>
<parameter name="statement">
<parameter_description> a #GdaDelimiterStatement
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_dict_constraint_equal">
<description>
Compares two #GdaDictConstraint objects to see if they are equal, without taking into account the
name of the constraints or weather they are user or system defined


</description>
<parameters>
<parameter name="cstr1">
<parameter_description> the first #GdaDictConstraint to compare
</parameter_description>
</parameter>
<parameter name="cstr2">
<parameter_description> the second #GdaDictConstraint to compare
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the two constraints are equal and FALSE otherwise
</return>
</function>

<function name="gda_connection_clear_events_list">
<description>
This function lets you clear the list of #GdaConnectionEvent&apos;s of the
given connection. 

</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection object.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_entity_get_field_by_index">
<description>


</description>
<parameters>
<parameter name="iface">
<parameter_description> an object implementing the #GdaEntity interface
</parameter_description>
</parameter>
<parameter name="index">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return> the requested GdaEntityField or NULL if the index is out of bounds
</return>
</function>

<function name="gda_dict_database_get_tables">
<description>
Get a list of all the tables within @db


</description>
<parameters>
<parameter name="db">
<parameter_description> a #GdaDictDatabase object
</parameter_description>
</parameter>
</parameters>
<return> a new list of all the #GdaDictTable objects
</return>
</function>

<function name="gda_config_get_data_source_list">
<description>
Returns: a GList of #GdaDataSourceInfo structures.

</description>
<parameters>
</parameters>
<return> a GList of #GdaDataSourceInfo structures.
</return>
</function>

<function name="gda_query_get_field_by_ref_field">
<description>
Finds the first #GdaQueryField object in @query which represents @ref_field.
The returned object will be a #GdaQueryFieldField object which represents @ref_field.

If @target is specified, then the returned field will be linked to that #GdaQueryTarget object.


</description>
<parameters>
<parameter name="query">
<parameter_description> a #GdaQuery object
</parameter_description>
</parameter>
<parameter name="target">
<parameter_description> a #GdaQueryTarget, or %NULL
</parameter_description>
</parameter>
<parameter name="ref_field">
<parameter_description> a #GdaEntityField object
</parameter_description>
</parameter>
<parameter name="field_state">
<parameter_description> tells about the status of the requested field, see #GdaQueryFieldState
</parameter_description>
</parameter>
</parameters>
<return> a #GdaQueryFieldField object or %NULL
</return>
</function>

<function name="gda_connection_event_list_copy">
<description>
Creates a new list which contains the same events as @events and
adds a reference for each event in the list.

You must free the list using #gda_connection_event_list_free.

</description>
<parameters>
<parameter name="events">
<parameter_description> a GList holding event objects.
</parameter_description>
</parameter>
</parameters>
<return> a list of events.
</return>
</function>

<function name="gda_data_proxy_alter_value_attributes">
<description>
Alters the attributes of the value stored at (proxy_row, col) in @proxy. the @alter_flags
can only contain the GDA_VALUE_ATTR_IS_NULL, GDA_VALUE_ATTR_IS_DEFAULT and GDA_VALUE_ATTR_IS_UNCHANGED
flags (other flags are ignored).

</description>
<parameters>
<parameter name="proxy">
<parameter_description> a #GdaDataProxy object
</parameter_description>
</parameter>
<parameter name="proxy_row">
<parameter_description> A proxy row number
</parameter_description>
</parameter>
<parameter name="col">
<parameter_description> a valid column number
</parameter_description>
</parameter>
<parameter name="alter_flags">
<parameter_description> flags to alter the attributes
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_dict_type_get_synonyms">
<description>
Get a list of @dt&apos;s synonyms


</description>
<parameters>
<parameter name="dt">
<parameter_description> a #GdaDictType object
</parameter_description>
</parameter>
</parameters>
<return> a list of strings which must not be modified
</return>
</function>

<function name="gda_query_get_sub_queries">
<description>
Get a list of all the sub-queries managed by @query


</description>
<parameters>
<parameter name="query">
<parameter_description> a #GdaQuery object
</parameter_description>
</parameter>
</parameters>
<return> a new list of the sub-queries
</return>
</function>

<function name="gda_query_condition_node_del_child">
<description>
Removes a child from @condition; this is possible only if @condition is a node type (AND, OR, etc)

</description>
<parameters>
<parameter name="condition">
<parameter_description> a #GdaQueryCondition object
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> a #GdaQueryCondition object
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_object_ref_get_ref_object">
<description>
Get the referenced object by @ref


</description>
<parameters>
<parameter name="ref">
<parameter_description> a #GdaObjectRef object
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the object, or NULL if the reference is not active
</return>
</function>

<function name="gda_query_field_func_get_args">
<description>
Get a list of the other #GdaQueryField objects which are arguments of @func. If some
of them are missing, then a %NULL is inserted where it should have been.


</description>
<parameters>
<parameter name="func">
<parameter_description> a #GdaQueryFieldFunc object
</parameter_description>
</parameter>
</parameters>
<return> a new list of arguments
</return>
</function>

<function name="gda_command_free">
<description>
Frees the resources allocated by #gda_command_new.

</description>
<parameters>
<parameter name="cmd">
<parameter_description> a #GdaCommand.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_column_get_references">
<description>
Reference is returned in tablename.fieldname format. Do not free
this variable, it is used internally within GdaColumn.


</description>
<parameters>
<parameter name="column">
<parameter_description> a #GdaColumn.
</parameter_description>
</parameter>
</parameters>
<return> @column&apos;s references.
</return>
</function>

<function name="gda_dict_field_is_fkey_part">
<description>
Test if @field is part of a foreign key constraint


</description>
<parameters>
<parameter name="field">
<parameter_description> a #GdaDictField object
</parameter_description>
</parameter>
</parameters>
<return>
</return>
</function>

<function name="gda_config_add_listener">
<description>
Installs a configuration listener, which is a callback function
which will be called every time a change occurs on a given
configuration entry.


</description>
<parameters>
<parameter name="path">
<parameter_description> configuration path to listen to.
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> callback function.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> data to be passed to the callback function.
</parameter_description>
</parameter>
</parameters>
<return> the ID of the listener, which you will need for
calling #gda_config_remove_listener. If an error occurs,
0 is returned.
</return>
</function>

<function name="gda_sql_transaction_parse">
<description>
Generate in memory a structure of the @sqlquery in an easy
to view way.  You can also modify the returned structure and
regenerate the sql query using sql_stringify().  The structure
contains information on what type of sql statement it is, what
tables its getting from, what fields are selected, the where clause,
joins etc.


</description>
<parameters>
<parameter name="sqlquery">
<parameter_description> A SQL query string. ie SELECT * FROM FOO
</parameter_description>
</parameter>
</parameters>
<return> A generated sql_statement or %NULL on error.
</return>
</function>

<function name="gda_query_get_field_by_sql_naming_fields">
<description>

</description>
<parameters>
<parameter name="query">
<parameter_description> a #GdaQuery object
</parameter_description>
</parameter>
<parameter name="sql_name">
<parameter_description> the SQL naming for the requested field
</parameter_description>
</parameter>
<parameter name="fields_list">
<parameter_description> an explicit list of fields to search into
</parameter_description>
</parameter>
</parameters>
<return>
</return>
</function>

<function name="gda_query_field_value_set_is_parameter">
<description>
Sets wether @field can be considered as a parameter

</description>
<parameters>
<parameter name="field">
<parameter_description> a #GdaQueryFieldValue object
</parameter_description>
</parameter>
<parameter name="is_param">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_query_is_modify_query">
<description>
Tells if @query is a modification query (a simple UPDATE, DELETE, INSERT).; pure SQL
queries are not handled and will always return FALSE.


</description>
<parameters>
<parameter name="query">
<parameter_description> a # GdaQuery object
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @query is a modification query
</return>
</function>

<function name="gda_log_message">
<description>
Logs the given message in the GDA log file.

</description>
<parameters>
<parameter name="format">
<parameter_description> format string (see the printf(3) documentation).
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> arguments to insert in the message.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_query_is_delete_query">
<description>
Tells if @query is a DELETE query.


</description>
<parameters>
<parameter name="query">
<parameter_description> a # GdaQuery object
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @query is an delete query
</return>
</function>

<function name="gda_query_join_set_condition">
<description>
Sets @cond to be @join&apos;s condition. This is possible only if @cond uses
query fields which are either of type GdaQueryFieldField and reference one of the two
targets which @join uses, or any other query field type.


</description>
<parameters>
<parameter name="join">
<parameter_description> a #GdaQueryJoin object
</parameter_description>
</parameter>
<parameter name="cond">
<parameter_description> a  #GdaQueryCondition object, or %NULL to remove the join&apos;s condition
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_handler_time_get_no_locale_str_from_value">
<description>
Retunrs: a new string representing @value without taking the current
locele into account

</description>
<parameters>
<parameter name="hdl">
<parameter_description> a #GdaHandlerTime object
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a GValue value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_query_add_sub_query">
<description>
Add @sub_query to @query. Sub queries are managed by their parent query, and as such they
are destroyed when their parent query is destroyed.

</description>
<parameters>
<parameter name="query">
<parameter_description> a #GdaQuery object
</parameter_description>
</parameter>
<parameter name="sub_query">
<parameter_description> a #GdaQuery object
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_connection_event_set_source">
<description>
Sets @event&apos;s @source.

</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdaConnectionEvent.
</parameter_description>
</parameter>
<parameter name="source">
<parameter_description> a source.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_query_join_get_query">
<description>
Get the #GdaQuery to which @join is attached to


</description>
<parameters>
<parameter name="join">
<parameter_description> a #GdaQueryJoin object
</parameter_description>
</parameter>
</parameters>
<return> the #GdaQuery
</return>
</function>

<function name="gda_server_provider_create_operation">
<description>
Creates a new #GdaServerOperation object which can be modified in order to perform the @type type of
action. The @options can contain:
&amp;lt;itemizedlist&amp;gt;
&amp;lt;listitem&amp;gt;parameters which ID is a path in the resulting GdaServerOperation object, to initialize some value&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;parameters which may change the contents of the GdaServerOperation, see &amp;lt;link linkend=&quot;gda-server-op-information&quot;&amp;gt;this section&amp;lt;/link&amp;gt; for more information&amp;lt;/listitem&amp;gt;
&amp;lt;/itemizedlist&amp;gt;


</description>
<parameters>
<parameter name="provider">
<parameter_description> a #GdaServerProvider object
</parameter_description>
</parameter>
<parameter name="cnc">
<parameter_description> a #GdaConnection object which will be used to perform an action
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> the type of operation requested
</parameter_description>
</parameter>
<parameter name="options">
<parameter_description> an optional list of parameters
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store an error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a new #GdaServerOperation object, or %NULL in the provider does not support the @type type
of operation or if an error occurred
</return>
</function>

<function name="gda_dict_get_object_by_name">
<description>
Tries to find an object from its name, among the objects managed by @dict of type @type.


</description>
<parameters>
<parameter name="dict">
<parameter_description> a #GdaDict object
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> a #Gtype type of object
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> 
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the requested object, or %NULL if the object was not found
</return>
</function>

<function name="gda_data_handler_get_str_from_value">
<description>
Creates a new string which is a &quot;user friendly&quot; representation of the given value
(in the users&apos;s locale, specially for the dates). If the value is 
NULL or is of type GDA_TYPE_NULL, the returned string is a copy of &quot;&quot; (empty string).


</description>
<parameters>
<parameter name="dh">
<parameter_description> an object which implements the #GdaDataHandler interface
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the value to be converted to a string
</parameter_description>
</parameter>
</parameters>
<return> the new string.
</return>
</function>

<function name="gda_connection_set_password">
<description>
Sets the user password for the connection to the server. If the connection is already opened,
then no action is performed at all and FALSE is returned.


</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection object
</parameter_description>
</parameter>
<parameter name="password">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return> TRUE on success
</return>
</function>

<function name="gda_column_set_scale">
<description>
Sets the scale of @column to @scale.

</description>
<parameters>
<parameter name="column">
<parameter_description> a #GdaColumn.
</parameter_description>
</parameter>
<parameter name="scale">
<parameter_description> number of decimals.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_connection_commit_transaction">
<description>
Commits the given transaction to the backend database. You need to call
gda_connection_begin_transaction() first.


</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection object.
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the transation to commit
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the transaction was finished successfully,
%FALSE otherwise.
</return>
</function>

<function name="gda_dict_constraint_fkey_set_fields">
<description>
Sets the field pairs which make the foreign key represented by @cstr. All the field pairs
must list a field which belong to the same #GdaDictTable to which the constraint is attached
and a field which belongs to a #GdaDictTable which is different from the one just mentionned and which
is within the same database.
The pairs are of type #GdaDictConstraintFkeyPair.

</description>
<parameters>
<parameter name="cstr">
<parameter_description> a #GdaDictConstraint object
</parameter_description>
</parameter>
<parameter name="pairs">
<parameter_description> a list of #GdaDictField objects
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_query_condition_get_child_by_xml_id">
<description>
Get a pointer to a #GdaQueryCondition child from its XML Id


</description>
<parameters>
<parameter name="condition">
<parameter_description> a #GdaQueryCondition object
</parameter_description>
</parameter>
<parameter name="xml_id">
<parameter_description> the XML Id of the requested #GdaQueryCondition child
</parameter_description>
</parameter>
</parameters>
<return> the #GdaQueryCondition object, or %NULL if not found
</return>
</function>

<function name="gda_value_get_geometric_point">
<description>

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue whose value we want to get.
</parameter_description>
</parameter>
</parameters>
<return> the value stored in @value.
</return>
</function>

<function name="gda_client_notify_error_event">
<description>
Notifies the given #GdaClient of the #GDA_CLIENT_EVENT_ERROR event.

</description>
<parameters>
<parameter name="client">
<parameter_description> a #GdaClient object.
</parameter_description>
</parameter>
<parameter name="cnc">
<parameter_description> a #GdaConnection object.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> the error to be notified.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_dict_get_object_type_registration">
<description>
Get a pointer to the #GdaDictRegisterStruct structure for the @type type of
objects.


</description>
<parameters>
<parameter name="dict">
<parameter_description> a #GdaDict object
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> e #Gtype
</parameter_description>
</parameter>
</parameters>
<return> the #GdaDictRegisterStruct pointer, or %NULL if @type is not registered
</return>
</function>

<function name="gda_query_field_value_new">
<description>
Creates a new GdaQueryFieldValue object which represents a value or a parameter.


</description>
<parameters>
<parameter name="query">
<parameter_description> a #GdaQuery in which the new object will be
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> the GDA type for the value
</parameter_description>
</parameter>
</parameters>
<return> the new object
</return>
</function>

<function name="gda_data_model_import_new_mem">
<description>
Creates a new #GdaDataModel object which contains the data stored in the @data string. 

Important note: the @data string is not copied for memory efficiency reasons and should not
therefore be altered in any way as long as the returned data model exists.


</description>
<parameters>
<parameter name="data">
<parameter_description> a string containng the data to import
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the newly created #GdaDataModel.
</return>
</function>

<function name="gda_server_provider_delete_savepoint">
<description>

</description>
<parameters>
<parameter name="provider">
<parameter_description> a #GdaServerProvider object
</parameter_description>
</parameter>
<parameter name="cnc">
<parameter_description> a #GdaConnection object
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> name of the savepoint to delete
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_referer_get_ref_objects">
<description>
Get the list of objects which are referenced by @iface. The returned list is a
new list. If @iface is not active, then the returned list is incomplete.


</description>
<parameters>
<parameter name="iface">
<parameter_description> an object which implements the #GdaReferer interface
</parameter_description>
</parameter>
</parameters>
<return> a new list of referenced objects
</return>
</function>

<function name="gda_data_model_thaw">
<description>
Re-enables notifications of changes on the given data model.

</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModel object.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_data_model_iter_invalidate_contents">
<description>
Declare all the parameters in @iter invalid, without modifying the
#GdaDataModel @iter is for or changing the row it represents

</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GdaDataModelIter object
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_query_condition_get_main_conditions">
<description>
Makes a list of all the conditions which
are always verified by @condition when it returns TRUE when evaluated.
Basically the returned list lists the atomic conditions which are AND&apos;ed
together to form the complex @condition.

Examples: if @condition is:
&amp;lt;itemizedlist&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt; &quot;A and B&quot; then the list will contains {A, B}&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt; &quot;A and (B or C)&quot; it will contain {A, B or C}&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt; &quot;A and (B and not C)&quot;, it will contain {A, B, not C}&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;/itemizedlist&amp;gt;


</description>
<parameters>
<parameter name="condition">
<parameter_description> a #GdaQueryCondition object
</parameter_description>
</parameter>
</parameters>
<return> a new list of #GdaQueryCondition objects
</return>
</function>

<function name="gda_command_set_command_type">
<description>
Sets the command type of @cmd.

</description>
<parameters>
<parameter name="cmd">
<parameter_description> a #GdaCommand
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> the command type.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_referer_deactivate">
<description>
Deactivates the object. This is the opposite to function gda_referer_activate().
If the object is already non active, then nothing happens.

</description>
<parameters>
<parameter name="iface">
<parameter_description> an object which implements the #GdaReferer interface
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_data_model_filter_sql_new">
<description>
Creates a new #GdaDataModelFilterSQL object, which allows programs to filter
#GdaDataModel&apos;s based on a given SQL SELECT command.

A #GdaDataModelFilterSQL is just another #GdaDataModel-based class, so it
can be used in the same way any other data model class is.


</description>
<parameters>
</parameters>
<return> the newly created object.
</return>
</function>

<function name="gda_query_get_all_fields">
<description>
Fetch a list of all the fields of @query: the ones which are visible, and
the ones which are not visible and are not internal query fields.


</description>
<parameters>
<parameter name="query">
<parameter_description> a #GdaQuery object
</parameter_description>
</parameter>
</parameters>
<return> a new list of fields
</return>
</function>

<function name="gda_query_join_set_condition_from_fkcons">
<description>
Creates a #GdaQueryCondition for @join using the foreign key constraints
present in the database if the two targets @join joins are database tables
(#GdaDictTable objects).

If there is more than one FK constraint between the database tables, then
no join is created, and the call returns FALSE.


</description>
<parameters>
<parameter name="join">
<parameter_description> a #GdaQueryJoin object
</parameter_description>
</parameter>
</parameters>
<return> TRUE if suitable foreign keys were found and a join condition
has been created
</return>
</function>

<function name="gda_data_proxy_set_sample_size">
<description>
Sets the size of each chunck of fata to display: the maximum number of rows which
can be displayed at a time. The default value is arbitrary 300 as it is big enough to
be able to display quite a lot of data, but small enough to avoid too much data
displayed at the same time.

Note: the rows which have been added but not yet commited will always be displayed
regardless of the current chunck of data, and the modified rows which are not visible
when the displayed chunck of data changes are still held as modified rows.

To remove the chuncking of the data to display, simply pass @sample_size the 0 value.

</description>
<parameters>
<parameter name="proxy">
<parameter_description> a #GdaDataProxy object
</parameter_description>
</parameter>
<parameter name="sample_size">
<parameter_description> the requested size of a chunck, or 0
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_dict_constraint_fkey_set_actions">
<description>
Sets the actions undertaken by the DBMS when some actions occur on the referenced data

</description>
<parameters>
<parameter name="cstr">
<parameter_description> a #GdaDictConstraint object
</parameter_description>
</parameter>
<parameter name="on_update">
<parameter_description> the action undertaken when an UPDATE occurs
</parameter_description>
</parameter>
<parameter name="on_delete">
<parameter_description> the action undertaken when a DELETE occurs
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_query_field_value_set_value">
<description>
Sets the value of @field, or removes it (if @val is %NULL)

</description>
<parameters>
<parameter name="field">
<parameter_description> a #GdaQueryFieldValue object
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> the value to be set, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_dict_function_set_ret_dict_type">
<description>
Set the return type of a function

</description>
<parameters>
<parameter name="func">
<parameter_description> a #GdaDictFunction object
</parameter_description>
</parameter>
<parameter name="dt">
<parameter_description> a #GdaDictType object or #NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_query_field_all_new">
<description>
Creates a new #GdaQueryFieldAll object which represents all the fields of the entity represented
by a target.


</description>
<parameters>
<parameter name="query">
<parameter_description> a #GdaQuery in which the new object will be
</parameter_description>
</parameter>
<parameter name="target">
<parameter_description> the target&apos;s name or alias
</parameter_description>
</parameter>
</parameters>
<return> the new object
</return>
</function>

<function name="gda_config_remove_listener">
<description>
Removes a configuration listener previously installed with
#gda_config_add_listener, given its ID.

</description>
<parameters>
<parameter name="id">
<parameter_description> the ID of the listener to remove.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_delimiter_free_list">
<description>
Destroys all the #GdaDelimiterStatement structures in @statements, and
frees the @statements list

</description>
<parameters>
<parameter name="statements">
<parameter_description> a list of #GdaDelimiterStatement structures
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_query_join_swap_targets">
<description>
Changes the relative roles of the two #GdaQueryTarget objects. It does not
change the join condition itself, and is usefull only for the internals
of the #GdaQuery object

</description>
<parameters>
<parameter name="join">
<parameter_description> a #GdaQueryJoin object
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_column_get_title">
<description>

</description>
<parameters>
<parameter name="column">
<parameter_description> a #GdaColumn.
</parameter_description>
</parameter>
</parameters>
<return> the column&apos;s title
</return>
</function>

<function name="gda_handler_time_new">
<description>
Creates a data handler for time values


</description>
<parameters>
</parameters>
<return> the new object
</return>
</function>

<function name="gda_server_provider_blob_list_for_delete">
<description>
Create a SELECT query from a DELETE query which lists all the BLOB fields in the
query which will be deleted. This function is used by GdaServerProvider implementations
when dealing with BLOB deletions.

After execution, @out_select contains a new GdaQuery, or %NULL if the delete query does not have any
BLOB to delete.

For example DELETE FROM blobs WHERE id= ##/ *name:&apos;id&apos; type:gint* /
will create:
SELECT t1.data FROM blobs AS t1 WHERE id= ##/ *name:&apos;id&apos; type:gint* /


</description>
<parameters>
</parameters>
<return> TRUE if no error occurred.
</return>
</function>

<function name="gda_row_get_length">
<description>

</description>
<parameters>
<parameter name="row">
<parameter_description> a #GdaRow.
</parameter_description>
</parameter>
</parameters>
<return> the number of columns that the @row has.
</return>
</function>

<function name="gda_dict_function_accepts_arg_dict_types">
<description>
Test if the proposed list of arguments (@arg_types) would be accepted by
the @func function.

The non acceptance can be beause of data type incompatibilities or a wrong number
of data types.


</description>
<parameters>
<parameter name="func">
<parameter_description> a #GdaDictFunction object
</parameter_description>
</parameter>
<parameter name="arg_types">
<parameter_description> a list of #GdaDictType objects or #NULL values, ordered
</parameter_description>
</parameter>
</parameters>
<return> TRUE if accepted
</return>
</function>

<function name="gda_parameter_new_boolean">
<description>
Creates a new #GdaParameter object of type G_TYPE_BOOLEAN


</description>
<parameters>
<parameter name="name">
<parameter_description> the name of the parameter to create
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the value to give to the new parameter
</parameter_description>
</parameter>
</parameters>
<return> a new #GdaParameter object
</return>
</function>

<function name="gda_log_disable">
<description>
Disables GDA logs.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gda_value_set_null">
<description>
Sets the type of @value to #GDA_TYPE_NULL.

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue that will store a value of type #GDA_TYPE_NULL.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_query_execute">
<description>
Executes @query and returns #GdaDataModel if @query&apos;s execution yields to a data set, or a
#GdaParameterList object otherwise, or %NULL if an error occurred. You can test the return value
using GObject&apos;s introscpection features such as GDA_IS_DATA_MODEL() or GDA_IS_PARAMETER_LIST().

For more information about the returned value, see gda_server_provider_execute_command().


</description>
<parameters>
<parameter name="query">
<parameter_description> the #GdaQuery to execute
</parameter_description>
</parameter>
<parameter name="params">
<parameter_description> a #GdaParameterList object obtained using gda_query_get_parameter_list()
</parameter_description>
</parameter>
<parameter name="iter_model_only_requested">
<parameter_description> set to TRUE if the returned data model will only be accessed using an iterator
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GdaDataModel, a #GdaParameterList or %NULL.
</return>
</function>

<function name="gda_parameter_list_new">
<description>
Creates a new #GdaParameterList object, and populates it with the list given as argument.
The list can then be freed as it gets copied. All the parameters in @params are referenced counted
and modified, so they should not be used anymore afterwards, and the @params list gets copied
(so it should be freed by the caller).


</description>
<parameters>
<parameter name="params">
<parameter_description> a list of #GdaParameter objects
</parameter_description>
</parameter>
</parameters>
<return> a new #GdaParameterList object
</return>
</function>

<function name="gda_graphs_get_with_type">
<description>
Get a list of the graphs managed by @dict, which are of the
requested type.


</description>
<parameters>
<parameter name="dict">
<parameter_description> a #GdaDict object
</parameter_description>
</parameter>
<parameter name="type_of_graphs">
<parameter_description> the requested type of graphs
</parameter_description>
</parameter>
</parameters>
<return> a new list of #GdaGraph objects
</return>
</function>

<function name="gda_value_new_from_xml">
<description>
Creates a GValue from a XML representation of it. That XML
node corresponds to the following string representation:
&amp;lt;value type=&quot;gdatype&quot;&amp;gt;value&amp;lt;/value&amp;gt;


</description>
<parameters>
<parameter name="node">
<parameter_description> a XML node representing the value.
</parameter_description>
</parameter>
</parameters>
<return>  the newly created #GValue.
</return>
</function>

<function name="gda_data_model_append_values">
<description>
Appends a row to the given data model. If any value in @values is actually %NULL, then 
it is considered as a default value.


</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModel object.
</parameter_description>
</parameter>
<parameter name="values">
<parameter_description> #GList of #GValue* representing the row to add.  The
length must match model&apos;s column count.  These #GValue
are value-copied (the user is still responsible for freeing them).
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the number of the added row, or -1 if an error occurred
</return>
</function>

<function name="gda_column_get_defined_size">
<description>

</description>
<parameters>
<parameter name="column">
<parameter_description> a @GdaColumn.
</parameter_description>
</parameter>
</parameters>
<return> the defined size of @column.
</return>
</function>

<function name="gda_column_index_get_sorting">
<description>

</description>
<parameters>
<parameter name="dmcia">
<parameter_description> a @GdaColumnIndex.
</parameter_description>
</parameter>
</parameters>
<return> the sorting of @dmcia.
</return>
</function>

<function name="gda_value_set_ushort">
<description>
Stores @val into @value.

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue that will store @val.
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> value to be stored in @value.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_graph_query_sync_targets">
<description>
Synchronises the graph items with the targets of the query @graph represents

</description>
<parameters>
<parameter name="graph">
<parameter_description> a #GdaGraphQuery object
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_client_prepare_drop_database">
<description>
Creates a new #GdaServerOperation object which contains the specifications required
to drop a database. Once these specifications provided, use 
gda_client_perform_drop_database() to perform the database creation.

If @db_name is left %NULL, then the name of the database to drop will have to be set in the
returned #GdaServerOperation using gda_server_operation_set_value_at().


</description>
<parameters>
<parameter name="client">
<parameter_description> a #GdaClient object.
</parameter_description>
</parameter>
<parameter name="db_name">
<parameter_description> the name of the database to drop, or %NULL
</parameter_description>
</parameter>
<parameter name="provider">
<parameter_description> a provider
</parameter_description>
</parameter>
</parameters>
<return> new #GdaServerOperation object, or %NULL if the provider does not support database
destruction
</return>
</function>

<function name="gda_query_field_get_alias">
<description>
Get @qfield&apos;s alias


</description>
<parameters>
<parameter name="qfield">
<parameter_description> a #GdaQueryField object
</parameter_description>
</parameter>
</parameters>
<return> the alias
</return>
</function>

<function name="gda_connection_get_password">
<description>
Gets the password used to open this connection.


</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection object.
</parameter_description>
</parameter>
</parameters>
<return> the password.
</return>
</function>

<function name="gda_value_set_from_string">
<description>
Stores the value data from its string representation as @type.


</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue that will store @val.
</parameter_description>
</parameter>
<parameter name="as_string">
<parameter_description> the stringified representation of the value.
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> the type of the value
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the value has been converted to @type from
its string representation; it not means that the value is converted 
successfully, just that the transformation is avairable. %FALSE otherwise.
</return>
</function>

<function name="gda_query_is_well_formed">
<description>
Tells if @query is well formed, and if @context is not %NULL, also tells if rendering to
SQL can be done without error


</description>
<parameters>
<parameter name="query">
<parameter_description> a #GdaQuery object
</parameter_description>
</parameter>
<parameter name="context">
<parameter_description> a #GdaParameterList obtained using gda_query_get_parameter_list(), or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> FALSE if @query is not well formed
</return>
</function>

<function name="gda_entity_add_field_before">
<description>
Add @field to @iface&apos;s fields, before @field_before if it is not %NULL, 
or at the end if @field_before is %NULL.

</description>
<parameters>
<parameter name="iface">
<parameter_description> an object implementing the #GdaEntity interface
</parameter_description>
</parameter>
<parameter name="field">
<parameter_description> an object implementing the #GdaEntityField interface to add
</parameter_description>
</parameter>
<parameter name="field_before">
<parameter_description> an object implementing the #GdaEntityField interface before which @field will be added, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_parameter_get_value_str">
<description>
Get a string representation of the value stored in @param. Calling
gda_parameter_set_value_str () with this value will restore @param&apos;s current
state.


</description>
<parameters>
<parameter name="param">
<parameter_description> a #GdaParameter object
</parameter_description>
</parameter>
</parameters>
<return> a new string, or %NULL if @param&apos;s value is NULL
</return>
</function>

<function name="gda_log_is_enabled">
<description>

</description>
<parameters>
</parameters>
<return> whether GDA logs are enabled (%TRUE or %FALSE).
</return>
</function>

<function name="gda_data_model_iter_get_column_for_param">
<description>
Get the column number in the #GdaDataModel for which @iter is an iterator as
represented by the @param parameter


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GdaDataModelIter object
</parameter_description>
</parameter>
<parameter name="param">
<parameter_description> a #GdaParameter object, listed in @iter
</parameter_description>
</parameter>
</parameters>
<return> the column number, or @param is not valid
</return>
</function>

<function name="gda_column_index_get_defined_size">
<description>

</description>
<parameters>
<parameter name="dmcia">
<parameter_description> a @GdaColumnIndex.
</parameter_description>
</parameter>
</parameters>
<return> the defined size of @dmcia.
</return>
</function>

<function name="gda_renderer_render_as_sql">
<description>
Build a SQL statement representing the object, in the specified context.

If @context is %NULL, then no error related to missing parameters (which should be in the
context) is returned, and missing values are replaced by &apos;human readable&apos; SQL.

If @out_params_used is not %NULL, then pointers to the #GdaParameter objects used to actually
render the SQL statement are appended to the list (in case a parameter object is used several times,
it is only once listed in the resulting list).


</description>
<parameters>
<parameter name="iface">
<parameter_description> an object which implements the #GdaRenderer interface
</parameter_description>
</parameter>
<parameter name="context">
<parameter_description> a #GdaParameterList containing values for @iface&apos;s parameters, or %NULL
</parameter_description>
</parameter>
<parameter name="out_params_used">
<parameter_description> a place to append #GdaParameter which have been used during the rendering process, or %NULL
</parameter_description>
</parameter>
<parameter name="options">
<parameter_description> OR&apos;ed flags from #GdaRendererOptions to give some rendering options
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the new SQL statement (new string), or %NULL in case of error
</return>
</function>

<function name="gda_parameter_get_value">
<description>
Get the value held into the parameter


</description>
<parameters>
<parameter name="param">
<parameter_description> a #GdaParameter object
</parameter_description>
</parameter>
</parameters>
<return> the value (a NULL value returns a GDA_TYPE_NULL GValue)
</return>
</function>

<function name="gda_connection_supports_feature">
<description>
Asks the underlying provider for if a specific feature is supported.


</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection object.
</parameter_description>
</parameter>
<parameter name="feature">
<parameter_description> feature to ask for.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the provider supports it, %FALSE if not.
</return>
</function>

<function name="gda_dict_aggregate_set_arg_dict_type">
<description>
Set the argument type of a aggregate

</description>
<parameters>
<parameter name="agg">
<parameter_description> a #GdaDictAggregate object
</parameter_description>
</parameter>
<parameter name="dt">
<parameter_description> a #GdaDictType objects or #NULL value to represent the data type
of the aggregate&apos;s unique argument .
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_insert_row_into_table">
<description>
This is just a convenient function to insert a row with the values given as argument.
The values must correspond with the GType of the column to set, otherwise throw to 
an error. Finish the list with NULL.

The arguments must be pairs of column name followed by his value.


</description>
<parameters>
<parameter name="cnn">
<parameter_description> an opened connection
</parameter_description>
</parameter>
<parameter name="table_name">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> a list of string/@GValue pairs where the string is the name of the column
followed by its @GValue to set in the insert operation, finished by %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred, and FALSE and set error otherwise
</return>
</function>

<function name="gda_query_set_sql_text">
<description>
Defines @query&apos;s contents from an SQL statement. The SQL text is parsed and the internal query structured
is built from that; the query type is also set. If the SQL text cannot be parsed, then the internal structure
of the query is emptied and the query type is set to GDA_QUERY_TYPE_NON_PARSED_SQL.

To be parsed successfully, the expected SQL must respect the SQL standard; some extensions have been
added to be able to define variables within the SQL statement. See the introduction to the #GdaQuery
for more information.

</description>
<parameters>
<parameter name="query">
<parameter_description> a # GdaQuery object
</parameter_description>
</parameter>
<parameter name="sql">
<parameter_description> the SQL statement
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store parsing error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_object_set_name">
<description>
Sets the name of the GdaObject object. If the name is changed, then the 
&quot;name_changed&quot; signal is emitted.


</description>
<parameters>
<parameter name="gdaobj">
<parameter_description> a #GdaObject object
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_connection_get_server_version">
<description>
Gets the version string of the underlying database server.


</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection object.
</parameter_description>
</parameter>
</parameters>
<return> the server version string.
</return>
</function>

<function name="gda_data_model_index_get_references">
<description>

</description>
<parameters>
<parameter name="dmi">
<parameter_description> a #GdaDataModelIndex.
</parameter_description>
</parameter>
</parameters>
<return> @dmi&apos;s references.
</return>
</function>

<function name="gda_handler_boolean_new">
<description>
Creates a data handler for booleans


</description>
<parameters>
</parameters>
<return> the new object
</return>
</function>

<function name="gda_object_ref_new">
<description>
Creates a new GdaObjectRef object. This #GdaObjectRef object does itself increase the
reference count of the referenced object, so if all the reference count holders call g_object_unref()
on there referenced object, then that object will not be destroyed because this #GdaObjectRef still
has a reference on it. Use gda_object_ref_new_no_ref_count() if you don&apos;t want to increase the reference
count of the referenced object.


</description>
<parameters>
<parameter name="dict">
<parameter_description> a #GdaDict object
</parameter_description>
</parameter>
</parameters>
<return> the new object
</return>
</function>

<function name="gda_data_model_create_iter">
<description>
Creates a new iterator object #GdaDataModelIter object which can be used to iterate through
rows in @model.

The row the returned #GdaDataModelIter represents is undefined. For models which can be accessed 
randomly the correspoding row can be set using gda_data_model_move_iter_at_row(), 
and for models which are accessible sequentially only then the first row will be
fetched using gda_data_model_move_iter_next().


</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModel object.
</parameter_description>
</parameter>
</parameters>
<return> a new #GdaDataModelIter object, or %NULL if an error occurred
</return>
</function>

<function name="gda_value_get_short">
<description>

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue whose value we want to get.
</parameter_description>
</parameter>
</parameters>
<return> the value stored in @value.
</return>
</function>

<function name="gda_data_model_array_new_with_g_types">
<description>
Creates a new #GdaDataModel object with the column types as
specified.


</description>
<parameters>
<parameter name="cols">
<parameter_description> number of columns for rows in this data model.
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> types of the columns of the model to create as #GType
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the newly created #GdaDataModel.
</return>
</function>

<function name="gda_query_get_target_pkfields">
<description>
Makes a list of the #GdaQueryField objects which represent primary key fields of
the entity represented by @target.

If the entity represented by @target does not have any primary key, or if the 
primary key&apos;s fields are not present in @query, then the returned value is %NULL.


</description>
<parameters>
<parameter name="query">
<parameter_description> a #GdaQuery object
</parameter_description>
</parameter>
<parameter name="target">
<parameter_description> a #GdaQueryTarget object
</parameter_description>
</parameter>
</parameters>
<return> a new GSList, or %NULL.
</return>
</function>

<function name="gda_dict_function_set_sqlname">
<description>
Set the SQL name of the data type.

</description>
<parameters>
<parameter name="func">
<parameter_description> a #GdaDictFunction object
</parameter_description>
</parameter>
<parameter name="sqlname">
<parameter_description> 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_client_declare_connection">
<description>
Declares the @cnc to @client. This function should not be used directly

</description>
<parameters>
<parameter name="client">
<parameter_description> a #GdaClient object
</parameter_description>
</parameter>
<parameter name="cnc">
<parameter_description> a #GdaConnection object
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_query_condition_represents_join">
<description>
Tells if @condition represents a join condition: it is a condition (within a #GdaQuery object)
for which the only #GdaQueryFieldField fields taking part in the condition are from two distincts
#GdaQueryTarget objects. Such conditions can be assigned to a #GdaQueryJoin object using the 
gda_query_join_set_condition() or gda_query_join_set_condition_from_fkcons() methods.

Additionnaly, if @condition is a join condition, and if @target1 and @target2 are not %NULL
then they are set to point to the two #GdaQueryTarget objects taking part in the condition. In this
case @target1 and @target2 wil hold non %NULL values.

In a similar way, if @is_equi_join is not %NULL, then it will be set to TRUE if the join
condition is an equi join (that is the only comparison operator is the equal sign and there are
only AND operators in the condition).

If @condition is not a join condition, then @target1, @target2 and @is_equi_join are left
untouched.


</description>
<parameters>
<parameter name="condition">
<parameter_description> a #GdaQueryCondition object
</parameter_description>
</parameter>
<parameter name="target1">
<parameter_description> place to store one of the targets, or %NULL
</parameter_description>
</parameter>
<parameter name="target2">
<parameter_description> place to store the other target, or %NULL
</parameter_description>
</parameter>
<parameter name="is_equi_join">
<parameter_description> place to store if the join is an equi join
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @condition is a join condition
</return>
</function>

<function name="gda_dict_constraint_get_constraint_type">
<description>
Get the type of constraint the @cstr object represents


</description>
<parameters>
<parameter name="cstr">
<parameter_description> a #GdaDictConstraint object
</parameter_description>
</parameter>
</parameters>
<return> the constraint type
</return>
</function>

<function name="gda_dict_get_default_handler">
<description>
Obtain a pointer to a #GdaDataHandler which can manage
#GValue values of type @for_type

The returned pointer is %NULL if there is no default data handler available for the @for_type data type


</description>
<parameters>
<parameter name="dict">
<parameter_description> a #GdaDict object
</parameter_description>
</parameter>
<parameter name="for_type">
<parameter_description> a #GType type
</parameter_description>
</parameter>
</parameters>
<return> a #GdaDataHandler
</return>
</function>

<function name="gda_row_get_id">
<description>
Returns: the unique identifier for this row.

</description>
<parameters>
<parameter name="row">
<parameter_description> a #GdaRow (which contains #GValue).
</parameter_description>
</parameter>
</parameters>
<return> the unique identifier for this row.
</return>
</function>

<function name="gda_connection_event_set_code">
<description>
Sets @event&apos;s code: the code is specific to the provider being used.
If you want to have a common understanding of the event codes, use
gda_connection_event_get_gda_code() instead.

</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdaConnectionEvent.
</parameter_description>
</parameter>
<parameter name="code">
<parameter_description> a code.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_object_get_name">
<description>
Fetch the name of the GdaObject object.


</description>
<parameters>
<parameter name="gdaobj">
<parameter_description> a #GdaObject object
</parameter_description>
</parameter>
</parameters>
<return> the object&apos;s name.
</return>
</function>

<function name="gda_query_condition_is_leaf">
<description>
Tells if @condition is a leaf condition (not AND, OR, NOT, etc)


</description>
<parameters>
<parameter name="condition">
<parameter_description> a #GdaQueryCondition object
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @condition is a leaf condition
</return>
</function>

<function name="sqlerror">
<description>
Internal function for displaying error messages used by the lexer parser.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gda_row_new">
<description>
Creates a #GdaRow which can hold @count #GValue values.

The caller of this function is the only owner of a reference to the newly created #GdaRow
object, even if @model is not %NULL (it is recommended to pass %NULL as the @model argument
if this function is not called from within a #GdaDataModel implementation).


</description>
<parameters>
<parameter name="model">
<parameter_description> the #GdaDataModel this row belongs to, or %NULL if the row is outside any data model
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> number of #GValue in the new #GdaRow.
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated #GdaRow object.
</return>
</function>

<function name="gda_dict_set_connection">
<description>
Sets the associated connection to @dict. This connection is then used when the dictionary
synchronises itself, and when manipulating data (the gda_dict_get_handler() method).

</description>
<parameters>
<parameter name="dict">
<parameter_description> a #GdaDict object
</parameter_description>
</parameter>
<parameter name="cnc">
<parameter_description> a #GdaConnection object
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_data_model_iter_can_be_moved">
<description>
Tells if @iter can point to another row. Note the @iter by itself will not refuse
a row change, but that the row change may be refused by another object using
@iter.


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GdaDataModelIter object
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the row represented by @iter can be changed
</return>
</function>

<function name="gda_object_ref_is_active">
<description>
Find wether @ref is active


</description>
<parameters>
<parameter name="ref">
<parameter_description> a #GdaObjectRef object
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @ref is active
</return>
</function>

<function name="gda_entity_swap_fields">
<description>

</description>
<parameters>
<parameter name="iface">
<parameter_description> an object implementing the #GdaEntity interface
</parameter_description>
</parameter>
<parameter name="field1">
<parameter_description> an object implementing the #GdaEntityField interface
</parameter_description>
</parameter>
<parameter name="field2">
<parameter_description> an object implementing the #GdaEntityField interface
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_value_to_xml">
<description>
Serializes the given #GValue to a XML node string.


</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue.
</parameter_description>
</parameter>
</parameters>
<return> the XML node. Once not needed anymore, you should free it.
</return>
</function>

<function name="gda_server_provider_supports_operation">
<description>
Tells if @provider supports the @type of operation on the @cnc connection, using the
(optional) @options parameters.


</description>
<parameters>
<parameter name="provider">
<parameter_description> a #GdaServerProvider object
</parameter_description>
</parameter>
<parameter name="cnc">
<parameter_description> a #GdaConnection object which would be used to perform an action
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> the type of operation requested
</parameter_description>
</parameter>
<parameter name="options">
<parameter_description> a list of named parameters, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the operation is supported
</return>
</function>

<function name="gda_query_field_is_equal">
<description>
Compares the @qfield1 and @qfield2. The name and aliases of the two fields are
not compared, only the contents of the fields are.


</description>
<parameters>
<parameter name="qfield1">
<parameter_description> a #GdaQueryField object
</parameter_description>
</parameter>
<parameter name="qfield2">
<parameter_description> a #GdaQueryField object
</parameter_description>
</parameter>
</parameters>
<return> TRUE if they are equal and FALSE otherwise
</return>
</function>

<function name="gda_referer_replace_refs">
<description>
Ask @iface to replace references to objects listed as keys in the @replacements hash table
with references to objects of the corresponding value.

It&apos;s up to the caller to make sure each pair of (key, value) objects in @replacements are of the
same type, and that it makes sense to procede to the replacement.

The object implementing this interface will accept to do any work only if it is
already active.

</description>
<parameters>
<parameter name="iface">
<parameter_description> an object which implements the #GdaReferer interface
</parameter_description>
</parameter>
<parameter name="replacements">
<parameter_description> a #GHashTable
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_config_save_data_source_info">
<description>
Saves a data source in the libgda configuration given a
#GdaDataSourceInfo structure containing all the information
about the data source.


</description>
<parameters>
<parameter name="dsn_info">
<parameter_description> a #GdaDataSourceInfo structure.
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_dict_object_is_assumed">
<description>
Tests if @object is assumed by @dict


</description>
<parameters>
<parameter name="dict">
<parameter_description> a #GdaDict object
</parameter_description>
</parameter>
<parameter name="object">
<parameter_description> a #GdaObject object
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @object is assumed by @dict
</return>
</function>

<function name="gda_data_model_import_from_file">
<description>
Imports data contained in the @file file into @model; the format is detected.


</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModel
</parameter_description>
</parameter>
<parameter name="file">
<parameter_description> the filename to import from
</parameter_description>
</parameter>
<parameter name="cols_trans">
<parameter_description> a #GHashTable for columns translating, or %NULL
</parameter_description>
</parameter>
<parameter name="options">
<parameter_description> list of options for the export
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_column_set_table">
<description>
Sets the name of the table to which the given column belongs.

</description>
<parameters>
<parameter name="column">
<parameter_description> a #GdaColumn.
</parameter_description>
</parameter>
<parameter name="table">
<parameter_description> table name.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_parameter_new_copy">
<description>
Copy constructor.


</description>
<parameters>
<parameter name="orig">
<parameter_description> a #GdaParameter object to copy
</parameter_description>
</parameter>
</parameters>
<return> a new #GdaParameter object
</return>
</function>

<function name="gda_dict_unassume_object">
<description>
Makes @dict release its reference on @object.

</description>
<parameters>
<parameter name="dict">
<parameter_description> a #GdaDict object
</parameter_description>
</parameter>
<parameter name="object">
<parameter_description> a #GdaObject object
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_entity_field_get_description">
<description>
Get the description of the object implementing the #GdaEntityField interface


</description>
<parameters>
<parameter name="iface">
<parameter_description> an object which implements the #GdaEntityField interface
</parameter_description>
</parameter>
</parameters>
<return> the description
</return>
</function>

<function name="gda_entity_field_get_dict_type">
<description>
Get the data type of the object implementing the #GdaEntityField interface


</description>
<parameters>
<parameter name="iface">
<parameter_description> an object which implements the #GdaEntityField interface
</parameter_description>
</parameter>
</parameters>
<return> the corresponding #GdaDictType
</return>
</function>

<function name="gda_parameter_list_new_from_spec_string">
<description>
Creates a new #GdaParameterList object from the @xml_spec
specifications


</description>
<parameters>
<parameter name="dict">
<parameter_description> a #GdaDict object, or %NULL
</parameter_description>
</parameter>
<parameter name="xml_spec">
<parameter_description> a string
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store the error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a new object, or %NULL if an error occurred
</return>
</function>

<function name="gda_data_model_set_column_title">
<description>
Sets the @title of the given @col in @model.

</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModel object.
</parameter_description>
</parameter>
<parameter name="col">
<parameter_description> column number
</parameter_description>
</parameter>
<parameter name="title">
<parameter_description> title for the given column.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_row_copy">
<description>
Copy constructor.


</description>
<parameters>
<parameter name="row">
<parameter_description> the #GdaRow to copy
</parameter_description>
</parameter>
</parameters>
<return> a new #GdaRow
</return>
</function>

<function name="gda_object_connect_destroy">
<description>
Connects the &quot;destroy&quot; signal of the @gdaobj object but first cheks that
@gdaobj exists and has not yet been destroyed.


</description>
<parameters>
<parameter name="gdaobj">
<parameter_description> a #GdaObject object
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return> the handler id of the signal
</return>
</function>

<function name="gda_query_set_condition">
<description>
Sets the query&apos;s associated condition; if there was already a query condition,
then the old one is trashed first.

Pass %NULL as the @cond argument to remove any query condition

</description>
<parameters>
<parameter name="query">
<parameter_description> a #GdaQuery object
</parameter_description>
</parameter>
<parameter name="cond">
<parameter_description> a #GdaQueryCondition object, or %NULL to remove condition
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_connection_get_dsn">
<description>

</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection object
</parameter_description>
</parameter>
</parameters>
<return>the data source name the connection object is connected
to.
</return>
</function>

<function name="gda_query_field_value_get_default_value">
<description>
Get the default value stored by @field.


</description>
<parameters>
<parameter name="field">
<parameter_description> a #GdaQueryFieldValue object
</parameter_description>
</parameter>
</parameters>
<return> the value or NULL
</return>
</function>

<function name="gda_server_operation_op_type_to_string">
<description>
Get a string version of @type


</description>
<parameters>
<parameter name="type">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return> a non %NULL string (do not free or modify)
</return>
</function>

<function name="gda_dict_type_get_sqlname">
<description>
Get the DBMS&apos;s name of a data type.


</description>
<parameters>
<parameter name="dt">
<parameter_description> a #GdaDictType object
</parameter_description>
</parameter>
</parameters>
<return> the name of the data type
</return>
</function>

<function name="gda_value_get_list">
<description>

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue whose value we want to get.
</parameter_description>
</parameter>
</parameters>
<return> the value stored in @value.
</return>
</function>

<function name="gda_dict_save_xml_file">
<description>
Saves the contents of a GdaDict object to a file which is given as argument.


</description>
<parameters>
<parameter name="dict">
<parameter_description> a #GdaDict object
</parameter_description>
</parameter>
<parameter name="xmlfile">
<parameter_description> the name of the file to which the XML will be written to
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if saving was successfull and FALSE otherwise.
</return>
</function>

<function name="gda_server_provider_begin_transaction">
<description>

</description>
<parameters>
<parameter name="provider">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="cnc">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the transation to start
</parameter_description>
</parameter>
<parameter name="level">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return>
</return>
</function>

<function name="gda_init">
<description>
Initializes the GDA library. 

</description>
<parameters>
<parameter name="app_id">
<parameter_description> name of the program.
</parameter_description>
</parameter>
<parameter name="version">
<parameter_description> revision number of the program.
</parameter_description>
</parameter>
<parameter name="nargs">
<parameter_description> number of arguments, usually argc from main().
</parameter_description>
</parameter>
<parameter name="args">
<parameter_description> list of arguments, usually argv from main().
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_dict_function_set_arg_dict_types">
<description>
Set the arguments types of a function

</description>
<parameters>
<parameter name="func">
<parameter_description> a #GdaDictFunction object
</parameter_description>
</parameter>
<parameter name="arg_types">
<parameter_description> a list of #GdaDictType objects or #NULL values ordered to represent the data types
of the function&apos;s arguments .
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_data_model_add_data_from_xml_node">
<description>
Adds the data from a XML node to the given data model (see the DTD for that node
in the $prefix/share/libgda/dtd/libgda-array.dtd file).


</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModel.
</parameter_description>
</parameter>
<parameter name="node">
<parameter_description> a XML node representing a &amp;lt;gda_array_data&amp;gt; XML node.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful, %FALSE otherwise.
</return>
</function>

<function name="gda_dict_database_get_field_by_name">
<description>
Get a reference to a GdaDictField specifying the full name (table_name.field_name)
of the requested field.


</description>
<parameters>
<parameter name="db">
<parameter_description> a #GdaDictDatabase object
</parameter_description>
</parameter>
<parameter name="fullname">
<parameter_description> the name of the requested table field
</parameter_description>
</parameter>
</parameters>
<return> The GdaDictField pointer or NULL if the requested field does not exist.
</return>
</function>

<function name="gda_data_proxy_get_n_modified_rows">
<description>
Get the number of rows which have been modified in the proxy (the sum of rows existing in
the proxied data model which have been modified, and new rows).


</description>
<parameters>
<parameter name="proxy">
<parameter_description> a #GdaDataProxy object
</parameter_description>
</parameter>
</parameters>
<return> the number of modified rows
</return>
</function>

<function name="gda_data_model_index_set_references">
<description>
Sets @dmi&apos;s @references.

</description>
<parameters>
<parameter name="dmi">
<parameter_description> a #GdaDataModelIndex.
</parameter_description>
</parameter>
<parameter name="ref">
<parameter_description> references.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_config_has_key">
<description>
Checks whether the given key exists in the configuration system.


</description>
<parameters>
<parameter name="path">
<parameter_description> path to the configuration key.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the entry exists, %FALSE otherwise.
</return>
</function>

<function name="gda_connection_event_set_description">
<description>
Sets @event&apos;s @description.

</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdaConnectionEvent.
</parameter_description>
</parameter>
<parameter name="description">
<parameter_description> a description.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_column_get_name">
<description>

</description>
<parameters>
<parameter name="column">
<parameter_description> a #GdaColumn.
</parameter_description>
</parameter>
</parameters>
<return> the name of @column.
</return>
</function>

<function name="gda_connection_close_no_warning">
<description>
Closes the connection to the underlying data source, without emiting any warning signal.

</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection object.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_data_model_index_set_name">
<description>
Sets the name of @dmi to @name.

</description>
<parameters>
<parameter name="dmi">
<parameter_description> a #GdaDataModelIndex.
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the new name of @dmi.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_query_target_get_complete_name">
<description>
Get a complete name for target in the form of &quot;&amp;lt;entity name&amp;gt; AS &amp;lt;target alias&amp;gt;&quot;


</description>
<parameters>
<parameter name="target">
<parameter_description> a #GdaQueryTarget object
</parameter_description>
</parameter>
</parameters>
<return> a new string
</return>
</function>

<function name="gda_data_proxy_get_sample_size">
<description>
Get the size of each chunk of data displayed at a time.


</description>
<parameters>
<parameter name="proxy">
<parameter_description> a #GdaDataProxy object
</parameter_description>
</parameter>
</parameters>
<return> the chunck (or sample) size, or 0 if chunking is disabled.
</return>
</function>

<function name="gda_dict_get_object_by_xml_id">
<description>
For the objects which implement the #GdaXmlStorage interface, this function allows to find an object from
its XML Id. The object is looked from the managed objects of type @type, and also from the list
of all declared objects.


</description>
<parameters>
<parameter name="dict">
<parameter_description> a #GdaDict object
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> a #Gtype type of object
</parameter_description>
</parameter>
<parameter name="xml_id">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the requested object, or %NULL if the object was not found
</return>
</function>

<function name="gda_data_model_import_new_xml_node">
<description>
Creates a new #GdaDataModel and loads the data in @node. The resulting data model
can be accessed in a random way.


</description>
<parameters>
<parameter name="node">
<parameter_description> an XML node corresponding to a &amp;lt;data-array&amp;gt; tag
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the newly created #GdaDataModel.
</return>
</function>

<function name="gda_value_set_timestamp">
<description>
Stores @val into @value.

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue that will store @val.
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> value to be stored in @value.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_row_set_value">
<description>
Sets the value stored at position @num in @row to be a copy of
@value.


</description>
<parameters>
<parameter name="row">
<parameter_description> a #GdaRow
</parameter_description>
</parameter>
<parameter name="num">
<parameter_description> field index.
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a #GValue to insert into @row at the @num position, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred.
</return>
</function>

<function name="gda_data_model_filter_sql_run">
<description>
Runs the query and fills in the #GdaDataModelFilterSQL object with the
rows that matched the SQL command (which can be set with
#gda_data_model_filter_sql_set_sql) associated with this #GdaDataModelFilterSQL
object.

After calling this function, if everything is successful,
the #GdaDataModelFilterSQL object will contain the matched rows, which
can then be accessed like a normal #GdaDataModel.


</description>
<parameters>
<parameter name="sel">
<parameter_description> a #GdaDataModelFilterSQL object.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful, %FALSE if there was an error.
</return>
</function>

<function name="gda_parameter_new_string">
<description>
Creates a new #GdaParameter object of type G_TYPE_STRING


</description>
<parameters>
<parameter name="name">
<parameter_description> the name of the parameter to create
</parameter_description>
</parameter>
<parameter name="str">
<parameter_description> the contents of the parameter to create
</parameter_description>
</parameter>
</parameters>
<return> a new #GdaParameter object
</return>
</function>

<function name="gda_data_proxy_get_sample_start">
<description>
Get the row number of the first row to be displayed.


</description>
<parameters>
<parameter name="proxy">
<parameter_description> a #GdaDataProxy object
</parameter_description>
</parameter>
</parameters>
<return> the number of the first row being displayed.
</return>
</function>

<function name="gda_data_model_iter_move_prev">
<description>
Moves @iter one row before where it already is (synchronizes the values of the parameters in @iter 
with the values at the new row).


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GdaDataModelIter object
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_string_to_blob">
<description>
Performs the reverse of gda_blob_to_string().


</description>
<parameters>
<parameter name="str">
<parameter_description> a string to convert
</parameter_description>
</parameter>
<parameter name="blob">
<parameter_description> a non filled @GdaBlob structure
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error were found in @str, or FALSE otherwise
</return>
</function>

<function name="gda_query_order_fields_using_join_conds">
<description>
Re-orders the fields in @query using the joins&apos; conditions: for each join condition,
the used query fields are grouped together near the 1st visible field.

</description>
<parameters>
<parameter name="query">
<parameter_description> a #GdaQuery object
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_value_new_blob">
<description>
Makes a new #GValue of type #GDA_TYPE_BLOB with value @val.


</description>
<parameters>
<parameter name="val">
<parameter_description> value to set for the new #GValue.
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the size of the memory pool pointer to by @val.
</parameter_description>
</parameter>
</parameters>
<return> the newly created #GValue.
</return>
</function>

<function name="gda_blob_op_read">
<description>
Reads a chunk of bytes from the BLOB into @blob.


</description>
<parameters>
<parameter name="op">
<parameter_description> a #GdaBlobOp
</parameter_description>
</parameter>
<parameter name="blob">
<parameter_description> a #GdaBlob to read data to
</parameter_description>
</parameter>
<parameter name="offset">
<parameter_description> offset to read from the start of the blob (starts at 0)
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> maximum number of bytes to read.
</parameter_description>
</parameter>
</parameters>
<return> the number of bytes actually read. In case of error, -1 is returned and the
provider should have added an error to the connection.
</return>
</function>

<function name="gda_parameter_restrict_values">
<description>
Sets a limit on the possible values for the @param parameter: the value must be among the values
contained in the @col column of the @model data model.


</description>
<parameters>
<parameter name="param">
<parameter_description> a #GdaParameter object
</parameter_description>
</parameter>
<parameter name="model">
<parameter_description> a #GdaDataModel object or NULL
</parameter_description>
</parameter>
<parameter name="col">
<parameter_description> the reference column in @model
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_client_prepare_create_database">
<description>
Creates a new #GdaServerOperation object which contains the specifications required
to create a database. Once these specifications provided, use 
gda_client_perform_create_database() to perform the database creation.

If @db_name is left %NULL, then the name of the database to create will have to be set in the
returned #GdaServerOperation using gda_server_operation_set_value_at().


</description>
<parameters>
<parameter name="client">
<parameter_description> a #GdaClient object.
</parameter_description>
</parameter>
<parameter name="db_name">
<parameter_description> the name of the database to create, or %NULL
</parameter_description>
</parameter>
<parameter name="provider">
<parameter_description> a provider
</parameter_description>
</parameter>
</parameters>
<return> new #GdaServerOperation object, or %NULL if the provider does not support database
creation
</return>
</function>

<function name="gda_connection_is_opened">
<description>
Checks whether a connection is open or not.


</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection object.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the connection is open, %FALSE if it&apos;s not.
</return>
</function>

<function name="gda_query_field_value_set_not_null">
<description>
Sets if a NULL value is acceptable for @field. If @not_null is TRUE, then @field
can&apos;t have a NULL value.

</description>
<parameters>
<parameter name="field">
<parameter_description> a #GdaQueryFieldValue object
</parameter_description>
</parameter>
<parameter name="not_null">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_column_set_title">
<description>
Sets the column&apos;s title

</description>
<parameters>
<parameter name="column">
<parameter_description> a #GdaColumn.
</parameter_description>
</parameter>
<parameter name="title">
<parameter_description> title name.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_dict_field_get_constraints">
<description>
Get all the constraints which impact the given field. Constraints are of several type:
NOT NULL, primary key, foreign key, check constrains


</description>
<parameters>
<parameter name="field">
<parameter_description> a #GdaDictField  object
</parameter_description>
</parameter>
</parameters>
<return> a new list of #GdaDictConstraint objects
</return>
</function>

<function name="gda_query_add_param_source">
<description>
Tells @query that @param_source is a query which potentially will constraint the possible values
of one or more of @query&apos;s parameters. This implies that @query keeps a reference on @param_source.

</description>
<parameters>
<parameter name="query">
<parameter_description> a #GdaQuery object
</parameter_description>
</parameter>
<parameter name="param_source">
<parameter_description> a #GdaDataModel object
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_g_type_to_string">
<description>

</description>
<parameters>
<parameter name="type">
<parameter_description> Type to convert from.
</parameter_description>
</parameter>
</parameters>
<return> the string representing the given #GType.
</return>
</function>

<function name="gda_binary_free">
<description>
Deallocates all memory associated to the given #GdaBinary.

</description>
<parameters>
<parameter name="boxed">
<parameter_description> #GdaBinary to free.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_dict_get_handler">
<description>
Obtain a pointer to a #GdaDataHandler which can convert #GValue values of type @for_type.

Unlike the gda_dict_get_default_handler() method, this method asks the provider (for
the connection assigned to @dict using gda_dict_set_connection()) if there is any.

It fallbacks to the same data handler as
gda_dict_get_default_handler() if no connection has been assigned, or if the assigned&apos;d provider
offers no data handler for that type.

The returned pointer is %NULL if there is no data handler available for the @for_type type.


</description>
<parameters>
<parameter name="dict">
<parameter_description> a #GdaDict object
</parameter_description>
</parameter>
<parameter name="for_type">
<parameter_description> a #GType type
</parameter_description>
</parameter>
</parameters>
<return> a #GdaDataHandler
</return>
</function>

<function name="gda_data_handler_get_sql_from_value">
<description>
Creates a new string which is an SQL representation of the given value. If the value is NULL or
is of type GDA_TYPE_NULL, the returned string is NULL.


</description>
<parameters>
<parameter name="dh">
<parameter_description> an object which implements the #GdaDataHandler interface
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the value to be converted to a string
</parameter_description>
</parameter>
</parameters>
<return> the new string.
</return>
</function>

<function name="gda_data_access_wrapper_get_type">
<description>

</description>
<parameters>
</parameters>
<return> the #GType of GdaDataAccessWrapper.
</return>
</function>

<function name="gda_object_ref_set_ref_name">
<description>
Sets the type and XML Id of the object we want to reference. If any other object was already
referenced @ref is first reinitialized

Rem: the name format is dependant on the type of object which is requested

</description>
<parameters>
<parameter name="ref">
<parameter_description> a #GdaObjectRef object
</parameter_description>
</parameter>
<parameter name="ref_type">
<parameter_description> the requested referenced object&apos;s data type, or 0 if not specified and @type = REFERENCE_BY_XML_ID
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> how to interpret the @name argument
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the requested object
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_dict_database_get_type">
<description>

</description>
<parameters>
</parameters>
<return> the type id
</return>
</function>

<function name="gda_connection_set_dsn">
<description>
Sets the data source of the connection. If the connection is already opened,
then no action is performed at all and FALSE is returned.

If the requested datasource does not exist, then nothing is done and FALSE
is returned.


</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection object
</parameter_description>
</parameter>
<parameter name="datasource">
<parameter_description> a gda datasource
</parameter_description>
</parameter>
</parameters>
<return> TRUE on success
</return>
</function>

<function name="gda_parameter_get_bind_param">
<description>
Get the parameter which makes @param change its value when the param&apos;s value is changed.


</description>
<parameters>
<parameter name="param">
<parameter_description> a #GdaParameter
</parameter_description>
</parameter>
</parameters>
<return> the #GdaParameter or %NULL
</return>
</function>

<function name="gda_connection_event_get_gda_code">
<description>
Retreive the code associated to @event.


</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdaConnectionEvent
</parameter_description>
</parameter>
</parameters>
<return> the #GdaConnectionEventCode event&apos;s code
</return>
</function>

<function name="gda_delimiter_parse_copy_statement">
<description>
makes a copy of @statement

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gda_query_get_condition">
<description>
Get the query&apos;s associated condition


</description>
<parameters>
<parameter name="query">
<parameter_description> a #GdaQuery object
</parameter_description>
</parameter>
</parameters>
<return> the #GdaQueryCondition object
</return>
</function>

<function name="gda_query_join_get_condition">
<description>
Get the join&apos;s associated condition


</description>
<parameters>
<parameter name="join">
<parameter_description> a #GdaQueryJoin object
</parameter_description>
</parameter>
</parameters>
<return> the #GdaQueryCondition object
</return>
</function>

<function name="gda_threader_start_thread">
<description>



</description>
<parameters>
<parameter name="thread">
<parameter_description> a #GdaThreader object
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> the function to be called in the newly created thread
</parameter_description>
</parameter>
<parameter name="func_arg">
<parameter_description> @func&apos;s argument
</parameter_description>
</parameter>
<parameter name="ok_callback">
<parameter_description> callback called when @func terminates
</parameter_description>
</parameter>
<parameter name="cancel_callback">
<parameter_description> callback called when @func terminates and the job has been cancelled
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> place to store an error when creating the thread or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the id of the new job executed in another thread.
</return>
</function>

<function name="gda_connection_set_username">
<description>
Sets the user name for the connection. If the connection is already opened,
then no action is performed at all and FALSE is returned.


</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection object
</parameter_description>
</parameter>
<parameter name="username">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return> TRUE on success
</return>
</function>

<function name="gda_value_set_time">
<description>
Stores @val into @value.

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue that will store @val.
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> value to be stored in @value.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_object_ref_get_ref_name">
<description>
Get the caracteristics of the requested object


</description>
<parameters>
<parameter name="ref">
<parameter_description> a #GdaObjectRef object
</parameter_description>
</parameter>
<parameter name="ref_type">
<parameter_description> where to store the requested referenced object&apos;s data type, or NULL
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> where to store how to interpret the returned name, or NULL
</parameter_description>
</parameter>
</parameters>
<return> the name of the object (to be interpreted with @type)
</return>
</function>

<function name="gda_quark_list_new">
<description>
Creates a new #GdaQuarkList, which is a set of key-&amp;gt;value pairs,
very similar to GLib&apos;s GHashTable, but with the only purpose to
make easier the parsing and creation of data source connection
strings.


</description>
<parameters>
</parameters>
<return> the newly created #GdaQuarkList.
</return>
</function>

<function name="gda_server_operation_save_data_to_xml">
<description>
Creates a new #xmlNodePtr tree which can be used to save the #op object. This
XML structure can then be saved to disk if necessary. Use xmlFreeNode to free
the associated memory when not needed anymore.


</description>
<parameters>
<parameter name="op">
<parameter_description> a #GdaServerOperation object
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a new #xmlNodePtr structure, or %NULL
</return>
</function>

<function name="gda_data_model_index_set_table_name">
<description>
Sets the table name of @dmi to @table_name.

</description>
<parameters>
<parameter name="dmi">
<parameter_description> a #GdaDataModelIndex.
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the new name of @dmi.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_data_model_move_iter_at_row">
<description>
Sets @iter to represent the @row row. @iter must be a valid iterator object obtained
using the gda_data_model_create_iter() method.


</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModel object.
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> a #GdaDataModelIter object
</parameter_description>
</parameter>
<parameter name="row">
<parameter_description> row number.
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_column_get_unique_key">
<description>

</description>
<parameters>
<parameter name="column">
<parameter_description> a #GdaColumn.
</parameter_description>
</parameter>
</parameters>
<return> whether if the given column is an unique key (%TRUE or %FALSE).
</return>
</function>

<function name="gda_dict_field_set_default_value">
<description>
Sets (or replace) the default value for the field. WARNING: the default value&apos;s data type can be
different from the field&apos;s data type (this is the case for example if the default value is a 
function like Postgres&apos;s default value for the SERIAL data type).

</description>
<parameters>
<parameter name="field">
<parameter_description> a #GdaDictField object
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a #GValue value or NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_data_model_get_value_at">
<description>
Retrieves the data stored in the given position (identified by
the @col and @row parameters) on a data model.

This is the main function for accessing data in a model.

Note that the returned #GValue must not be modified directly (unexpected behaviours may
occur if you do so). If you want to
modify a value stored in a #GdaDataModel, use the gda_data_model_set_value() method.


</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModel object.
</parameter_description>
</parameter>
<parameter name="col">
<parameter_description> a valid column number.
</parameter_description>
</parameter>
<parameter name="row">
<parameter_description> a valid row number.
</parameter_description>
</parameter>
</parameters>
<return> a #GValue containing the value stored in the given
position, or %NULL on error (out-of-bound position, etc).
</return>
</function>

<function name="gda_data_model_describe_column">
<description>
Queries the underlying data model implementation for a description
of a given column. That description is returned in the form of
a #GdaColumn structure, which contains all the information
about the given column in the data model.

WARNING: the returned #GdaColumn object belongs to the @model model and
and should not be destroyed; any modification will impact the whole data model.


</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModel object.
</parameter_description>
</parameter>
<parameter name="col">
<parameter_description> column number.
</parameter_description>
</parameter>
</parameters>
<return> the description of the column.
</return>
</function>

<function name="gda_sql_transaction_parse_with_error">
<description>
Generate in memory a structure of the @sqlquery in an easy
to view way.  You can also modify the returned structure and
regenerate the sql query using sql_stringify().  The structure
contains information on what type of sql statement it is, what
tables its getting from, what fields are selected, the where clause,
joins etc.


</description>
<parameters>
<parameter name="sqlquery">
<parameter_description> A SQL query string. ie SELECT * FROM FOO
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place where to store an error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> A generated sql_statement or %NULL on error.
</return>
</function>

<function name="gda_connection_event_get_event_type">
<description>
Get @event&apos;s severity (from a simple notice to a fatal event)


</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdaConnectionEvent object
</parameter_description>
</parameter>
</parameters>
<return> the event type
</return>
</function>

<function name="gda_data_proxy_get_proxied_model">
<description>
Fetch the #GdaDataModel which @proxy does proxy


</description>
<parameters>
<parameter name="proxy">
<parameter_description> a #GdaDataProxy object
</parameter_description>
</parameter>
</parameters>
<return> the proxied data model
</return>
</function>

<function name="The">
<description>

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="the">
<description>

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gda_connection_get_cnc_string">
<description>
Gets the connection string used to open this connection.

The connection string is the string sent over to the underlying
database provider, which describes the parameters to be used
to open a connection on the underlying data source.


</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection object.
</parameter_description>
</parameter>
</parameters>
<return> the connection string used when opening the connection.
</return>
</function>

<function name="gda_data_model_query_compute_modification_queries">
<description>
Try to compute the INSERT, DELETE and UPDATE queries; any previous modification query
will be discarded.

If specified, the table which will be updated is the one represented by the @target.

If @target is %NULL, then an error will be returned if @model&apos;s SELECT query has more than
one target.


</description>
<parameters>
<parameter name="model">
<parameter_description> a GdaDataModelQuery object
</parameter_description>
</parameter>
<parameter name="target">
<parameter_description> the target table to modify, or %NULL
</parameter_description>
</parameter>
<parameter name="options">
<parameter_description> options to specify how the queries must be built in some special cases
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the INSERT, DELETE and UPDATE queries have been computed.
</return>
</function>

<function name="gda_graphviz_new">
<description>
Creates a new #GdaGraphviz object


</description>
<parameters>
<parameter name="dict">
<parameter_description> a #GdaDict object
</parameter_description>
</parameter>
</parameters>
<return> the new object
</return>
</function>

<function name="gda_dict_constraint_fkey_get_actions">
<description>
Get the actions undertaken by the DBMS when some actions occur on the referenced data

</description>
<parameters>
<parameter name="cstr">
<parameter_description> a #GdaDictConstraint object
</parameter_description>
</parameter>
<parameter name="on_update">
<parameter_description> an address to store the action undertaken when an UPDATE occurs
</parameter_description>
</parameter>
<parameter name="on_delete">
<parameter_description> an address to store the action undertaken when a DELETE occurs
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_query_field_new_copy">
<description>
This is a copy constructor


</description>
<parameters>
<parameter name="orig">
<parameter_description> a #GdaQueryField to copy
</parameter_description>
</parameter>
</parameters>
<return> the new object
</return>
</function>

<function name="gda_data_proxy_get_proxied_model_n_rows">
<description>
Get the number of rows in the proxied data model


</description>
<parameters>
<parameter name="proxy">
<parameter_description> a #GdaDataProxy object
</parameter_description>
</parameter>
</parameters>
<return> the number of rows, or -1 if the number of rows is not known
</return>
</function>

<function name="gda_data_proxy_get_values">
<description>
Retreive a whole list of values from the @proxy store. This function calls gda_data_proxy_get_value()
for each column index specified in @cols_index, and generates a #GSlist on the way.


</description>
<parameters>
<parameter name="proxy">
<parameter_description> a #GdaDataProxy object
</parameter_description>
</parameter>
<parameter name="proxy_row">
<parameter_description> a proxy row
</parameter_description>
</parameter>
<parameter name="cols_index">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="n_cols">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return> a new list of values (the list must be freed, not the values), or %NULL if an error occurred
</return>
</function>

<function name="gda_dict_constraint_new_with_db">
<description>
Creates a new #GdaDictConstraint object without specifying anything about the
constraint except the database it is attached to. This is usefull only
when the object is going to be loaded from an XML node.


</description>
<parameters>
<parameter name="db">
<parameter_description> a #GdaDictDatabase object
</parameter_description>
</parameter>
</parameters>
<return> the new uninitialized object
</return>
</function>

<function name="gda_xml_storage_load_from_xml">
<description>
Updates the object with data stored in the XML node. The object MUST already
exist and be of the correct type before calling this function. 
This is a virtual function.


</description>
<parameters>
<parameter name="iface">
<parameter_description> an object which implements the #GdaXmlStorage interface
</parameter_description>
</parameter>
<parameter name="node">
<parameter_description> an XML node from an XML structure
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred.
</return>
</function>

<function name="gda_value_set_binary">
<description>
Stores @val into @value.

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue that will store @val.
</parameter_description>
</parameter>
<parameter name="binary">
<parameter_description> a #GdaBinary structure with the data and its size to be stored in @value.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_dict_constraint_pkey_get_fields">
<description>
Get the list of fields composing the primary key constraint which @cstr represents. The
returned list is allocated and must be de-allocated by the caller.


</description>
<parameters>
<parameter name="cstr">
<parameter_description> a #GdaDictConstraint object
</parameter_description>
</parameter>
</parameters>
<return> a new list of fields
</return>
</function>

<function name="gda_config_remove_data_source">
<description>
Removes the given data source from the GDA configuration.

</description>
<parameters>
<parameter name="name">
<parameter_description> name for the data source to be removed.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_execute_sql_command">
<description>
This is a convenient function to execute a SQL command over the opened connection.


</description>
<parameters>
<parameter name="cnn">
<parameter_description> an opened connection
</parameter_description>
</parameter>
<parameter name="sql">
<parameter_description> a query statament must begin with &quot;SELECT&quot;
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the number of rows impacted or -1.
</return>
</function>

<function name="gda_connection_change_database">
<description>
Changes the current database for the given connection. This operation
is not available in all providers.


</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection object.
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> name of database to switch to.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful, %FALSE otherwise.
</return>
</function>

<function name="gda_column_get_default_value">
<description>

</description>
<parameters>
<parameter name="column">
<parameter_description> a #GdaColumn.
</parameter_description>
</parameter>
</parameters>
<return> @column&apos;s default value, as a #GValue object.
</return>
</function>

<function name="gda_dict_database_stop_update_dbms_data">
<description>
When the database updates its internal lists of DBMS objects, a call to this function will 
stop that update process. It has no effect when the database is not updating its DBMS data.

</description>
<parameters>
<parameter name="db">
<parameter_description> a #GdaDictDatabase object
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_connection_get_type">
<description>
Registers the #GdaConnection class on the GLib type system.


</description>
<parameters>
</parameters>
<return> the GType identifying the class.
</return>
</function>

<function name="gda_data_model_index_new">
<description>

</description>
<parameters>
</parameters>
<return> a newly allocated #GdaDataModelIndex object.
</return>
</function>

<function name="gda_open_connection">
<description>
Convenient function to open a connection to a Data Source, 
see also gda_client_open_connection().


</description>
<parameters>
<parameter name="dsn">
<parameter_description> a data source name
</parameter_description>
</parameter>
<parameter name="username">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="password">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="options">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GdaConnection object if the connection was sucessfully opened, %NULL otherwise
</return>
</function>

<function name="gda_query_append_condition">
<description>
Appends the @cond object to @query&apos;s condition. If @query does not yet
have any condition, then the result is the same as gda_query_set_condition();
otherwise, @cond is added to @query&apos;s condition, using the AND operator
if @append_as_and is TRUE, and an OR operator if @append_as_and is FALSE.

</description>
<parameters>
<parameter name="query">
<parameter_description> a #GdaQuery object
</parameter_description>
</parameter>
<parameter name="cond">
<parameter_description> a #GdaQueryCondition object
</parameter_description>
</parameter>
<parameter name="append_as_and">
<parameter_description> mode of append if there is already a query condition
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_server_provider_get_version">
<description>
Get the version of the given provider.


</description>
<parameters>
<parameter name="provider">
<parameter_description> a #GdaServerProvider object.
</parameter_description>
</parameter>
</parameters>
<return> a string containing the version identification.
</return>
</function>

<function name="gda_query_target_new">
<description>
Creates a new #GdaQueryTarget object, specifying the name of the table to reference.


</description>
<parameters>
<parameter name="query">
<parameter_description> a #GdaQuery object
</parameter_description>
</parameter>
<parameter name="table">
<parameter_description> the name of the table to reference
</parameter_description>
</parameter>
</parameters>
<return> the new object
</return>
</function>

<function name="gda_dict_database_get_dict">
<description>
Fetch the GdaDict object to which the GdaDictDatabase belongs.


</description>
<parameters>
<parameter name="db">
<parameter_description> a #GdaDictDatabase object
</parameter_description>
</parameter>
</parameters>
<return> the GdaDict object
</return>
</function>

<function name="gda_entity_has_field">
<description>
Tells if @field belongs to the @iface entity


</description>
<parameters>
<parameter name="iface">
<parameter_description> an object implementing the #GdaEntity interface
</parameter_description>
</parameter>
<parameter name="field">
<parameter_description> an object implementing the #GdaEntityField interface
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @field belongs to the @iface entity
</return>
</function>

<function name="gda_quark_list_clear">
<description>
Removes all strings in the given #GdaQuarkList.

</description>
<parameters>
<parameter name="qlist">
<parameter_description> a #GdaQuarkList.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_data_proxy_get_n_new_rows">
<description>
Get the number of rows which have been added to @proxy and which are not part of
the proxied data model.


</description>
<parameters>
<parameter name="proxy">
<parameter_description> a #GdaDataProxy object
</parameter_description>
</parameter>
</parameters>
<return> the number of new rows
</return>
</function>

<function name="gda_query_field_get_parameters">
<description>
Get a list of all the parameters needed to @qfield to be
rendered as a valid statement


</description>
<parameters>
<parameter name="qfield">
<parameter_description> a #GdaQueryField object
</parameter_description>
</parameter>
</parameters>
<return> a new list of parameters for @qfield
</return>
</function>

<function name="gda_data_model_to_xml_node">
<description>
Converts a #GdaDataModel into a xmlNodePtr (as used in libxml).


</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModel object.
</parameter_description>
</parameter>
<parameter name="cols">
<parameter_description> an array containing which columns of @model will be exported, or %NULL for all columns
</parameter_description>
</parameter>
<parameter name="nb_cols">
<parameter_description> the number of columns in @cols
</parameter_description>
</parameter>
<parameter name="rows">
<parameter_description> an array containing which rows of @model will be exported, or %NULL for all rows
</parameter_description>
</parameter>
<parameter name="nb_rows">
<parameter_description> the number of rows in @rows
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> name to use for the XML resulting table.
</parameter_description>
</parameter>
</parameters>
<return> a xmlNodePtr representing the whole data model.
</return>
</function>

<function name="gda_query_is_select_query">
<description>
Tells if @query is a SELECTION query (a simple SELECT, UNION, INTERSECT or EXCEPT);


</description>
<parameters>
<parameter name="query">
<parameter_description> a # GdaQuery object
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @query is a selection query
</return>
</function>

<function name="gda_data_model_row_inserted">
<description>
Emits the &apos;row_inserted&apos; and &apos;changed&apos; signals on @model.

</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModel object.
</parameter_description>
</parameter>
<parameter name="row">
<parameter_description> row number.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_handler_time_new_no_locale">
<description>
Creates a data handler for time values, but using the default C locale
instead of the current user locale.


</description>
<parameters>
</parameters>
<return> the new object
</return>
</function>

<function name="gda_server_provider_string_to_value">
<description>
Use @provider to create a new #GValue from a single string representation. 

The @prefered_type can optionnaly ask @provider to return a #GValue of the requested type 
(but if such a value can&apos;t be created from @string, then %NULL is returned); 
pass G_TYPE_INVALID if any returned type is acceptable.

The returned value is either a new #GValue or %NULL in the following cases:
- @string cannot be converted to @prefered_type type
- the provider does not handle @prefered_type
- the provider could not make a #GValue from @string


</description>
<parameters>
<parameter name="provider">
<parameter_description> a server provider.
</parameter_description>
</parameter>
<parameter name="cnc">
<parameter_description> a #GdaConnection object.
</parameter_description>
</parameter>
<parameter name="string">
<parameter_description> the SQL string to convert to a value
</parameter_description>
</parameter>
<parameter name="prefered_type">
<parameter_description> a #GType
</parameter_description>
</parameter>
</parameters>
<return> a new #GValue, or %NULL
</return>
</function>

<function name="gda_server_provider_change_database">
<description>
Proxy the call to the change_database method on the
 &quot; #GdaServerProvider class to the corresponding provider.


</description>
<parameters>
<parameter name="provider">
<parameter_description> a #GdaServerProvider object.
</parameter_description>
</parameter>
<parameter name="cnc">
<parameter_description> a #GdaConnection object.
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> database name.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful, %FALSE otherwise.
</return>
</function>

<function name="gda_dict_aggregate_get_ret_dict_type">
<description>
To consult the return type of a aggregate.


</description>
<parameters>
<parameter name="agg">
<parameter_description> a #GdaDictAggregate object
</parameter_description>
</parameter>
</parameters>
<return> a #GdaDictType object.
</return>
</function>

<function name="gda_dict_get_database">
<description>
Fetch a pointer to the GdaDictDatabase used by the GdaDict object.


</description>
<parameters>
<parameter name="dict">
<parameter_description> a #GdaDict object
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the GdaDictDatabase
</return>
</function>

<function name="gda_data_model_is_updatable">
<description>
Tells if @model can be modified


</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModel object.
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @model can be modified
</return>
</function>

<function name="gda_connection_add_event_string">
<description>
Adds a new error to the given connection object. This is just a convenience
function that simply creates a #GdaConnectionEvent and then calls
#gda_server_connection_add_error.


</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaServerConnection object.
</parameter_description>
</parameter>
<parameter name="str">
<parameter_description> a format string (see the printf(3) documentation).
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> the arguments to insert in the error message.
</parameter_description>
</parameter>
</parameters>
<return> a new #GdaConnectionEvent object, however the caller does not hold a reference to the returned
object, and if need be the caller must call g_object_ref() on it.
</return>
</function>

<function name="gda_parameter_declare_invalid">
<description>
Forces a parameter to be invalid; to set it valid again, a new value must be assigned
to it using gda_parameter_set_value().

</description>
<parameters>
<parameter name="param">
<parameter_description> a #GdaParameter object
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_query_del_param_source">
<description>
Tells @query that it should no longer take care of @param_source.
The parameters which depend on @param_source will still depend on it, though.

</description>
<parameters>
<parameter name="query">
<parameter_description> a #GdaQuery object
</parameter_description>
</parameter>
<parameter name="param_source">
<parameter_description> a #GdaDataModel object
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_client_open_connection">
<description>
This function is the way of opening database connections with libgda.

Establishes a connection to a data source. The connection will be opened
if no identical connection is available in the #GdaClient connection pool,
and re-used if available. If you dont want to share the connection,
specify #GDA_CONNECTION_OPTIONS_DONT_SHARE as one of the flags in
the @options parameter.

The username and password used to actually open the connection are the first
non-NULL string being chosen by order from
&amp;lt;itemizedlist&amp;gt;
&amp;lt;listitem&amp;gt;the @username or @password&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;the username or password sprcified in the DSN definition&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;the USERNAME= and PASSWORD= parts of the connection string in the DSN definition&amp;lt;/listitem&amp;gt;
&amp;lt;/itemizedlist&amp;gt;



</description>
<parameters>
<parameter name="client">
<parameter_description> a #GdaClient object.
</parameter_description>
</parameter>
<parameter name="dsn">
<parameter_description> data source name.
</parameter_description>
</parameter>
<parameter name="username">
<parameter_description> user name or %NULL
</parameter_description>
</parameter>
<parameter name="password">
<parameter_description> password for @username, or %NULL
</parameter_description>
</parameter>
<parameter name="options">
<parameter_description> options for the connection (see #GdaConnectionOptions).
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store an error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the opened connection if successful, %NULL if there is
an error.
</return>
</function>

<function name="gda_column_set_allow_null">
<description>
Sets the &apos;allow null&apos; flag of the given column.

</description>
<parameters>
<parameter name="column">
<parameter_description> a #GdaColumn.
</parameter_description>
</parameter>
<parameter name="allow">
<parameter_description> whether the given column should allows null values or not.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_connection_execute_command">
<description>
If you know what to expect from @command (ie if you know it contains a query which will return
a data set or a query which will not return a data set) and if @command contains only one query,
then you should use
gda_connection_execute_select_command() and gda_connection_execute_non_select_command() which are easier
to use.

This function provides the way to send several commands
at once to the data source being accessed by the given
#GdaConnection object. The #GdaCommand specified can contain
a list of commands in its &quot;text&quot; property (usually a set
of SQL commands separated by &apos;;&apos;).

The return value is a GList of #GdaDataModel&apos;s, and #GdaParameterList which you
are responsible to free when not needed anymore (and unref the
data models and parameter lists when they are not used anymore). See the documentation
of gda_server_provider_execute_command() for more information about the returned list.

The @params can contain the following parameters:
&amp;lt;itemizedlist&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;a &quot;ITER_MODEL_ONLY&quot; parameter of type #G_TYPE_BOOLEAN which, if set to TRUE
will preferably return a data model which can be accessed only using an iterator.&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;/itemizedlist&amp;gt;


</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection object.
</parameter_description>
</parameter>
<parameter name="cmd">
<parameter_description> a #GdaCommand.
</parameter_description>
</parameter>
<parameter name="params">
<parameter_description> parameter list for the commands
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store an error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a list of #GdaDataModel and #GdaParameterList or %NULL, as returned by the underlying
provider, or %NULL if an error occurred.
</return>
</function>

<function name="gda_entity_field_get_g_type">
<description>
Get the gda type of the object implementing the #GdaEntityField interface


</description>
<parameters>
<parameter name="iface">
<parameter_description> an object which implements the #GdaEntityField interface
</parameter_description>
</parameter>
</parameters>
<return> the corresponding #GType or #G_TYPE_INVALID if the gda type is unknown
</return>
</function>

<function name="gda_data_model_hash_get_type">
<description>

</description>
<parameters>
</parameters>
<return> the #GType of GdaDataModelHash.
</return>
</function>

<function name="gda_connection_execute_select_command">
<description>
Executes a selection command on the given connection.

This function returns a #GdaDataModel resulting from the SELECT statement, or %NULL
if an error occurred.

Note that no check is made regarding the actual number of statements in @cmd or if it really contains a SELECT
statement. This function is just a convenience function around the gda_connection_execute_command()
function. If @cmd contains several statements, the last #GdaDataModel is returned.

See the documentation of the gda_connection_execute_command() for information
about the @params list of parameters.


</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection object.
</parameter_description>
</parameter>
<parameter name="cmd">
<parameter_description> a #GdaCommand.
</parameter_description>
</parameter>
<parameter name="params">
<parameter_description> parameter list for the command
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store an error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GdaDataModel containing the data returned by the
data source, or %NULL if an error occurred
</return>
</function>

<function name="gda_data_model_index_get_primary_key">
<description>

</description>
<parameters>
<parameter name="dmi">
<parameter_description> a @GdaDataModelIndex.
</parameter_description>
</parameter>
</parameters>
<return> TRUE if primary key.
</return>
</function>

<function name="gda_command_get_command_type">
<description>
Gets the command type of @cmd.


</description>
<parameters>
<parameter name="cmd">
<parameter_description> a #GdaCommand.
</parameter_description>
</parameter>
</parameters>
<return> the command type of @cmd.
</return>
</function>

<function name="gda_parameter_list_new_inline">
<description>
Creates a new #GdaParameterList containing parameters defined by each serie in @...
For each triplet, the value must be of the correct type (gchar * if type is G_STRING, ...)


</description>
<parameters>
<parameter name="dict">
<parameter_description> a #GdaDict object, or %NULL
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> a serie of a (const gchar*) name, (GType) type, and value, terminated by a %NULL
</parameter_description>
</parameter>
</parameters>
<return> a new #GdaParameterList object
</return>
</function>

<function name="gda_query_field_value_get_parameter_index">
<description>
Get the index of @field in the query it belongs, among all the parameters.


</description>
<parameters>
<parameter name="field">
<parameter_description> a #GdaQueryFieldValue object
</parameter_description>
</parameter>
</parameters>
<return> the index (starting at 1), or -1 if @field is not a parameter field.
</return>
</function>

<function name="gda_query_field_value_restrict">
<description>
Restricts the possible values which @field can have among the calues stored in
@model at column @col.


</description>
<parameters>
<parameter name="field">
<parameter_description> a #GdaQueryFieldValue object
</parameter_description>
</parameter>
<parameter name="model">
<parameter_description> a #GdaDataModel object
</parameter_description>
</parameter>
<parameter name="col">
<parameter_description> a valid column in @model
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_column_get_table">
<description>

</description>
<parameters>
<parameter name="column">
<parameter_description> a #GdaColumn.
</parameter_description>
</parameter>
</parameters>
<return> the name of the table to which this column belongs.
</return>
</function>

<function name="gda_dict_field_new">
<description>
Creates a new GdaDictField object


</description>
<parameters>
<parameter name="dict">
<parameter_description> a #GdaDict object
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description>  a #GdaDictType object (the field&apos;s type)
</parameter_description>
</parameter>
</parameters>
<return> the new object
</return>
</function>

<function name="gda_query_get_fields_by_target">
<description>
Get a list of all the #GdaQueryField objects in @query which depent on the existance of 
@target.


</description>
<parameters>
<parameter name="query">
<parameter_description> a #GdaQuery object
</parameter_description>
</parameter>
<parameter name="target">
<parameter_description> a #GdaQueryTarget object representing a target in @query
</parameter_description>
</parameter>
</parameters>
<return> a new list of #GdaQueryField objects
</return>
</function>

<function name="gda_query_field_set_internal">
<description>
Sets weather @qfield is internal or not. Internal fields in a query are fields added
or changed by libgnomedb itself, such fields may or may not be visible.

</description>
<parameters>
<parameter name="qfield">
<parameter_description> a #GdaQueryField object
</parameter_description>
</parameter>
<parameter name="internal">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_dict_database_get_all_fk_constraints">
<description>
Get a list of all the constraints applied to the database which represent a foreign constrains. 
Constraints are represented as #GdaDictConstraint objects.


</description>
<parameters>
<parameter name="db">
<parameter_description> a #GdaDictDatabase object
</parameter_description>
</parameter>
</parameters>
<return> a new list of the constraints
</return>
</function>

<function name="gda_column_index_set_defined_size">
<description>
Sets the defined size of a #GdaColumnIndex.

</description>
<parameters>
<parameter name="dmcia">
<parameter_description> a #GdaColumnIndex.
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the defined size we want to set.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_object_set_owner">
<description>
Sets the owner of the GdaObject object. If the owner is changed, then the 
&quot;owner_changed&quot; signal is emitted.


</description>
<parameters>
<parameter name="gdaobj">
<parameter_description> a #GdaObject object
</parameter_description>
</parameter>
<parameter name="owner">
<parameter_description> 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_query_get_sql_text">
<description>
Obtain a new string representing the SQL version of the query.

WARNING: the returned SQL statement may contain some extensions which allow for the definition of
variables (see the introduction to the #GdaQuery for more information). As such the returned SQL cannot
be executed as it may provoque errors. To get an executable statement, use the #GdaRenderer interface&apos;s
methods.


</description>
<parameters>
<parameter name="query">
<parameter_description> a #GdaQuery object
</parameter_description>
</parameter>
</parameters>
<return> the new string
</return>
</function>

<function name="gda_dict_database_get_all_constraints">
<description>
Get a list of all the constraints applied to the database. Constraints are represented
as #GdaDictConstraint objects and represent any type of constraint.


</description>
<parameters>
<parameter name="db">
<parameter_description> a #GdaDictDatabase object
</parameter_description>
</parameter>
</parameters>
<return> a new list of the constraints
</return>
</function>

<function name="gda_config_get_type">
<description>
Gets a string representing the type of the value of the given key.
The caller is responsible of freeing the returned value.


</description>
<parameters>
<parameter name="path">
<parameter_description> path to the configuration key.
</parameter_description>
</parameter>
</parameters>
<return> %NULL if not found. Otherwise: &quot;string&quot;, &quot;float&quot;, &quot;long&quot;, &quot;bool&quot;.
</return>
</function>

<function name="gda_client_find_connection">
<description>
Looks for an open connection given a data source name (per libgda
configuration), a username and a password.

This function iterates over the list of open connections in the
given #GdaClient and looks for one that matches the given data source
name, username and password.


</description>
<parameters>
<parameter name="client">
<parameter_description> a #GdaClient object.
</parameter_description>
</parameter>
<parameter name="dsn">
<parameter_description> data source name.
</parameter_description>
</parameter>
<parameter name="username">
<parameter_description> user name.
</parameter_description>
</parameter>
<parameter name="password">
<parameter_description> password for @username.
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the found connection, or %NULL if it could not
be found.
</return>
</function>

<function name="gda_g_type_from_string">
<description>

</description>
<parameters>
<parameter name="str">
<parameter_description> the name of a #GType, as returned by gda_g_type_to_string().
</parameter_description>
</parameter>
</parameters>
<return> the #GType represented by the given @str.
</return>
</function>

<function name="gda_query_get_targets">
<description>
Get a list of all the targets used in @query


</description>
<parameters>
<parameter name="query">
<parameter_description> a #GdaQuery object
</parameter_description>
</parameter>
</parameters>
<return> a new list of the targets
</return>
</function>

<function name="gda_data_model_index_get_column_index_list">
<description>

</description>
<parameters>
<parameter name="dmi">
<parameter_description> a #GdaDataModelIndex.
</parameter_description>
</parameter>
</parameters>
<return> @dmi&apos;s list of #GdaColumnIndex.
</return>
</function>

<function name="gda_column_index_equal">
<description>
Tests whether two field attributes are equal.


</description>
<parameters>
<parameter name="lhs">
<parameter_description> a #GdaColumnIndex
</parameter_description>
</parameter>
<parameter name="rhs">
<parameter_description> another #GdaColumnIndex
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the field attributes contain the same information.
</return>
</function>

<function name="gda_query_field_func_get_ref_func">
<description>
Get the name of the function which @func represents


</description>
<parameters>
<parameter name="func">
<parameter_description> a #GdaQueryFieldFunc object
</parameter_description>
</parameter>
</parameters>
<return> the function name
</return>
</function>

<function name="gda_data_model_get_attributes_at">
<description>
Get the attributes of the value stored at (row, col) in @proxy, which
is an ORed value of #GdaValueAttribute flags. As a special case, if
@row is -1, then the attributes returned correspond to a &quot;would be&quot; value
if a row was added to @model.


</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModel object
</parameter_description>
</parameter>
<parameter name="col">
<parameter_description> a valid column number
</parameter_description>
</parameter>
<parameter name="row">
<parameter_description> a valid row number, or -1
</parameter_description>
</parameter>
</parameters>
<return> the attributes as an ORed value of #GdaValueAttribute
</return>
</function>

<function name="gda_server_provider_open_connection">
<description>
Tries to open a new connection on the given #GdaServerProvider
object.


</description>
<parameters>
<parameter name="provider">
<parameter_description> a #GdaServerProvider object.
</parameter_description>
</parameter>
<parameter name="cnc">
<parameter_description> a #GdaConnection object.
</parameter_description>
</parameter>
<parameter name="params">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="username">
<parameter_description> user name for logging in.
</parameter_description>
</parameter>
<parameter name="password">
<parameter_description> password for authentication.
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated #GdaServerConnection object, or NULL
if it fails.
</return>
</function>

<function name="gda_connection_get_provider">
<description>
Gets the provider id that this connection is connected to.


</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection object.
</parameter_description>
</parameter>
</parameters>
<return> the provider ID used to open this connection.
</return>
</function>

<function name="gda_parameter_list_is_valid">
<description>
Tells if all the paramlist&apos;s parameters have valid data


</description>
<parameters>
<parameter name="paramlist">
<parameter_description> a #GdaParameterList object
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the paramlist is valid
</return>
</function>

<function name="gda_config_get_provider_model">
<description>
Fills and returns a new #GdaDataModel object using information from all 
providers which are currently installed in the system.

Rows are separated in 3 columns: 
&apos;Id&apos;, &apos;Location&apos; and &apos;Description&apos;. 


</description>
<parameters>
</parameters>
<return> a new #GdaDataModel object. 
</return>
</function>

<function name="gda_connection_event_set_sqlstate">
<description>
Sets @event&apos;s SQL state.

</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdaConnectionEvent.
</parameter_description>
</parameter>
<parameter name="sqlstate">
<parameter_description> SQL state.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_query_condition_set_cond_type">
<description>
Sets the kind of condition @condition represents. If @type implies a node condition and
@condition currently represents a leaf, or if @type implies a leaf condition and
@condition currently represents a node, then @condition is changed without any error.

</description>
<parameters>
<parameter name="condition">
<parameter_description> a #GdaQueryCondition object
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_client_rollback_transaction">
<description>
Cancels a running transaction on all connections being managed by the given
#GdaClient. It is important to note that this operates on all
connections opened within a #GdaClient, which could not be what
you&apos;re looking for.

To execute a transaction on a unique connection, use
#gda_connection_begin_transaction, #gda_connection_commit_transaction
and #gda_connection_rollback_transaction.


</description>
<parameters>
<parameter name="client">
<parameter_description> a #GdaClient object.
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the transation to rollback
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if all transactions could be cancelled successfully,
or %FALSE if one of them fails.
</return>
</function>

<function name="gda_connection_event_get_code">
<description>

</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdaConnectionEvent.
</parameter_description>
</parameter>
</parameters>
<return> @event&apos;s code (the code is specific to the provider being used)
</return>
</function>

<function name="gda_parameter_bind_to_param">
<description>
Sets @param to change when @bind_to changes (and does not make @bind_to change when @param changes)

</description>
<parameters>
<parameter name="param">
<parameter_description> a #GdaParameter
</parameter_description>
</parameter>
<parameter name="bind_to">
<parameter_description> a #GdaParameter or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_server_provider_test_schema_model">
<description>
Test that the structure of @model is correct in regard with @schema


</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModel to test
</parameter_description>
</parameter>
<parameter name="schema">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @model has the correct structure
</return>
</function>

<function name="gda_query_condition_get_children">
<description>
Get a list of #GdaQueryCondition objects which are children of @condition


</description>
<parameters>
<parameter name="condition">
<parameter_description> a #GdaQueryCondition object
</parameter_description>
</parameter>
</parameters>
<return> a new list of #GdaQueryCondition objects
</return>
</function>

<function name="gda_graph_add_item">
<description>
Adds @item to @graph.

</description>
<parameters>
<parameter name="graph">
<parameter_description> a #GdaGraph object
</parameter_description>
</parameter>
<parameter name="item">
<parameter_description> a #GdaGraphItem object
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_connection_get_provider_obj">
<description>
Get a pointer to the #GdaServerProvider object used to access the database


</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection object
</parameter_description>
</parameter>
</parameters>
<return> the #GdaServerProvider (NEVER NULL)
</return>
</function>

<function name="gda_query_join_new_with_xml_ids">
<description>
Creates a new GdaQueryJoin object. Note: the #GdaQueryTarget ranks (1st and 2nd) does not matter, but
is necessary since the join may not be symetrical (LEFT or RIGHT join). Also, the #GdaQueryJoin object
may decide to swap the two if necessary.


</description>
<parameters>
<parameter name="query">
<parameter_description> a #GdaQuery object in which the join will occur
</parameter_description>
</parameter>
<parameter name="target_1_xml_id">
<parameter_description> the 1st #GdaQueryTarget object&apos;s XML id participating in the join
</parameter_description>
</parameter>
<parameter name="target_2_xml_id">
<parameter_description> the 2nd #GdaQueryTarget object&apos;s XML id participating in the join
</parameter_description>
</parameter>
</parameters>
<return> the new object
</return>
</function>

<function name="gda_entity_get_field_index">
<description>
Get the position of the field in the given entity. Positions start at 0.
@field MUST be a visible field.


</description>
<parameters>
<parameter name="iface">
<parameter_description> an object implementing the #GdaEntity interface
</parameter_description>
</parameter>
<parameter name="field">
<parameter_description> an object implementing the #GdaEntityField interface
</parameter_description>
</parameter>
</parameters>
<return> the position or -1 if the field is not in the entity or is not visible
</return>
</function>

<function name="gda_query_get_query_type_string">
<description>
Get the type of a query as a human readable string


</description>
<parameters>
<parameter name="query">
<parameter_description> a #GdaQuery object
</parameter_description>
</parameter>
</parameters>
<return> a string for the type of @query
</return>
</function>

<function name="gda_query_target_get_query">
<description>
Get the #GdaQuery in which @target is


</description>
<parameters>
<parameter name="target">
<parameter_description> a #GdaQueryTarget object
</parameter_description>
</parameter>
</parameters>
<return> the #GdaQuery object
</return>
</function>

<function name="gda_row_get_value">
<description>
Gets a pointer to a #GValue stored in a #GdaRow.

This is a pointer to the internal array of values. Don&apos;t try to free
or modify it!


</description>
<parameters>
<parameter name="row">
<parameter_description> a #GdaRow
</parameter_description>
</parameter>
<parameter name="num">
<parameter_description> field index.
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the #GValue in the position @num of @row.
</return>
</function>

<function name="gda_query_field_get_dict_type">
<description>
Get the #GdaDictType represented by the @qfield object: for a function it returns
the return type, for a value, it returns its type, etc.


</description>
<parameters>
<parameter name="qfield">
<parameter_description> a #GdaQueryField object
</parameter_description>
</parameter>
</parameters>
<return> the data type, or %NULL if @qfield does not have a data type.
</return>
</function>

<function name="gda_object_ref_activate">
<description>
Tries to &quot;activate&quot; a reference (to find the referenced object). Nothing happens if
the object is already activated


</description>
<parameters>
<parameter name="ref">
<parameter_description> a #GdaObjectRef object
</parameter_description>
</parameter>
</parameters>
<return> TRUE on success
</return>
</function>

<function name="gda_data_proxy_apply_all_changes">
<description>
Apply all the changes stored in the proxy to the proxied data model. The changes are done row
after row, and if an error
occurs, then it is possible that not all the changes to all the rows have been applied.


</description>
<parameters>
<parameter name="proxy">
<parameter_description> a #GdaDataProxy object
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_server_provider_supports_feature">
<description>

</description>
<parameters>
<parameter name="provider">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="cnc">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="feature">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return>
</return>
</function>

<function name="gda_utility_table_field_attrs_parse">
<description>

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gda_dict_function_get_ret_dict_type">
<description>
To consult the return type of a function.


</description>
<parameters>
<parameter name="func">
<parameter_description> a #GdaDictFunction object
</parameter_description>
</parameter>
</parameters>
<return> a #GdaDictType object.
</return>
</function>

<function name="gda_connection_event_set_event_type">
<description>
Sets @event&apos;s severity (from a simple notice to a fatal event)

</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdaConnectionEvent object
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> the severity of the event
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_parameter_list_get_length">
<description>
Get the number of #GdaParameter objects in @paramlist


</description>
<parameters>
<parameter name="paramlist">
<parameter_description> a #GdaParameterList object
</parameter_description>
</parameter>
</parameters>
<return>
</return>
</function>

<function name="gda_server_provider_get_info">
<description>
Retreive some information specific to the provider. The returned #GdaServerProviderInfo
structure must not be modified


</description>
<parameters>
<parameter name="provider">
<parameter_description> a #GdaServerProvider object.
</parameter_description>
</parameter>
<parameter name="cnc">
<parameter_description> a #GdaConnection, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GdaServerProviderInfo pointer or %NULL if an error occurred
</return>
</function>

<function name="gda_dict_constraint_non_null_set_field">
<description>

</description>
<parameters>
<parameter name="cstr">
<parameter_description> a #GdaDictConstraint object
</parameter_description>
</parameter>
<parameter name="field">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_graph_item_get_position">
<description>
Get @item&apos;s position.

</description>
<parameters>
<parameter name="item">
<parameter_description> a #GdaGraphItemItem object
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> a place where to store the X part of the position, or %NULL
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> a place where to store the Y part of the position, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_data_model_query_set_modification_query">
<description>
Sets the modification query to be used by @model to actually perform any change
to the dataset in the database.

The provided query (the @query SQL) must be either a INSERT, UPDATE or DELETE query. It can contain
parameters, and the parameters named &apos;[+-]&amp;lt;num&amp;gt;&apos; will be replaced when the query is run:
&amp;lt;itemizedlist&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;a parameter named +&amp;lt;num&amp;gt; will take the new value set at the 
&amp;lt;num&amp;gt;th column in @model&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;a parameter named -&amp;lt;num&amp;gt; will take the old value set at the
&amp;lt;num&amp;gt;th column in @model&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;/itemizedlist&amp;gt;
Please note that the &quot;+0&quot; and &quot;-0&quot; parameters names are valid and will respectively 
take the new and old values of the first column of @model.

Examples of queries are: &quot;INSERT INTO orders (customer, creation_date, delivery_before, delivery_date) VALUES (## / *name:&apos;Customer&apos; type:integer* /, date(&apos;now&apos;), ## / *name:&quot;+2&quot; type:date nullok:TRUE * /, NULL)&quot;, &quot;DELETE FROM orders WHERE id = ## / *name:&quot;-0&quot; type:integer* /&quot; and &quot;UPDATE orders set id=## / *name:&quot;+0&quot; type:integer* /, delivery_before=## / *name:&quot;+2&quot; type:date nullok:TRUE* /, delivery_date=## / *name:&quot;+3&quot; type:date nullok:TRUE* / WHERE id=## / *name:&quot;-0&quot; type:integer* /&quot;


</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModelQuery data model
</parameter_description>
</parameter>
<parameter name="query">
<parameter_description> the SQL code for a query
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred.
</return>
</function>

<function name="gda_string_to_binary">
<description>
Performs the reverse of gda_binary_to_string().


</description>
<parameters>
<parameter name="str">
<parameter_description> a string to convert
</parameter_description>
</parameter>
<parameter name="bin">
<parameter_description> a non filled @GdaBinary structure
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error were found in @str, or FALSE otherwise
</return>
</function>

<function name="gda_object_ref_get_ref_object_name">
<description>
Get the name (as returned by gda_object_get_name()) of the last object referenced


</description>
<parameters>
<parameter name="ref">
<parameter_description> a #GdaObjectRef object
</parameter_description>
</parameter>
</parameters>
<return> the name of the object (to be interpreted with @type)
</return>
</function>

<function name="gda_dict_database_get_table_by_name">
<description>
Get a reference to a GdaDictTable using its name.


</description>
<parameters>
<parameter name="db">
<parameter_description> a #GdaDictDatabase object
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the requested table
</parameter_description>
</parameter>
</parameters>
<return> The GdaDictTable pointer or NULL if the requested table does not exist.
</return>
</function>

<function name="gda_xml_storage_save_to_xml">
<description>
Creates a new xmlNodePtr structure and fills it with data representing the
object given as argument.


</description>
<parameters>
<parameter name="iface">
<parameter_description> an object which implements the #GdaXmlStorage interface
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the new XML node, or NULL if an error occurred.
</return>
</function>

<function name="gda_parameter_get_alphanum_name">
<description>
Get a new string containing a &quot;clean&quot; version of @param&apos;s name: chars which
are not among [0-9A-Za-z] are replaced with &apos;_&apos;.


</description>
<parameters>
<parameter name="param">
<parameter_description> a #GdaParameter object
</parameter_description>
</parameter>
</parameters>
<return> a new string
</return>
</function>

<function name="gda_query_declare_condition">
<description>
Declares the existence of a new condition to @query. All the #GdaQueryCondition objects MUST
be declared to the corresponding #GdaQuery object for the library to work correctly.
Once @cond has been declared, @query does not hold any reference to @cond.

This functions is called automatically from each gda_query_condition_new* function, and it should not be necessary 
to call it except for classes extending the #GdaQueryCondition class.

</description>
<parameters>
<parameter name="query">
<parameter_description> a #GdaQuery object
</parameter_description>
</parameter>
<parameter name="cond">
<parameter_description> a #GdaQueryCondition object
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_dict_field_get_scale">
<description>
Get the scale of a field.


</description>
<parameters>
<parameter name="field">
<parameter_description> a #GdaDictField  object
</parameter_description>
</parameter>
</parameters>
<return> the size of the corresponding data type has a fixed size, or -1
</return>
</function>

<function name="gda_query_new_copy">
<description>
Copy constructor


</description>
<parameters>
<parameter name="orig">
<parameter_description> a #GdaQuery to make a copy of
</parameter_description>
</parameter>
<parameter name="replacements">
<parameter_description> a hash table to store replacements, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a the new copy of @orig
</return>
</function>

<function name="gda_query_field_set_visible">
<description>
Sets the visibility of @qfield. A visible field will appear in the query&apos;s 
corresponding (virtual) entity, whereas a non visible one will be hidden (and
possibly not taking part in the query).

</description>
<parameters>
<parameter name="qfield">
<parameter_description> a #GdaQueryField object
</parameter_description>
</parameter>
<parameter name="visible">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_data_model_get_n_columns">
<description>

</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModel object.
</parameter_description>
</parameter>
</parameters>
<return> the number of columns in the given data model.
</return>
</function>

<function name="gda_column_get_g_type">
<description>

</description>
<parameters>
<parameter name="column">
<parameter_description> a #GdaColumn.
</parameter_description>
</parameter>
</parameters>
<return> the type of @column.
</return>
</function>

<function name="gda_dict_aggregate_get_dbms_id">
<description>
Get the DBMS identifier of the aggregate


</description>
<parameters>
<parameter name="agg">
<parameter_description> a #GdaDictAggregate object
</parameter_description>
</parameter>
</parameters>
<return> the aggregate&apos;s id
</return>
</function>

<function name="gda_dict_get_function_by_dbms_id">
<description>
To find a DBMS functions which is uniquely identified by its name and the type
of its argument.


</description>
<parameters>
<parameter name="dict">
<parameter_description> a #GdaDict object
</parameter_description>
</parameter>
<parameter name="dbms_id">
<parameter_description> 
</parameter_description>
</parameter>
</parameters>
<return> The function or NULL if not found
</return>
</function>

<function name="gda_connection_event_list_free">
<description>
Frees all event objects in the list and the list itself.
After this function has been called, the @events parameter doesn&apos;t point
to valid storage any more.

</description>
<parameters>
<parameter name="events">
<parameter_description> a GList holding event objects.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_data_model_get_value_at_col_name">
<description>
Retrieves the data stored in the given position (identified by
the @col_name column and @row parameters) on a data model.

See also gda_data_model_get_value_at().


</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModel object.
</parameter_description>
</parameter>
<parameter name="column_name">
<parameter_description> a valid column name.
</parameter_description>
</parameter>
<parameter name="row">
<parameter_description> a valid row number.
</parameter_description>
</parameter>
</parameters>
<return> a #GValue containing the value stored in the given
position, or %NULL on error (out-of-bound position, etc).
</return>
</function>

<function name="gda_query_get_param_sources">
<description>
Get a list of the parameter source queries that are references as such by @query.


</description>
<parameters>
<parameter name="query">
<parameter_description> a #GdaQuery object
</parameter_description>
</parameter>
</parameters>
<return> the list of #GdaQuery objects
</return>
</function>

<function name="gda_dict_new">
<description>
Create a new #GdaDict object.


</description>
<parameters>
</parameters>
<return> the newly created object.
</return>
</function>

<function name="gda_object_get_description">
<description>
Fetch the description of the GdaObject object.


</description>
<parameters>
<parameter name="gdaobj">
<parameter_description> a #GdaObject object
</parameter_description>
</parameter>
</parameters>
<return> the object&apos;s description.
</return>
</function>

<function name="gda_value_compare">
<description>
Compares two values of the same type.


</description>
<parameters>
<parameter name="value1">
<parameter_description> a #GValue to compare.
</parameter_description>
</parameter>
<parameter name="value2">
<parameter_description> the other #GValue to be compared to @value1.
</parameter_description>
</parameter>
</parameters>
<return> if both values have the same type, returns 0 if both contain
the same value, an integer less than 0 if @value1 is less than @value2 or
an integer greater than 0 if @value1 is greater than @value2.
</return>
</function>

<function name="gda_object_ref_new_no_ref_count">
<description>
Creates a new GdaObjectRef object. This #GdaObjectRef object does not
itself increase the reference count of the object it keeps a reference to,
which means that if all the reference count holders call g_object_unref()
on there referenced object, then that object will actually be destroyed
and a &quot;ref_lost&quot; signal will be emitted. Use gda_object_ref_new() if you want to
increase the count of the referenced object.


</description>
<parameters>
<parameter name="dict">
<parameter_description> a #GdaDict object
</parameter_description>
</parameter>
</parameters>
<return> the new object
</return>
</function>

<function name="gda_data_source_info_copy">
<description>
Creates a new #GdaDataSourceInfo structure from an existing one.


</description>
<parameters>
<parameter name="src">
<parameter_description> data source information to get a copy from.
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated #GdaDataSourceInfo with contains a copy of 
information in @src.
</return>
</function>

<function name="gda_blob_op_read_all">
<description>
Reads the whole contents of the blob manipulated by @op into @blob


</description>
<parameters>
<parameter name="op">
<parameter_description> a #GdaBlobOp
</parameter_description>
</parameter>
<parameter name="blob">
<parameter_description> a #GdaBlob to read data to
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @blob-&amp;gt;data contains the whole BLOB manipulated by @op
</return>
</function>

<function name="gda_column_set_references">
<description>
Sets @column&apos;s @references.

</description>
<parameters>
<parameter name="column">
<parameter_description> a #GdaColumn.
</parameter_description>
</parameter>
<parameter name="ref">
<parameter_description> references.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_query_target_get_represented_table_name">
<description>
Get the table name represented by @target


</description>
<parameters>
<parameter name="target">
<parameter_description> a #GdaQueryTarget object
</parameter_description>
</parameter>
</parameters>
<return> the table name or NULL if @target does not represent a database table
</return>
</function>

<function name="gda_dict_field_get_length">
<description>
Get the length of a field.


</description>
<parameters>
<parameter name="field">
<parameter_description> a #GdaDictField  object
</parameter_description>
</parameter>
</parameters>
<return> the size of the corresponding data type has a fixed size, or -1
</return>
</function>

<function name="gda_query_condition_represents_join_strict">
<description>
Tells if @condition represents a strict join condition: it is a join condition as defined for the 
gda_query_condition_represents_join() method, but where the condition is either &quot;target1.field1=target2.field2&quot;
or a list of such conditions conjuncted by the AND operator.

If @condition is not a join condition, then @target1 and @target2 are left
untouched.


</description>
<parameters>
<parameter name="condition">
<parameter_description> a #GdaQueryCondition object
</parameter_description>
</parameter>
<parameter name="target1">
<parameter_description> place to store one of the targets, or %NULL
</parameter_description>
</parameter>
<parameter name="target2">
<parameter_description> place to store the other target, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @condition is a strict join condition
</return>
</function>

<function name="gda_client_notify_event">
<description>
Notifies an event to the given #GdaClient&apos;s listeners. The event can be
anything (see #GdaClientEvent) ranging from a connection opening
operation, to changes made to a table in an underlying database.

</description>
<parameters>
<parameter name="client">
<parameter_description> a #GdaClient object.
</parameter_description>
</parameter>
<parameter name="cnc">
<parameter_description> a #GdaConnection object where the event has occurred.
</parameter_description>
</parameter>
<parameter name="event">
<parameter_description> event ID.
</parameter_description>
</parameter>
<parameter name="params">
<parameter_description> parameters associated with the event.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_query_get_target_by_xml_id">
<description>
Get a pointer to a #GdaQueryTarget (which must be within @query) using
its XML Id


</description>
<parameters>
<parameter name="query">
<parameter_description> a #GdaQuery object
</parameter_description>
</parameter>
<parameter name="xml_id">
<parameter_description> the XML Id of the requested #GdaQueryTarget object
</parameter_description>
</parameter>
</parameters>
<return> the #GdaQueryTarget object, or NULL if not found
</return>
</function>

<function name="gda_object_block_changed">
<description>
No &quot;changed&quot; signal will be emitted.

</description>
<parameters>
<parameter name="gdaobj">
<parameter_description> a #GdaObject object
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_query_field_value_get_value">
<description>
Get the value stored by @field. If there is no value, but a default value exists, then the
default value is returned.n it&apos;s up to the caller to test if there is a default value for @field.
The default value can be of a different type than the one expected by @field.


</description>
<parameters>
<parameter name="field">
<parameter_description> a #GdaQueryFieldValue object
</parameter_description>
</parameter>
</parameters>
<return> the value or NULL
</return>
</function>

<function name="gda_server_provider_get_last_insert_id">
<description>
Retrieve from the given #GdaServerProvider the ID of the last inserted row.
A connection must be specified, and, optionally, a result set. If not NULL,
the provider should try to get the last insert ID for the given result set.


</description>
<parameters>
<parameter name="provider">
<parameter_description> a #GdaServerProvider object.
</parameter_description>
</parameter>
<parameter name="cnc">
<parameter_description> connection to act upon.
</parameter_description>
</parameter>
<parameter name="recset">
<parameter_description> resultset to get the last insert ID from.
</parameter_description>
</parameter>
</parameters>
<return> a string representing the ID of the last inserted row, or NULL
if an error occurred or no row has been inserted. It is the caller&apos;s
reponsibility to free the returned string.
</return>
</function>

<function name="gda_dict_table_new">
<description>
Creates a new GdaDictTable object


</description>
<parameters>
<parameter name="dict">
<parameter_description> a #GdaDict object
</parameter_description>
</parameter>
</parameters>
<return> the new object
</return>
</function>

<function name="gda_server_provider_unescape_string">
<description>
Unescapes @str for use within an SQL command. This is the exact opposite of gda_server_provider_escape_string().


</description>
<parameters>
<parameter name="provider">
<parameter_description> a server provider.
</parameter_description>
</parameter>
<parameter name="cnc">
<parameter_description> a #GdaConnection object, or %NULL
</parameter_description>
</parameter>
<parameter name="str">
<parameter_description> a string to escape
</parameter_description>
</parameter>
</parameters>
<return> a new string
</return>
</function>

<function name="gda_config_get_provider_by_name">
<description>
Gets a #GdaProviderInfo structure from the provider list given its name,
don&apos;t modify or free it.


</description>
<parameters>
<parameter name="name">
<parameter_description> name of the provider to search for.
</parameter_description>
</parameter>
</parameters>
<return> a #GdaProviderInfo structure, if found, or %NULL if not found.
</return>
</function>

<function name="gda_dict_assume_object_as">
<description>
Same as gda_dict_assume_object() but forces to use the @as_type type instead of
@object&apos;s realtype

</description>
<parameters>
<parameter name="dict">
<parameter_description> a #GdaDict object
</parameter_description>
</parameter>
<parameter name="object">
<parameter_description> a #GdaObject object
</parameter_description>
</parameter>
<parameter name="as_type">
<parameter_description> parent type of @object to take into account
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="Get">
<description>

</description>
<parameters>
</parameters>
<return> a pointer to the requested query field, or %NULL if it was not found
</return>
</function>

<function name="gda_client_notify_connection_closed_event">
<description>
Notifies the given #GdaClient of the #GDA_CLIENT_EVENT_CONNECTION_CLOSED 
event.

</description>
<parameters>
<parameter name="client">
<parameter_description> a #GdaClient object.
</parameter_description>
</parameter>
<parameter name="cnc">
<parameter_description> a #GdaConnection object.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_dict_function_set_dbms_id">
<description>
Set the DBMS identifier of the function

</description>
<parameters>
<parameter name="func">
<parameter_description> a #GdaDictFunction object
</parameter_description>
</parameter>
<parameter name="id">
<parameter_description> the DBMS identifier
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_server_operation_del_node_from_sequence">
<description>

</description>
<parameters>
<parameter name="op">
<parameter_description> a #GdaServerOperation object
</parameter_description>
</parameter>
<parameter name="item_path">
<parameter_description> the path to the sequence&apos;s item to remove (like &quot;/SEQ_NAME/5&quot; for instance)
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the specified node has been removed from the sequence
</return>
</function>

<function name="gda_dict_type_new">
<description>
Creates a new GdaDictType object which represent a data type defined in a data dictionary


</description>
<parameters>
<parameter name="dict">
<parameter_description> a #GdaDict object, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the new object
</return>
</function>

<function name="gda_quark_list_add_from_string">
<description>
Adds new key-&amp;gt;value pairs from the given @string. If @cleanup is
set to %TRUE, the previous contents will be discarded before adding
the new pairs.

</description>
<parameters>
<parameter name="qlist">
<parameter_description> a #GdaQuarkList.
</parameter_description>
</parameter>
<parameter name="string">
<parameter_description> a connection string.
</parameter_description>
</parameter>
<parameter name="cleanup">
<parameter_description> whether to cleanup the previous content or not.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_delimiter_destroy">
<description>
Free up a GdaDelimiterStatement.

</description>
<parameters>
<parameter name="statement">
<parameter_description> Sql statement
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_client_perform_drop_database">
<description>
Destroys an existing database using the specifications in @op,  which must have been obtained using
gda_client_prepare_drop_database ()


</description>
<parameters>
<parameter name="client">
<parameter_description> a #GdaClient object.
</parameter_description>
</parameter>
<parameter name="op">
<parameter_description> a #GdaServerOperation object obtained using gda_client_prepare_drop_database()
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store en error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred and the database has been destroyed
</return>
</function>

<function name="gda_value_set_numeric">
<description>
Stores @val into @value.

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue that will store @val.
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> value to be stored in @value.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_server_provider_execute_query">
<description>
Executes the @query query, and returns:
&amp;lt;itemizedlist&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;A #GdaDataModel if the query was a SELECT statement and the statement was successufully executed&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;A #GdaParameterList if the query was not a SELECT 
query and the query was successufully executed. In this case
(if the provider supports it), then the #GdaParameterList may contain:
&amp;lt;itemizedlist&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;a (gint) #GdaParameter named &quot;IMPACTED_ROWS&quot;&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;a (GObject) #GdaParameter named &quot;EVENT&quot; which contains a GdaConnectionEvent&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;/itemizedlist&amp;gt;
&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;%NULL is in the list if the query could not be executed&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;/itemizedlist&amp;gt;

The differences between this function and gda_server_provider_execute_command() are:
&amp;lt;itemizedlist&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;Only one query can be executed at a time&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;If the database provider supports it, prepared statements can be used&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;Blobs are handled correctly (because blobs are usually not handled using SQL)&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;/itemizedlist&amp;gt;


</description>
<parameters>
<parameter name="provider">
<parameter_description> a #GdaServerProvider object
</parameter_description>
</parameter>
<parameter name="cnc">
<parameter_description> a #GdaConnection object using 
</parameter_description>
</parameter>
<parameter name="query">
<parameter_description> a #GdaQuery 
</parameter_description>
</parameter>
<parameter name="params">
<parameter_description> a #GdaParameterList object obtained using gda_query_get_parameter_list(@query)
</parameter_description>
</parameter>
</parameters>
<return> a new (#GdaDataModel or #GdaParameterList) object, or %NULL
</return>
</function>

<function name="gda_entity_field_get_entity">
<description>
Get a reference to the object implementing the #GdaEntity interface to which
the object implementing the #GdaEntityField is attached to.


</description>
<parameters>
<parameter name="iface">
<parameter_description> an object which implements the #GdaEntityField interface
</parameter_description>
</parameter>
</parameters>
<return> the object implementing the #GdaEntity interface
</return>
</function>

<function name="gda_dict_aggregate_get_sqlname">
<description>
Get the DBMS&apos;s name of a data type.


</description>
<parameters>
<parameter name="agg">
<parameter_description> a #GdaDictAggregate object
</parameter_description>
</parameter>
</parameters>
<return> the name of the data type
</return>
</function>

<function name="gda_graphs_get_graph_for_object">
<description>
Find a #GdaGraph object guiven the object it is related to.


</description>
<parameters>
<parameter name="dict">
<parameter_description> a #GdaDict object
</parameter_description>
</parameter>
<parameter name="obj">
<parameter_description> a #Gobject object
</parameter_description>
</parameter>
</parameters>
<return> the #GdaGraph object, or NULL if not found
</return>
</function>

<function name="gda_query_field_value_get_g_type">
<description>
Get the GDA type of value stored within @field


</description>
<parameters>
<parameter name="field">
<parameter_description> a #GdaQueryFieldValue object
</parameter_description>
</parameter>
</parameters>
<return> the type
</return>
</function>

<function name="gda_config_get_float">
<description>
Gets the value of the specified configuration entry as a float.


</description>
<parameters>
<parameter name="path">
<parameter_description> path to the configuration entry.
</parameter_description>
</parameter>
</parameters>
<return> the value stored at the given entry.
</return>
</function>

<function name="gda_object_ref_get_ref_type">
<description>
Get the type of the referenced object by @ref (or the requested type if @ref is not active)


</description>
<parameters>
<parameter name="ref">
<parameter_description> a #GdaObjectRef object
</parameter_description>
</parameter>
</parameters>
<return> the type
</return>
</function>

<function name="gda_get_default_dict">
<description>
Get the default dictionary.


</description>
<parameters>
</parameters>
<return> a not %NULL pointer to the default #GdaDict dictionary
</return>
</function>

<function name="gda_data_model_move_iter_next">
<description>
Sets @iter to the next available row in @model. @iter must be a valid iterator object obtained
using the gda_data_model_create_iter() method.


</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModel object.
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> a #GdaDataModelIter object
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_graph_get_item_from_obj">
<description>
Get a pointer to a #GdaGraphItem item from the object is represents.
If the searched #GdaGraphItem is not found and @create_if_needed is TRUE, then a new
#GdaGraphItem is created.


</description>
<parameters>
<parameter name="graph">
<parameter_description> a #GdaGraph object
</parameter_description>
</parameter>
<parameter name="ref_obj">
<parameter_description> the #GdaObject the returned item references
</parameter_description>
</parameter>
<parameter name="create_if_needed">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return> the #GdaGraphItem object, or %NULL if not found
</return>
</function>

<function name="gda_value_set_blob">
<description>
Stores @val into @value.

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue that will store @val.
</parameter_description>
</parameter>
<parameter name="blob">
<parameter_description> a #GdaBlob structure with the data and its size to be stored in @value.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_data_handler_get_descr">
<description>
Get a short description of the GdaDataHandler


</description>
<parameters>
<parameter name="dh">
<parameter_description> an object which implements the #GdaDataHandler interface
</parameter_description>
</parameter>
</parameters>
<return> the description
</return>
</function>

<function name="gda_data_model_iter_get_row">
<description>
Get the row which @iter represents in the data model


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GdaDataModelIter object
</parameter_description>
</parameter>
</parameters>
<return> the row number, or -1 if not available
</return>
</function>

<function name="gda_quark_list_find">
<description>
Searches for the value identified by @name in the given #GdaQuarkList.


</description>
<parameters>
<parameter name="qlist">
<parameter_description> a #GdaQuarkList.
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the value to search for.
</parameter_description>
</parameter>
</parameters>
<return> the value associated with the given key if found, or %NULL
if not found.
</return>
</function>

<function name="gda_data_model_row_removed">
<description>
Emits the &apos;row_removed&apos; and &apos;changed&apos; signal on @model.

</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModel object.
</parameter_description>
</parameter>
<parameter name="row">
<parameter_description> row number.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_client_new">
<description>
Creates a new #GdaClient object, which is the entry point for libgda
client applications. This object, once created, can be used for
opening new database connections and activating other services
available to GDA clients.


</description>
<parameters>
</parameters>
<return> the newly created object.
</return>
</function>

<function name="gda_connection_get_transaction_status">
<description>
Get the status of @cnc regarding transactions. The returned object should not be modified
or destroyed; however it may be modified or destroyed by the connection itself.

If %NULL is returned, then no transaction has been associated with @cnc


</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection object
</parameter_description>
</parameter>
</parameters>
<return> a #GdaTransactionStatus object, or %NULL
</return>
</function>

<function name="gda_value_set_geometric_point">
<description>
Stores @val into @value.

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue that will store @val.
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> value to be stored in @value.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_config_set_float">
<description>
Sets the given configuration entry to contain a float.


</description>
<parameters>
<parameter name="path">
<parameter_description> path to the configuration entry.
</parameter_description>
</parameter>
<parameter name="new_value">
<parameter_description> new value.
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_data_model_get_row_from_values">
<description>
Returns: the requested row number, of -1 if not found

</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModel object.
</parameter_description>
</parameter>
<parameter name="values">
<parameter_description> a list of #GValue values
</parameter_description>
</parameter>
<parameter name="cols_index">
<parameter_description> an array of #gint containing the column number to match each value of @values
</parameter_description>
</parameter>
</parameters>
<return> the requested row number, of -1 if not found
</return>
</function>

<function name="gda_column_index_set_column_name">
<description>
Sets the name of @dmcia to @column_name.

</description>
<parameters>
<parameter name="dmcia">
<parameter_description> a #GdaColumnIndex.
</parameter_description>
</parameter>
<parameter name="column_name">
<parameter_description> the new name of @dmcia.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_column_index_copy">
<description>
Creates a new #GdaColumnIndex object from an existing one.

</description>
<parameters>
<parameter name="dmcia">
<parameter_description> attributes to get a copy from.
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated #GdaColumnIndex with a copy of the data
in @dmcia.
</return>
</function>

<function name="gda_parameter_get_exists_default_value">
<description>

</description>
<parameters>
<parameter name="param">
<parameter_description> a #GdaParameter object
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @param has a default value (which may be unspecified)
</return>
</function>

<function name="gda_server_provider_perform_operation">
<description>
Performs the operation described by @op.


</description>
<parameters>
<parameter name="provider">
<parameter_description> a #GdaServerProvider object
</parameter_description>
</parameter>
<parameter name="cnc">
<parameter_description> a #GdaConnection object which will be used to perform an action
</parameter_description>
</parameter>
<parameter name="op">
<parameter_description> a #GdaServerOperation object
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store an error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_data_access_wrapper_new">
<description>
Creates a new #GdaDataModel object which buffers the rows of @model. This object is usefull
only if @model can only be accessed using cursor based method.


</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModel
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the newly created #GdaDataModel.
</return>
</function>

<function name="gda_data_model_iter_set_at_row">
<description>
Synchronizes the values of the parameters in @iter with the values at the @row row

If @row &amp;lt; 0 then @iter is not bound to any row of the data model it iters through.


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GdaDataModelIter object
</parameter_description>
</parameter>
<parameter name="row">
<parameter_description> the row to set @iter to
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_dict_database_new">
<description>
Creates a new GdaDictDatabase object


</description>
<parameters>
<parameter name="dict">
<parameter_description> a #GdaDict object
</parameter_description>
</parameter>
</parameters>
<return> the new object
</return>
</function>

<function name="gda_data_model_append_row">
<description>
Appends a row to the data model. 


</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModel object.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the number of the added row, or -1 if an error occurred
</return>
</function>

<function name="gda_graph_query_new">
<description>
Creates a new #GdaGraphQuery object. This graph object is a specialized #GdaGraph object
in the way that it always make sure it &quot;contains&quot; #GdaGraphItem objects for each target
in @query.

However, when created, the new #GdaGraphItem object will not contain any graph item; 
but can be brought in sync with the gda_graph_query_sync_targets() method.


</description>
<parameters>
<parameter name="query">
<parameter_description> a #GdaQuery object
</parameter_description>
</parameter>
</parameters>
<return> the newly created object
</return>
</function>

<function name="gda_utility_data_model_dump_data_to_xml">
<description>
Dump the data in a #GdaDataModel into a xmlNodePtr (as used in libxml).

</description>
<parameters>
<parameter name="model">
<parameter_description> 
</parameter_description>
</parameter>
<parameter name="cols">
<parameter_description> an array containing which columns of @model will be exported, or %NULL for all columns
</parameter_description>
</parameter>
<parameter name="nb_cols">
<parameter_description> the number of columns in @cols
</parameter_description>
</parameter>
<parameter name="rows">
<parameter_description> an array containing which rows of @model will be exported, or %NULL for all rows
</parameter_description>
</parameter>
<parameter name="nb_rows">
<parameter_description> the number of rows in @rows
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> name to use for the XML resulting table.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_graph_item_new">
<description>
Creates a new #GdaGraphItem object


</description>
<parameters>
<parameter name="dict">
<parameter_description> a #GdaDict object
</parameter_description>
</parameter>
<parameter name="ref_obj">
<parameter_description> a #GdaObject object which the new item will reference, or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> the newly created object
</return>
</function>

<function name="gda_dict_load_xml_file">
<description>
Loads an XML file which respects the Libgda DTD, and creates all the necessary
objects that are defined within the XML file. During the creation of the other
objects, all the normal signals are emitted.

If the GdaDict object already has some contents, then it is first of all
destroyed (to return its state as when it was first created).

If an error occurs during loading then the GdaDict object is left as empty
as when it is first created.


</description>
<parameters>
<parameter name="dict">
<parameter_description> a #GdaDict object
</parameter_description>
</parameter>
<parameter name="xmlfile">
<parameter_description> the name of the file to which the XML will be written to
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if loading was successfull and FALSE otherwise.
</return>
</function>

<function name="gda_data_model_get_access_flags">
<description>
Get the attributes of @model such as how to access the data it contains if it&apos;s modifiable, etc.


</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModel object.
</parameter_description>
</parameter>
</parameters>
<return> an ORed value of #GdaDataModelAccessFlags flags
</return>
</function>

<function name="gda_dict_type_set_sqlname">
<description>
Set the SQL name of the data type.

</description>
<parameters>
<parameter name="dt">
<parameter_description> a #GdaDictType object
</parameter_description>
</parameter>
<parameter name="sqlname">
<parameter_description> 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_default_unescape_string">
<description>
Do the reverse of gda_default_escape_string(): transforms any &quot;\&apos;&quot; into &quot;&apos;&quot; and any
&quot;\\&quot; into &quot;\&quot;. 


</description>
<parameters>
<parameter name="string">
<parameter_description> string to unescape
</parameter_description>
</parameter>
</parameters>
<return> a new unescaped string, or %NULL in an error was found in @string
</return>
</function>

<function name="gda_data_model_iter_new">
<description>
Creates a new GdaDataModelIter object which represents a value or a parameter.


</description>
<parameters>
<parameter name="model">
<parameter_description> Model used to create the #GdaDataModelIter
</parameter_description>
</parameter>
</parameters>
<return> the new object
</return>
</function>

<function name="gda_file_save">
<description>
Saves a chunk of data into a file.


</description>
<parameters>
<parameter name="filename">
<parameter_description> path for the file to be saved.
</parameter_description>
</parameter>
<parameter name="buffer">
<parameter_description> contents of the file.
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> size of @buffer.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful, %FALSE on error.
</return>
</function>

<function name="gda_handler_bin_new">
<description>
Creates a data handler for binary values


</description>
<parameters>
</parameters>
<return> the new object
</return>
</function>

<function name="gda_dict_update_dbms_meta_data">
<description>
Updates the list of data types, functions, tables, etc from the database,
which means that the @dict object uses an opened connection to the DBMS.
Use gda_dict_set_connection() to set a #GdaConnection to @dict.


</description>
<parameters>
<parameter name="dict">
<parameter_description> a #GdaDict object
</parameter_description>
</parameter>
<parameter name="limit_to_type">
<parameter_description> limit the DBMS update to this type, or 0 for no limit
</parameter_description>
</parameter>
<parameter name="limit_obj_name">
<parameter_description> limit the DBMS update to objects of this name, or %NULL for no limit
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error
</return>
</function>

<function name="gda_row_get_model">
<description>
Gets the #GdaDataModel the given #GdaRow belongs to.


</description>
<parameters>
<parameter name="row">
<parameter_description> a #GdaRow.
</parameter_description>
</parameter>
</parameters>
<return> a #GdaDataModel.
</return>
</function>

<function name="gda_value_new_from_string">
<description>
Makes a new #GValue of type @type from its string representation.


</description>
<parameters>
<parameter name="as_string">
<parameter_description> stringified representation of the value.
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> the new value type.
</parameter_description>
</parameter>
</parameters>
<return> the newly created #GValue or %NULL if the string representation
cannot be converted to the specified @type.
</return>
</function>

<function name="gda_default_escape_string">
<description>
Escapes @string to make it understandable by a DBMS. The escape method is very common and replaces any
occurence of &quot;&apos;&quot; with &quot;\&apos;&quot; and &quot;\&quot; with &quot;\\&quot;.

</description>
<parameters>
<parameter name="string">
<parameter_description> string to escape
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_handler_time_set_sql_spec">
<description>
Specifies the SQL output style of the @dh data handler. The general format is &quot;FIRSTsSECsTHIRD&quot;
where FIRST, SEC and THIRD are specified by @first, @sec and @trird and &apos;s&apos; is the separator,
specified by @separator.

The default implementation is FIRST=G_DATE_MONTH, SEC=G_DATE_DAY and THIRD=G_DATE_YEAR (the year is
rendered on 4 digits) and the separator is &apos;-&apos;

</description>
<parameters>
<parameter name="dh">
<parameter_description> a #GdaHandlerTime object
</parameter_description>
</parameter>
<parameter name="first">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="sec">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="third">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="separator">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="twodigits_years">
<parameter_description> TRUE if year part of date must be rendered on 2 digits
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_column_get_position">
<description>

</description>
<parameters>
<parameter name="column">
<parameter_description> a #GdaColumn.
</parameter_description>
</parameter>
</parameters>
<return> the position of the column refer to in the
containing data model.
</return>
</function>

<function name="gda_blob_op_get_length">
<description>
Opens an existing BLOB. The BLOB must be initialized by
#gda_connection_create_blob or obtained from a #GValue.
FIXME: gda_connection_create_blob() no longer exists.


</description>
<parameters>
<parameter name="op">
<parameter_description> an existing #GdaBlobOp
</parameter_description>
</parameter>
</parameters>
<return> the length of the blob in bytes. In case of error, -1 is returned and the
provider should have added an error (a #GdaConnectionEvent) to the connection.
</return>
</function>

<function name="gda_query_field_func_set_args">
<description>
Sets the argument(s) of @func. If @args is %NULL, then
all the arguments (if there was any) are removed.

If @func is not active, then no check on the provided args
is performed.


</description>
<parameters>
<parameter name="func">
<parameter_description> a #GdaQueryFieldFunc object
</parameter_description>
</parameter>
<parameter name="args">
<parameter_description> a list of #GdaQueryField objects
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_main_quit">
<description>
Exits the main loop.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gda_data_model_query_get_type">
<description>

</description>
<parameters>
</parameters>
<return> the #GType of GdaDataModelQuery.
</return>
</function>

<function name="gda_threader_new">
<description>
Creates a new GdaThreader object. This object class is normally not instantiated
directly but through child classes objects&apos; intantiation


</description>
<parameters>
</parameters>
<return> the newly created object
</return>
</function>

<function name="gda_update_value_in_table">
<description>
This is just a convenient function to update values in a table on a given column where
the row is fitting the given condition.

The SQL command is like: UPDATE INTO table_name SET column_name = new_value WHERE search_for_column = condition


</description>
<parameters>
<parameter name="cnn">
<parameter_description> an opened connection
</parameter_description>
</parameter>
<parameter name="table_name">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="search_for_column">
<parameter_description> the name of the column to used in the WHERE condition clause
</parameter_description>
</parameter>
<parameter name="condition">
<parameter_description> a GValue to used to find the value to be updated; it must correspond with the GType
of the column used to search
</parameter_description>
</parameter>
<parameter name="column_name">
<parameter_description> the column containing the value to be updated
</parameter_description>
</parameter>
<parameter name="new_value">
<parameter_description> the new value to update to; the @GValue must correspond with the GType of the column to update
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_parameter_list_is_coherent">
<description>
Checks that @paramlist has a coherent public data structure


</description>
<parameters>
<parameter name="paramlist">
<parameter_description> a #GdaParameterList object
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @paramlist is coherent
</return>
</function>

<function name="gda_dict_field_get_default_value">
<description>
Get the default value for the field if ne exists


</description>
<parameters>
<parameter name="field">
<parameter_description> a #GdaDictField object
</parameter_description>
</parameter>
</parameters>
<return> the default value
</return>
</function>

<function name="gda_data_proxy_has_changed">
<description>
Tells if @proxy contains any modifications not applied to the proxied data model.


</description>
<parameters>
<parameter name="proxy">
<parameter_description> a #GdaDataProxy object
</parameter_description>
</parameter>
</parameters>
<return> TRUE if there are some modifications in @proxy
</return>
</function>

<function name="gda_dict_get_connection">
<description>
Fetch a pointer to the GdaConnection used by the GdaDict object.


</description>
<parameters>
<parameter name="dict">
<parameter_description> a #GdaDict object
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the GdaConnection, if one has been assigned to @dict
</return>
</function>

<function name="gda_column_get_scale">
<description>

</description>
<parameters>
<parameter name="column">
<parameter_description> a #GdaColumn.
</parameter_description>
</parameter>
</parameters>
<return> the number of decimals of @column.
</return>
</function>

<function name="gda_config_get_int">
<description>
Gets the value of the specified configuration entry as an integer.


</description>
<parameters>
<parameter name="path">
<parameter_description> path to the configuration entry.
</parameter_description>
</parameter>
</parameters>
<return> the value stored at the given entry.
</return>
</function>

<function name="gda_utility_build_encoded_id">
<description>
Creates a BASE64 kind encoded string. It&apos;s not really a BASE64 because:
- the characters + and / of BASE64 are replaced with - and _
- no padding is done using the = character

The created string is a valid NCName XML token.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gda_object_ref_replace_ref_object">
<description>
Changes the referenced object with a new one: it looks into @replacements and if the
currently referenced object appears there as a key, then the reference is replaced with
the corresponding value.

Nothing happens if @ref is not active, or if the referenced object is not found in @replacaments.

</description>
<parameters>
<parameter name="ref">
<parameter_description> a #GdaObjectRef object
</parameter_description>
</parameter>
<parameter name="replacements">
<parameter_description> a #GHashTable
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_value_is_null">
<description>
Tests if a given @value is of type #GDA_TYPE_NULL.


</description>
<parameters>
<parameter name="value">
<parameter_description> value to test.
</parameter_description>
</parameter>
</parameters>
<return> a boolean that says whether or not @value is of type
#GDA_TYPE_NULL.
</return>
</function>

<function name="gda_server_provider_get_database">
<description>
Proxy the call to the get_database method on the
#GdaServerProvider class to the corresponding provider.


</description>
<parameters>
<parameter name="provider">
<parameter_description> a #GdaServerProvider object.
</parameter_description>
</parameter>
<parameter name="cnc">
<parameter_description> a #GdaConnection object.
</parameter_description>
</parameter>
</parameters>
<return> the name of the current database.
</return>
</function>

<function name="gda_query_get_join_by_targets">
<description>
Find a join in @query which joins the @target1 and @target2 targets


</description>
<parameters>
<parameter name="query">
<parameter_description> a #GdaQuery object
</parameter_description>
</parameter>
<parameter name="target1">
<parameter_description> a #GdaQueryTarget object
</parameter_description>
</parameter>
<parameter name="target2">
<parameter_description> a #GdaQueryTarget object
</parameter_description>
</parameter>
</parameters>
<return> the #GdaQueryJoin object, or %NULL
</return>
</function>

<function name="gda_data_model_index_get_unique_key">
<description>

</description>
<parameters>
<parameter name="dmi">
<parameter_description> a @GdaDataModelIndex.
</parameter_description>
</parameter>
</parameters>
<return> TRUE if unique key.
</return>
</function>

<function name="gda_dict_declare_object_string_id_change">
<description>
Internal function, not to be used directly.

</description>
<parameters>
<parameter name="dict">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="obj">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="oldid">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_data_proxy_get_sample_end">
<description>
Get the row number of the last row to be displayed.


</description>
<parameters>
<parameter name="proxy">
<parameter_description> a #GdaDataProxy object
</parameter_description>
</parameter>
</parameters>
<return> the number of the last row being displayed.
</return>
</function>

<function name="gda_server_provider_add_savepoint">
<description>

</description>
<parameters>
<parameter name="provider">
<parameter_description> a #GdaServerProvider object
</parameter_description>
</parameter>
<parameter name="cnc">
<parameter_description> a #GdaConnection object
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> name of the savepoint to add
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_query_field_func_new">
<description>
Creates a new GdaQueryFieldFunc object which represents the @func_name function


</description>
<parameters>
<parameter name="query">
<parameter_description> a #GdaQuery in which the new object will be
</parameter_description>
</parameter>
<parameter name="func_name">
<parameter_description> the name of the function to use
</parameter_description>
</parameter>
</parameters>
<return> the new object
</return>
</function>

<function name="gda_dict_save">
<description>
Saves the contents of a GdaDict object to a file which is specified using the
gda_dict_set_xml_filename() method.


</description>
<parameters>
<parameter name="dict">
<parameter_description> a #GdaDict object
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if saving was successfull and FALSE otherwise.
</return>
</function>

<function name="gda_query_target_get_alias">
<description>
Get @target&apos;s alias


</description>
<parameters>
<parameter name="target">
<parameter_description> a #GdaQueryTarget object
</parameter_description>
</parameter>
</parameters>
<return> the alias
</return>
</function>

<function name="gda_dict_function_get_sqlname">
<description>
Get the DBMS&apos;s name of a data type.


</description>
<parameters>
<parameter name="func">
<parameter_description> a #GdaDictFunction object
</parameter_description>
</parameter>
</parameters>
<return> the name of the data type
</return>
</function>

<function name="gda_provider_info_copy">
<description>
Creates a new #GdaProviderInfo structure from an existing one.


</description>
<parameters>
<parameter name="src">
<parameter_description> provider information to get a copy from.
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated #GdaProviderInfo with contains a copy of 
information in @src.
</return>
</function>

<function name="gda_server_provider_commit_transaction">
<description>

</description>
<parameters>
<parameter name="provider">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="cnc">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the transation to commit
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return>
</return>
</function>

<function name="gda_server_operation_new">
<description>
Creates a new #GdaServerOperation object from the @xml_file specifications

The @xml_file must respect the DTD described in the &quot;libgda-server-operation.dtd&quot; file: its top
node must be a &amp;lt;serv_op&amp;gt; tag.


</description>
<parameters>
<parameter name="xml_file">
<parameter_description> a file which has the specifications for the GdaServerOperation object to create
</parameter_description>
</parameter>
</parameters>
<return> a new #GdaServerOperation object
</return>
</function>

<function name="gda_config_remove_section">
<description>
Removes the given section from the configuration database.

</description>
<parameters>
<parameter name="path">
<parameter_description> path to the configuration section.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_data_proxy_delete">
<description>
Marks the row @proxy_row to be deleted

</description>
<parameters>
<parameter name="proxy">
<parameter_description> a #GdaDataProxy object
</parameter_description>
</parameter>
<parameter name="proxy_row">
<parameter_description> A proxy row number
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_connection_add_event">
<description>
Adds an event to the given connection. This function is usually
called by providers, to inform clients of events that happened
during some operation.

As soon as a provider (or a client, it does not matter) calls this
function with an @event object which is an error,
the connection object (and the associated #GdaClient object)
emits the &quot;error&quot; signal, to which clients can connect to be
informed of events.

WARNING: the reference to the @event object is stolen by this function!

</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection object.
</parameter_description>
</parameter>
<parameter name="event">
<parameter_description> is stored internally, so you don&apos;t need to unref it.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_dict_database_get_tables_fk_constraints">
<description>
Get a list of all the constraints applied to the database which represent a foreign key constrains, between
@table1 and @table2. If @table1 or @table2 are %NULL, then the returned foreign key constraints are the ones
between any table and @table1 or @table2.

Constraints are represented as #GdaDictConstraint objects.


</description>
<parameters>
<parameter name="db">
<parameter_description> a #GdaDictDatabase object
</parameter_description>
</parameter>
<parameter name="table1">
<parameter_description> a #GdaDictTable, or %NULL
</parameter_description>
</parameter>
<parameter name="table2">
<parameter_description> a #GdaDictTable, or %NULL
</parameter_description>
</parameter>
<parameter name="table1_has_fk">
<parameter_description> TRUE if the returned constraints are the one for which @table1 contains the foreign key
</parameter_description>
</parameter>
</parameters>
<return> a new list of the constraints
</return>
</function>

<function name="gda_dict_table_is_view">
<description>
Does the object represent a view rather than a table?


</description>
<parameters>
<parameter name="table">
<parameter_description> a #GdaDictTable object
</parameter_description>
</parameter>
</parameters>
<return> TRUE if it is a view
</return>
</function>

<function name="gda_data_model_freeze">
<description>
Disables notifications of changes on the given data model. To
re-enable notifications again, you should call the
#gda_data_model_thaw function.

</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModel object.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_quark_list_remove">
<description>
Removes an entry from the #GdaQuarkList, given its name.

</description>
<parameters>
<parameter name="qlist">
<parameter_description> a #GdaQuarkList structure.
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> an entry name.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_server_provider_close_connection">
<description>

</description>
<parameters>
<parameter name="provider">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="cnc">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return>

</return>
</function>

<function name="gda_connection_event_get_sqlstate">
<description>

</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdaConnectionEvent.
</parameter_description>
</parameter>
</parameters>
<return> @event&apos;s SQL state.
</return>
</function>

<function name="gda_delimiter_parse">
<description>
Generate #GdaDelimiterStatement which is an in memory a structure of the 
@sqlquery in an easy to use way. It basically makes chuncks of string and
identifies required parameters.


</description>
<parameters>
<parameter name="sqlquery">
<parameter_description> A SQL query string. ie SELECT * FROM FOO
</parameter_description>
</parameter>
</parameters>
<return> A generated GdaDelimiterStatement or %NULL on error.
</return>
</function>

<function name="tranerror">
<description>
Internal function for displaying error messages used by the lexer parser.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gda_dict_get_xml_filename">
<description>
Get the filename @dict will use when gda_dict_save_xml() and gda_dict_load_xml() are called.


</description>
<parameters>
<parameter name="dict">
<parameter_description> a #GdaDict object
</parameter_description>
</parameter>
</parameters>
<return> the filename, or %NULL if none have been set.
</return>
</function>

<function name="gda_query_field_new_from_sql">
<description>
Creates a new #GdaQueryField from its SQL representation


</description>
<parameters>
<parameter name="query">
<parameter_description> a #GdaQuery object
</parameter_description>
</parameter>
<parameter name="sqlfield">
<parameter_description> a SQL statement representing a query field
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a new #GdaQueryField object, or %NULL if an error occurred
</return>
</function>

<function name="gda_data_handler_get_g_type_index">
<description>
Get the GType handled by the GdaDataHandler, at the given position (starting at zero).


</description>
<parameters>
<parameter name="dh">
<parameter_description> an object which implements the #GdaDataHandler interface
</parameter_description>
</parameter>
<parameter name="index">
<parameter_description> 
</parameter_description>
</parameter>
</parameters>
<return> the GType
</return>
</function>

<function name="gda_column_copy">
<description>
Creates a new #GdaColumn object from an existing one. 	 

</description>
<parameters>
<parameter name="column">
<parameter_description> column to get a copy from. 	 
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated #GdaColumn with a copy of the data 	 
in @column. 	 
</return>
</function>

<function name="gda_config_set_string">
<description>
Sets the given configuration entry to contain a string.


</description>
<parameters>
<parameter name="path">
<parameter_description> path to the configuration entry.
</parameter_description>
</parameter>
<parameter name="new_value">
<parameter_description> new value.
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_connection_get_events">
<description>
Retrieves a list of the last errors occurred during the connection.
You can make a copy of the list using #gda_connection_event_list_copy.


</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection.
</parameter_description>
</parameter>
</parameters>
<return> a GList of #GdaConnectionEvent.

</return>
</function>

<function name="gda_value_new">
<description>
Makes a new #GValue of type @type.


</description>
<parameters>
<parameter name="type">
<parameter_description> the new value type.
</parameter_description>
</parameter>
</parameters>
<return> the newly created #GValue with the specified @type. 
You need to set the value in the returned GValue.
</return>
</function>

<function name="gda_dict_type_add_synonym">
<description>
Sets a new synonym to the @dt data type.

</description>
<parameters>
<parameter name="dt">
<parameter_description> a #GdaDictType object
</parameter_description>
</parameter>
<parameter name="synonym">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_data_proxy_undelete">
<description>
Remove the &quot;to be deleted&quot; mark at the row @proxy_row, if it existed.

</description>
<parameters>
<parameter name="proxy">
<parameter_description> a #GdaDataProxy object
</parameter_description>
</parameter>
<parameter name="proxy_row">
<parameter_description> A proxy row number
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_column_get_allow_null">
<description>
Gets the &apos;allow null&apos; flag of the given column.


</description>
<parameters>
<parameter name="column">
<parameter_description> a #GdaColumn.
</parameter_description>
</parameter>
</parameters>
<return> whether the given column allows null values or not (%TRUE or %FALSE).
</return>
</function>

<function name="gda_query_condition_get_ref_objects_all">
<description>
Get a complete list of the objects referenced by @cond, 
including its descendants (unlike the gda_referer_get_ref_objects()
function applied to @cond).


</description>
<parameters>
<parameter name="cond">
<parameter_description> a #GdaQueryCondition object
</parameter_description>
</parameter>
</parameters>
<return> a new list of referenced objects
</return>
</function>

<function name="gda_data_handler_get_nb_g_types">
<description>
Get the number of GType types the GdaDataHandler can handle correctly


</description>
<parameters>
<parameter name="dh">
<parameter_description> an object which implements the #GdaDataHandler interface
</parameter_description>
</parameter>
</parameters>
<return> the number.
</return>
</function>

<function name="gda_data_proxy_is_read_only">
<description>

</description>
<parameters>
<parameter name="proxy">
<parameter_description> a #GdaDataProxy object
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the proxied data model is itself read-only
</return>
</function>

<function name="gda_column_set_g_type">
<description>
Sets the type of @column to @type.

</description>
<parameters>
<parameter name="column">
<parameter_description> a #GdaColumn.
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> the new type of @column.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_value_get_binary">
<description>

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue whose value we want to get.
</parameter_description>
</parameter>
</parameters>
<return> the value stored in @value.
</return>
</function>

<function name="gda_data_model_import_get_type">
<description>

</description>
<parameters>
</parameters>
<return> the #GType of GdaDataModelImport.
</return>
</function>

<function name="gda_delimiter_parse_with_error">
<description>
Generates a list of #GdaDelimiterStatement which is an in memory a structure of the 
@sqlquery in an easy to use way. It basically makes chuncks of string and
identifies required parameters. There is one #GdaDelimiterStatement for every
chunck of string separated by a semicolon.


</description>
<parameters>
<parameter name="sqlquery">
<parameter_description> A SQL query string. ie SELECT * FROM FOO
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place where to store an error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> A list of generated GdaDelimiterStatement or %NULL on error.
</return>
</function>

<function name="gda_column_get_auto_increment">
<description>

</description>
<parameters>
<parameter name="column">
<parameter_description> a #GdaColumn.
</parameter_description>
</parameter>
</parameters>
<return> whether the given column is an auto incremented one (%TRUE or %FALSE).
</return>
</function>

<function name="gda_data_model_export_to_file">
<description>
Exports data contained in @model to the @file file; the format is specified using the @format argument.

Specifically, the parameters in the @options list can be:
&amp;lt;itemizedlist&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;&quot;SEPARATOR&quot;: a string value of which the first character is used as a separator in case of CSV export
&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;&quot;NAME&quot;: a string value used to name the exported data if the export format is XML&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;&quot;OVERWRITE&quot;: a boolean value which tells if the file must be over-written if it already exists.
&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;/itemizedlist&amp;gt;


</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModel
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> the format in which to export data
</parameter_description>
</parameter>
<parameter name="file">
<parameter_description> the filename to export to
</parameter_description>
</parameter>
<parameter name="cols">
<parameter_description> an array containing which columns of @model will be exported, or %NULL for all columns
</parameter_description>
</parameter>
<parameter name="nb_cols">
<parameter_description> the number of columns in @cols
</parameter_description>
</parameter>
<parameter name="rows">
<parameter_description> an array containing which rows of @model will be exported, or %NULL for all rows
</parameter_description>
</parameter>
<parameter name="nb_rows">
<parameter_description> the number of rows in @rows
</parameter_description>
</parameter>
<parameter name="options">
<parameter_description> list of options for the export
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_value_set_list">
<description>
Stores @val into @value.

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue that will store @val.
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> value to be stored in @value.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_server_operation_get_value_at">
<description>
Get the value for the node at the path formed using @path_format and ... (the rules are the same as
for g_strdup_printf())


</description>
<parameters>
<parameter name="op">
<parameter_description> a #GdaServerOperation object
</parameter_description>
</parameter>
<parameter name="path_format">
<parameter_description> a complete path to a node (starting with &quot;/&quot;)
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> arguments to use with @path_format to make a complete path
</parameter_description>
</parameter>
</parameters>
<return> a constant #GValue if a value has been defined, or %NULL if the value is undefined or
if the @path is not defined or @path does not hold any value.
</return>
</function>

<function name="gda_dict_constraint_get_table">
<description>
Get the table to which the constraint is attached


</description>
<parameters>
<parameter name="cstr">
<parameter_description> a #GdaDictConstraint object
</parameter_description>
</parameter>
</parameters>
<return> the #GdaDictTable
</return>
</function>

<function name="gda_dict_assume_object">
<description>
Declares the existence of a new object to @dict, and force @dict to hold a reference to @object so it is not
destroyed.

</description>
<parameters>
<parameter name="dict">
<parameter_description> a #GdaDict object
</parameter_description>
</parameter>
<parameter name="object">
<parameter_description> a #GdaObject object
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_parameter_list_find_node_for_param">
<description>
Finds a #GdaParameterListNode holding information for @param, don&apos;t modify the returned structure


</description>
<parameters>
<parameter name="paramlist">
<parameter_description> a #GdaParameterList object
</parameter_description>
</parameter>
<parameter name="param">
<parameter_description> a #GdaParameter object
</parameter_description>
</parameter>
</parameters>
<return> a #GdaParameterListNode or %NULL
</return>
</function>

<function name="gda_server_operation_get_node_path_portion">
<description>
Get the last part of @path


</description>
<parameters>
<parameter name="op">
<parameter_description> a #GdaServerOperation object
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> a complete path to a node (starting with &quot;/&quot;)
</parameter_description>
</parameter>
</parameters>
<return> a new string, or %NULL if an error occurred
</return>
</function>

<function name="gda_data_model_index_set_unique_key">
<description>
Sets if a #GdaDataModelIndex is a unique key.

</description>
<parameters>
<parameter name="dmi">
<parameter_description> a #GdaDataModelIndex.
</parameter_description>
</parameter>
<parameter name="uk">
<parameter_description> the new primary key setting of @dmi.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="input">
<description>
@see tran_switch_to_buffer

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gda_utility_table_field_attrs_stringify">
<description>

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gda_data_proxy_get_proxied_model_row">
<description>
Get the @proxy&apos;s proxied model row corresponding to @proxy_row


</description>
<parameters>
<parameter name="proxy">
<parameter_description> a #GdaDataProxy object
</parameter_description>
</parameter>
<parameter name="proxy_row">
<parameter_description> A proxy row number
</parameter_description>
</parameter>
</parameters>
<return> the proxied model&apos;s row, or -1 if @proxy row which only exists @proxy
</return>
</function>

<function name="gda_config_can_modify_global_config">
<description>
Tells if the calling program can modify the global configured
data sources.


</description>
<parameters>
</parameters>
<return> TRUE if modifications are possible
</return>
</function>

<function name="gda_data_proxy_append">
<description>
Appends a new row to the proxy


</description>
<parameters>
<parameter name="proxy">
<parameter_description> a #GdaDataProxy object
</parameter_description>
</parameter>
</parameters>
<return> the proxy row number of the new row
</return>
</function>

<function name="gda_query_target_set_alias">
<description>
Sets @target&apos;s alias to @alias

</description>
<parameters>
<parameter name="target">
<parameter_description> a #GdaQueryTarget object
</parameter_description>
</parameter>
<parameter name="alias">
<parameter_description> the alias
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_query_get_field_by_sql_naming">
<description>

</description>
<parameters>
<parameter name="query">
<parameter_description> a #GdaQuery object
</parameter_description>
</parameter>
<parameter name="sql_name">
<parameter_description> the SQL naming for the requested field
</parameter_description>
</parameter>
</parameters>
<return>
</return>
</function>

<function name="gda_command_get_text">
<description>
Gets the command text held by @cmd.


</description>
<parameters>
<parameter name="cmd">
<parameter_description> a #GdaCommand.
</parameter_description>
</parameter>
</parameters>
<return> the command string of @cmd.
</return>
</function>

<function name="gda_data_proxy_apply_row_changes">
<description>
Commits the modified data in the proxy back into the #GdaDataModel.


</description>
<parameters>
<parameter name="proxy">
<parameter_description> a #GdaDataProxy object
</parameter_description>
</parameter>
<parameter name="proxy_row">
<parameter_description> the row number to commit
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> place to store the error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred.
</return>
</function>

<function name="gda_log_enable">
<description>
Enables GDA logs.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gda_data_model_signal_emit_changed">
<description>
Notifies listeners of the given data model object of changes
in the underlying data. Listeners usually will connect
themselves to the &quot;changed&quot; signal in the #GdaDataModel
class, thus being notified of any new data being appended
or removed from the data model.

</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModel object.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_config_set_boolean">
<description>
Sets the given configuration entry to contain a boolean.


</description>
<parameters>
<parameter name="path">
<parameter_description> path to the configuration entry.
</parameter_description>
</parameter>
<parameter name="new_value">
<parameter_description> new value.
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_query_join_new_copy">
<description>
Copy constructor


</description>
<parameters>
<parameter name="orig">
<parameter_description> a #GdaQueryJoin to make a copy of
</parameter_description>
</parameter>
<parameter name="replacements">
<parameter_description> a hash table to store replacements, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a the new copy of @orig
</return>
</function>

<function name="gda_query_condition_leaf_set_left_op">
<description>
Sets one of @condition&apos;s operators

</description>
<parameters>
<parameter name="condition">
<parameter_description> a #GdaQueryCondition object
</parameter_description>
</parameter>
<parameter name="op">
<parameter_description> which oparetor is concerned
</parameter_description>
</parameter>
<parameter name="field">
<parameter_description> a # GdaQueryField object
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_value_get_time">
<description>

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue whose value we want to get.
</parameter_description>
</parameter>
</parameters>
<return> the value stored in @value.
</return>
</function>

<function name="gda_server_operation_get_sequence_max_size">
<description>

</description>
<parameters>
<parameter name="op">
<parameter_description> a #GdaServerOperation object
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> a complete path to a sequence node (starting with &quot;/&quot;)
</parameter_description>
</parameter>
</parameters>
<return> the maximum number of items in the sequence at @path, or 0 if @path is not a sequence node
</return>
</function>

<function name="gda_server_operation_get_sequence_size">
<description>

</description>
<parameters>
<parameter name="op">
<parameter_description> a #GdaServerOperation object
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> a complete path to a sequence node (starting with &quot;/&quot;)
</parameter_description>
</parameter>
</parameters>
<return> the number of items in the sequence at @path, or 0 if @path is not a sequence node
</return>
</function>

<function name="gda_query_field_value_set_dict_type">
<description>
Set the #GdaDictType type of @field

</description>
<parameters>
<parameter name="field">
<parameter_description> a #GdaQueryFieldValue object
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> a #GdaDictType object, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_query_field_field_new">
<description>
Creates a new #GdaQueryFieldField object which represents a given field.
@field can be among the following forms:
&amp;lt;itemizedlist&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;field_name&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;table_name.field_name&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;/itemizedlist&amp;gt;


</description>
<parameters>
<parameter name="query">
<parameter_description> a #GdaQuery in which the new object will be
</parameter_description>
</parameter>
<parameter name="field">
<parameter_description> the name of the field to represent
</parameter_description>
</parameter>
</parameters>
<return> the new object
</return>
</function>

<function name="gda_quark_list_free">
<description>
Releases all memory occupied by the given #GdaQuarkList.

</description>
<parameters>
<parameter name="qlist">
<parameter_description> a #GdaQuarkList.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_server_operation_add_node_to_sequence">
<description>

</description>
<parameters>
<parameter name="op">
<parameter_description> a #GdaServerOperation object
</parameter_description>
</parameter>
<parameter name="seq_path">
<parameter_description> the path to the sequence to which an item must be added (like &quot;/SEQ_NAME&quot; for instance)
</parameter_description>
</parameter>
</parameters>
<return> the index of the new entry in the sequence (like 5 for example if a 6th item has
been added to the sequence.
</return>
</function>

<function name="gda_object_set_description">
<description>
Sets the description of the GdaObject object. If the description is changed, then the 
&quot;descr_changed&quot; signal is emitted.


</description>
<parameters>
<parameter name="gdaobj">
<parameter_description> a #GdaObject object
</parameter_description>
</parameter>
<parameter name="descr">
<parameter_description> 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_data_proxy_new">
<description>
Creates a new proxy for @model


</description>
<parameters>
<parameter name="model">
<parameter_description> Data model to be proxied
</parameter_description>
</parameter>
</parameters>
<return> a new #GdaDataProxy object
</return>
</function>

<function name="gda_column_get_caption">
<description>

</description>
<parameters>
<parameter name="column">
<parameter_description> a #GdaColumn.
</parameter_description>
</parameter>
</parameters>
<return> @column&apos;s caption.
</return>
</function>

<function name="gda_server_provider_get_schema">
<description>
Get a #GdaDataModel containing the requested information. See &amp;lt;link linkend=&quot;libgda-provider-get-schema&quot;&amp;gt;this section&amp;lt;/link&amp;gt; for more 
information on the columns of the returned #GdaDataModel depending on requested @schema, and for the possible
parameters of @params, see the
&amp;lt;link linkend=&quot;libgda-provider-get-schema&quot;&amp;gt;get_schema() virtual method for providers&amp;lt;/link&amp;gt; for more details.


</description>
<parameters>
<parameter name="provider">
<parameter_description> a #GdaServerProvider object
</parameter_description>
</parameter>
<parameter name="cnc">
<parameter_description> a #GdaConnection object, or %NULL
</parameter_description>
</parameter>
<parameter name="schema">
<parameter_description> the requested kind of information
</parameter_description>
</parameter>
<parameter name="params">
<parameter_description> optional parameters
</parameter_description>
</parameter>
</parameters>
<return> a new #GdaDataModel, or %NULL if an error occurred.
</return>
</function>

<function name="gda_data_model_row_updated">
<description>
Emits the &apos;row_updated&apos; and &apos;changed&apos; signals on @model.

</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModel object.
</parameter_description>
</parameter>
<parameter name="row">
<parameter_description> row number.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_data_model_index_get_table_name">
<description>

</description>
<parameters>
<parameter name="dmi">
<parameter_description> a #GdaDataModelIndex.
</parameter_description>
</parameter>
</parameters>
<return> the table name of @dmi.
</return>
</function>

<function name="gda_dict_function_get_arg_dict_types">
<description>
To consult the list of arguments types (and number) of a function.


</description>
<parameters>
<parameter name="func">
<parameter_description> a #GdaDictFunction object
</parameter_description>
</parameter>
</parameters>
<return> a list of #GdaDictType objects, the list MUST NOT be modified.
</return>
</function>

<function name="gda_data_model_get_n_rows">
<description>

</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModel object.
</parameter_description>
</parameter>
</parameters>
<return> the number of rows in the given data model, or -1 if the number of rows is not known
</return>
</function>

<function name="gda_client_begin_transaction">
<description>
Starts a transaction on all connections being managed by the given
#GdaClient. It is important to note that this operates on all
connections opened within a #GdaClient, which could not be what
you&apos;re looking for.

To execute a transaction on a unique connection, use
#gda_connection_begin_transaction, #gda_connection_commit_transaction
and #gda_connection_rollback_transaction.


</description>
<parameters>
<parameter name="client">
<parameter_description> a #GdaClient object.
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the transation to start
</parameter_description>
</parameter>
<parameter name="level">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if all transactions could be started successfully,
or %FALSE if one of them fails.
</return>
</function>

<function name="gda_parameter_list_find_source">
<description>
Finds the #GdaParameterListSource structure used in @paramlist for which @model is a
the data model, don&apos;t modify the returned structure


</description>
<parameters>
<parameter name="paramlist">
<parameter_description> a #GdaParameterList object
</parameter_description>
</parameter>
<parameter name="model">
<parameter_description> a #GdaDataModel object
</parameter_description>
</parameter>
</parameters>
<return> a #GdaParameterListSource pointer or %NULL.
</return>
</function>

<function name="gda_parameter_list_get_param_default_value">
<description>
Retreives a prefered default value to be used by @paramlist&apos;s users when necessary.
The usage of such values is decided by @paramlist&apos;s users.

@paramlist only offers to store the value
using gda_parameter_list_set_param_default_value() or to store a #GdaParameter reference from which to get
a value using gda_parameter_list_set_param_default_alias().


</description>
<parameters>
<parameter name="paramlist">
<parameter_description> a #GdaParameterList object
</parameter_description>
</parameter>
<parameter name="param">
<parameter_description> a #GdaParameter object, managed by @paramlist
</parameter_description>
</parameter>
</parameters>
<return> a #GValue, or %NULL.
</return>
</function>

<function name="gda_data_model_index_set_column_index_list">
<description>
Sets @dmi&apos;s list of column index attributes by
copying @col_idx_list to its internal representation.

</description>
<parameters>
<parameter name="dmi">
<parameter_description> a #GdaDataModelIndex.
</parameter_description>
</parameter>
<parameter name="col_idx_list">
<parameter_description> list of #GdaColumnIndex.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_data_model_index_copy">
<description>
Creates a new #GdaDataModelIndex object from an existing one.

</description>
<parameters>
<parameter name="dmi">
<parameter_description> attributes to get a copy from.
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated #GdaDataModelIndex with a copy of the data
in @dmi.
</return>
</function>

<function name="gda_quark_list_copy">
<description>
Creates a new #GdaQuarkList from an existing one.


</description>
<parameters>
<parameter name="qlist">
<parameter_description> quark_list to get a copy from.
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated #GdaQuarkList with a copy of the data in @qlist.
</return>
</function>

<function name="gda_value_stringify">
<description>
Converts a GValue to its string representation which is a human readable value. Note that the
returned string does not take into account the current locale of the user (on the contrary to the
#GdaDataHandler objects). Using this function should be limited to debugging and values serialization
purposes.

Dates are converted in a YYYY-MM-DD format.


</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue.
</parameter_description>
</parameter>
</parameters>
<return> a new string, or %NULL if the conversion cannot be done. Free the value with a g_free() when you&apos;ve finished
using it. 
</return>
</function>

<function name="gda_entity_remove_field">
<description>

</description>
<parameters>
<parameter name="iface">
<parameter_description> an object implementing the #GdaEntity interface
</parameter_description>
</parameter>
<parameter name="field">
<parameter_description> an object implementing the #GdaEntityField interface to remove
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_dict_constraint_pkey_set_fields">
<description>
Sets the fields which make the primary key represented by @cstr. All the fields
must belong to the same #GdaDictTable to which the constraint is attached

</description>
<parameters>
<parameter name="cstr">
<parameter_description> a #GdaDictConstraint object
</parameter_description>
</parameter>
<parameter name="fields">
<parameter_description> a list of #GdaDictField objects
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_query_field_agg_new">
<description>
Creates a new GdaQueryFieldAgg object which represents the @agg aggregate


</description>
<parameters>
<parameter name="query">
<parameter_description> a #GdaQuery in which the new object will be
</parameter_description>
</parameter>
<parameter name="agg_name">
<parameter_description> the name of an aggregate to represent
</parameter_description>
</parameter>
</parameters>
<return> the new object
</return>
</function>

<function name="gda_config_free_data_source_list">
<description>
Frees a list of #GdaDataSourceInfo structures.

</description>
<parameters>
<parameter name="list">
<parameter_description> the list to be freed.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_dict_table_get_constraints">
<description>
Get all the constraints which apply to the given table (each constraint
can represent a NOT NULL, a primary key or foreign key or a check constraint.


</description>
<parameters>
<parameter name="table">
<parameter_description> a #GdaDictTable object
</parameter_description>
</parameter>
</parameters>
<return> a new list of #GdaDictConstraint objects
</return>
</function>

<function name="gda_data_model_iter_get_param_for_column">
<description>
Fetch a pointer to the #GdaParameter object which is synchronized with data at 
column @col


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GdaDataModelIter object
</parameter_description>
</parameter>
<parameter name="col">
<parameter_description> the requested column
</parameter_description>
</parameter>
</parameters>
<return> the #GdaParameter, or %NULL if an error occurred
</return>
</function>

<function name="gda_server_provider_render_operation">
<description>
Creates an SQL statement (possibly using some specific extensions of the DBMS) corresponding to the
@op operation.


</description>
<parameters>
<parameter name="provider">
<parameter_description> a #GdaServerProvider object
</parameter_description>
</parameter>
<parameter name="cnc">
<parameter_description> a #GdaConnection object which will be used to perform an action
</parameter_description>
</parameter>
<parameter name="op">
<parameter_description> a #GdaServerOperation object
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store an error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a new string, or %NULL if an error occurred or operation cannot be rendered as SQL.
</return>
</function>

<function name="gda_server_provider_get_server_version">
<description>

</description>
<parameters>
<parameter name="provider">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="cnc">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return>
</return>
</function>

<function name="gda_config_save_data_source">
<description>
Adds a new data source (or update an existing one) to the GDA
configuration, based on the parameters given.


</description>
<parameters>
<parameter name="name">
<parameter_description> name for the data source to be saved.
</parameter_description>
</parameter>
<parameter name="provider">
<parameter_description> provider ID for the new data source.
</parameter_description>
</parameter>
<parameter name="cnc_string">
<parameter_description> connection string for the new data source.
</parameter_description>
</parameter>
<parameter name="description">
<parameter_description> description for the new data source.
</parameter_description>
</parameter>
<parameter name="username">
<parameter_description> user name for the new data source.
</parameter_description>
</parameter>
<parameter name="password">
<parameter_description> password to use when authenticating @username.
</parameter_description>
</parameter>
<parameter name="is_global">
<parameter_description> TRUE if the data source is system-wide
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_config_get_data_source_model">
<description>
Fills and returns a new #GdaDataModel object using information from all 
data sources which are currently configured in the system.

Rows are separated in 6 columns: 
&apos;Name&apos;, &apos;Provider&apos;, &apos;Connection string&apos;, &apos;Description&apos;, &apos;Username&apos; and &apos;Global&apos;.


</description>
<parameters>
</parameters>
<return> a new #GdaDataModel object. 
</return>
</function>

<function name="gda_dict_set_xml_filename">
<description>
Sets the filename @dict will use when gda_dict_save_xml() and gda_dict_load_xml() are called.

</description>
<parameters>
<parameter name="dict">
<parameter_description> a #GdaDict object
</parameter_description>
</parameter>
<parameter name="xmlfile">
<parameter_description> a file name
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_dict_constraint_new">
<description>
Creates a new GdaDictConstraint object


</description>
<parameters>
<parameter name="table">
<parameter_description> the #GdaDictTable to which the constraint is attached
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> the type of constraint
</parameter_description>
</parameter>
</parameters>
<return> the new object
</return>
</function>

<function name="gda_parameter_is_valid">
<description>
Get the validity of @param (that is, of the value held by @param)


</description>
<parameters>
<parameter name="param">
<parameter_description> a #GdaParameter object
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @param&apos;s value can safely be used
</return>
</function>

<function name="gda_value_get_timestamp">
<description>

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue whose value we want to get.
</parameter_description>
</parameter>
</parameters>
<return> the value stored in @value.
</return>
</function>

<function name="gda_parameter_get_param_users">
<description>
Get the #GdaEntityField objects which created @param (and which will use its value)


</description>
<parameters>
<parameter name="param">
<parameter_description> a #GdaParameter object
</parameter_description>
</parameter>
</parameters>
<return> the list of #GdaEntityField object; it must not be changed or free&apos;d
</return>
</function>

<function name="gda_aggregates_get_by_dbms_id">
<description>
To find a DBMS functions which is uniquely identified by its name and the type
of its argument.


</description>
<parameters>
<parameter name="dict">
<parameter_description> a #GdaDict object
</parameter_description>
</parameter>
<parameter name="dbms_id">
<parameter_description> 
</parameter_description>
</parameter>
</parameters>
<return> The aggregate or NULL if not found
</return>
</function>

<function name="gda_data_proxy_cancel_row_changes">
<description>
Resets data at the corresponding row and column.

</description>
<parameters>
<parameter name="proxy">
<parameter_description> a #GdaDataProxy object
</parameter_description>
</parameter>
<parameter name="proxy_row">
<parameter_description> the row to cancel changes
</parameter_description>
</parameter>
<parameter name="col">
<parameter_description> the column to cancel changes, or less than 0 to cancel any change on the @row row
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_config_get_string">
<description>
Gets the value of the specified configuration entry as a string. You
are then responsible to free the returned string.


</description>
<parameters>
<parameter name="path">
<parameter_description> path to the configuration entry.
</parameter_description>
</parameter>
</parameters>
<return> the value stored at the given entry.
</return>
</function>

<function name="gda_object_signal_emit_changed">
<description>
Force emission of the &quot;changed&quot; signal, except if gda_object_block_changed() has
been called.

</description>
<parameters>
<parameter name="gdaobj">
<parameter_description> a #GdaObject object
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_data_handler_get_value_from_sql">
<description>
Creates a new GValue which represents the SQL value given as argument. This is
the opposite of the function gda_data_handler_get_sql_from_value(). The type argument
is used to determine the real data type requested for the returned value.

If the sql string is NULL, then the returned GValue is of type GDA_TYPE_NULL;
if the sql string does not correspond to a valid SQL string for the requested type, then
NULL is returned.


</description>
<parameters>
<parameter name="dh">
<parameter_description> an object which implements the #GdaDataHandler interface
</parameter_description>
</parameter>
<parameter name="sql">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> 
</parameter_description>
</parameter>
</parameters>
<return> the new GValue or NULL on error
</return>
</function>

<function name="gda_query_target_new_copy">
<description>
Makes a copy of an existing object (copy constructor)


</description>
<parameters>
<parameter name="orig">
<parameter_description> a #GdaQueryTarget object to copy
</parameter_description>
</parameter>
</parameters>
<return> the new object
</return>
</function>

<function name="gda_query_field_is_visible">
<description>

</description>
<parameters>
<parameter name="qfield">
<parameter_description> a #GdaQueryField object
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @field is visible
</return>
</function>

<function name="gda_data_model_import_clean_errors">
<description>
Clears the history of errors @model has to report

</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModelImport object
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_dict_compute_xml_filename">
<description>
Get the prefered filename which represents the data dictionary associated to the @datasource data source.
Using the returned value in conjunction with gda_dict_load_xml_file() and gda_dict_save_xml_file() has
the advantage of letting the library handle file naming onventions.

if @datasource is %NULL, and a #GdaConnection object has been assigned to @dict, then the returned
string will take into account the data source used by that connection.

The @app_id argument allows to give an extra identification to the request, when some special features
must be saved but not interfere with the default dictionary.


</description>
<parameters>
<parameter name="dict">
<parameter_description> a #GdaDict object
</parameter_description>
</parameter>
<parameter name="datasource">
<parameter_description> a data source, or %NULL
</parameter_description>
</parameter>
<parameter name="app_id">
<parameter_description> an extra identification, or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a new string
</return>
</function>

<function name="gda_parameter_declare_param_user">
<description>
Tells that @user is potentially using @param.

</description>
<parameters>
<parameter name="param">
<parameter_description> a #GdaParameter object
</parameter_description>
</parameter>
<parameter name="user">
<parameter_description> the #GdaObject object using that parameter for
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_data_model_array_copy_model">
<description>
Makes a copy of @src into a new #GdaDataModelArray object


</description>
<parameters>
<parameter name="src">
<parameter_description> a #GdaDataModel to copy data from
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a new data model, or %NULL if an error occurred
</return>
</function>

<function name="gda_dict_table_get_pk_constraint">
<description>
Get the primary key constraint of @table, if there is any. If several
#GdaDictConstraint represent a primary key constraint for @table, then
the first one in the list of constraints is returned.


</description>
<parameters>
<parameter name="table">
<parameter_description> a #GdaDictTable object
</parameter_description>
</parameter>
</parameters>
<return> a #GdaDictConstraint object or %NULL.
</return>
</function>

<function name="gda_parameter_set_not_null">
<description>
Sets if the parameter can have a NULL value. If @not_null is TRUE, then that won&apos;t be allowed

</description>
<parameters>
<parameter name="param">
<parameter_description> a #GdaParameter object
</parameter_description>
</parameter>
<parameter name="not_null">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_command_copy">
<description>
Creates a new #GdaCommand from an existing one.


</description>
<parameters>
<parameter name="cmd">
<parameter_description> command to get a copy from.
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated #GdaCommand with a copy of the data in @cmd.
</return>
</function>

<function name="gda_connection_open">
<description>
Tries to open the connection.


</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection object
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the connection is opened, and FALSE otherwise.
</return>
</function>

<function name="gda_connection_rollback_transaction">
<description>
Rollbacks the given transaction. This means that all changes
made to the underlying data source since the last call to
#gda_connection_begin_transaction() or #gda_connection_commit_transaction()
will be discarded.


</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection object.
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the transation to commit
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the operation was successful, %FALSE otherwise.
</return>
</function>

<function name="gda_query_field_is_list">
<description>
Tells if @qfield can potentially represent a list of values.


</description>
<parameters>
<parameter name="qfield">
<parameter_description> a #GdaQueryField object
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @field can be a list of values
</return>
</function>

<function name="gda_dict_constraint_fkey_get_fields">
<description>
Get the list of field pairs composing the foreign key constraint which @cstr represents. In the returned
list, each pair item is allocated and it&apos;s up to the caller to free the list and each pair, and the
reference count for each pointer to GObjects in each pair is NOT INCREASED, which means the caller of this
function DOES NOT hold any reference on the mentionned GObjects (if he needs to, it has to call g_object_ref())


</description>
<parameters>
<parameter name="cstr">
<parameter_description> a #GdaDictConstraint object
</parameter_description>
</parameter>
</parameters>
<return> a new list of #GdaDictConstraintFkeyPair pairs
</return>
</function>

<function name="gda_command_set_text">
<description>
Sets the command text of @cmd.

</description>
<parameters>
<parameter name="cmd">
<parameter_description> a #GdaCommand
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> the command text.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_file_load">
<description>
Loads a file, specified by the given @uri, and returns the file
contents as a string.

It is the caller&apos;s responsibility to free the returned value.


</description>
<parameters>
<parameter name="filename">
<parameter_description> path for the file to be loaded.
</parameter_description>
</parameter>
</parameters>
<return> the file contents as a newly-allocated string, or %NULL
if there is an error.
</return>
</function>

<function name="gda_config_set_int">
<description>
Sets the given configuration entry to contain an integer.


</description>
<parameters>
<parameter name="path">
<parameter_description> path to the configuration entry.
</parameter_description>
</parameter>
<parameter name="new_value">
<parameter_description> new value.
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_query_del_sub_query">
<description>
Removes @sub_query from @query. @sub_query MUST be present within @query.

</description>
<parameters>
<parameter name="query">
<parameter_description> a #GdaQuery object
</parameter_description>
</parameter>
<parameter name="sub_query">
<parameter_description> a #GdaQuery object
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_query_del_join">
<description>
Removes @join from @query. @join MUST be present within @query.

</description>
<parameters>
<parameter name="query">
<parameter_description> a #GdaQuery object
</parameter_description>
</parameter>
<parameter name="join">
<parameter_description> a #GdaQueryJoin object
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_column_index_set_sorting">
<description>
Sets the sorting of a #GdaColumnIndex.

</description>
<parameters>
<parameter name="dmcia">
<parameter_description> a #GdaColumnIndex.
</parameter_description>
</parameter>
<parameter name="sorting">
<parameter_description> the new sorting of @dmcia.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_column_index_get_references">
<description>

</description>
<parameters>
<parameter name="dmcia">
<parameter_description> a #GdaColumnIndex.
</parameter_description>
</parameter>
</parameters>
<return> @dmcia&apos;s references.
</return>
</function>

<function name="gda_query_join_get_target_2">
<description>
Get the 2nd #GdaQueryTarget participating in the join


</description>
<parameters>
<parameter name="join">
<parameter_description> a #GdaQueryJoin object
</parameter_description>
</parameter>
</parameters>
<return> the #GdaQueryTarget
</return>
</function>

<function name="gda_connection_begin_transaction">
<description>
Starts a transaction on the data source, identified by the
@xaction parameter.

Before starting a transaction, you can check whether the underlying
provider does support transactions or not by using the
#gda_connection_supports_feature() function.


</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection object.
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the transation to start
</parameter_description>
</parameter>
<parameter name="level">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the transaction was started successfully, %FALSE
otherwise.
</return>
</function>

<function name="gda_data_model_iter_move_next">
<description>
Moves @iter one row further than where it already is (synchronizes the values of the parameters in @iter 
with the values at the new row).


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GdaDataModelIter object
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_server_provider_get_data_handler_dbms">
<description>
Find a #GdaDataHandler object to manipulate data of type @for_type.


</description>
<parameters>
<parameter name="provider">
<parameter_description> a server provider.
</parameter_description>
</parameter>
<parameter name="cnc">
<parameter_description> a #GdaConnection object, or %NULL
</parameter_description>
</parameter>
<parameter name="for_type">
<parameter_description> a DBMS type definition
</parameter_description>
</parameter>
</parameters>
<return> a #GdaDataHandler, or %NULL if the provider does not know about the @for_type type
</return>
</function>

<function name="gda_row_get_number">
<description>
Gets the number of the given row, that is, its position in its containing
data model.


</description>
<parameters>
<parameter name="row">
<parameter_description> a #GdaRow.
</parameter_description>
</parameter>
</parameters>
<return> the row number, or -1 if there was an error.
</return>
</function>

<function name="gda_data_model_array_set_n_columns">
<description>
Sets the number of columns for rows inserted in this model. 
@cols must be greated than or equal to 0.

Also clears @model&apos;s contents.

</description>
<parameters>
<parameter name="model">
<parameter_description> the #GdaDataModelArray.
</parameter_description>
</parameter>
<parameter name="cols">
<parameter_description> number of columns for rows this data model should use.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_object_unblock_changed">
<description>
The &quot;changed&quot; signal will again be emitted.

</description>
<parameters>
<parameter name="gdaobj">
<parameter_description> a #GdaObject object
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_dict_field_is_fkey_alone">
<description>
Get @field&apos;s extra attributes. The @attributes is an OR&apos;ed value of all the possible
values in #GdaDictFieldAttribute.


</description>
<parameters>
<parameter name="field">
<parameter_description> a #GdaDictField object
</parameter_description>
</parameter>
</parameters>
<return> the new attributes value
</return>
</function>

<function name="gda_server_provider_rollback_transaction">
<description>

</description>
<parameters>
<parameter name="provider">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="cnc">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the transation to commit
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return>
</return>
</function>

<function name="gda_execute_select_command">
<description>
Execute a SQL SELECT command over an opened connection.

Return: a new #GdaDataModel if succesfull, NULL otherwise

</description>
<parameters>
<parameter name="cnn">
<parameter_description> an opened connection
</parameter_description>
</parameter>
<parameter name="sql">
<parameter_description> a query statament must begin with &quot;SELECT&quot;
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_data_model_index_equal">
<description>
Tests whether two field attributes are equal.


</description>
<parameters>
<parameter name="lhs">
<parameter_description> a #GdaDataModelIndex
</parameter_description>
</parameter>
<parameter name="rhs">
<parameter_description> another #GdaDataModelIndex
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the field attributes contain the same information.
</return>
</function>

<function name="gda_dict_constraint_fkey_get_ref_table">
<description>
Get the #GdaDictTable at the other end of the foreign key relation represented by this
constraint


</description>
<parameters>
<parameter name="cstr">
<parameter_description> a #GdaDictConstraint object
</parameter_description>
</parameter>
</parameters>
<return> the #GdaDictTable
</return>
</function>

<function name="gda_data_model_row_get_row">
<description>
Finds the #GdaRow object corresponding to the @row row number.


</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModelRow object
</parameter_description>
</parameter>
<parameter name="row">
<parameter_description> the row number to fetch
</parameter_description>
</parameter>
</parameters>
<return> the #GdaRow, or %NULL if not found.
</return>
</function>

<function name="gda_dict_declare_object_as">
<description>
Same as gda_dict_declare_object() but forces to use the @as_type type instead of
@object&apos;s realtype

</description>
<parameters>
<parameter name="dict">
<parameter_description> a #GdaDict object
</parameter_description>
</parameter>
<parameter name="object">
<parameter_description> a #GdaObject object
</parameter_description>
</parameter>
<parameter name="as_type">
<parameter_description> type parent type of @object to take into account
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_blob_to_string">
<description>
Converts all the non printable characters of blob-&amp;gt;data into the \xxx representation
where xxx is the octal representation of the byte, and the &apos;\&apos; (backslash) character
is converted to &quot;\\&quot;.


</description>
<parameters>
<parameter name="blob">
<parameter_description> a correctly filled @GdaBlob structure
</parameter_description>
</parameter>
<parameter name="maxlen">
<parameter_description> a maximum len used to truncate, or 0 for no maximum length
</parameter_description>
</parameter>
</parameters>
<return> a new string from @blob
</return>
</function>

<function name="gda_dict_database_update_dbms_data">
<description>
Synchronises the database representation with the database structure which is stored in
the DBMS. For this operation to succeed, the connection to the DBMS server MUST be opened
(using the corresponding #GdaConnection object).


</description>
<parameters>
<parameter name="db">
<parameter_description> a #GdaDictDatabase object
</parameter_description>
</parameter>
<parameter name="limit_to_type">
<parameter_description> limit the DBMS update to this type, or 0 for no limit
</parameter_description>
</parameter>
<parameter name="limit_obj_name">
<parameter_description> limit the DBMS update to objects of this name, or %NULL for no limit
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error
</return>
</function>

<function name="gda_data_model_import_get_errors">
<description>
Get the list of errors which @model has to report. The returned list is a list of
#GError structures, and must not be modified


</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModelImport object
</parameter_description>
</parameter>
</parameters>
<return> the list of errors (which must not be modified), or %NULL
</return>
</function>

<function name="gda_graph_new">
<description>
Creates a new #GdaGraph object. The graph type is used only to be able to sort out the
different types of graphs. It brings no special functionnality.


</description>
<parameters>
<parameter name="dict">
<parameter_description> a #GdaDict object
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> the graph type (one of #GdaGraphType)
</parameter_description>
</parameter>
</parameters>
<return> the newly created object
</return>
</function>

<function name="gda_dict_function_new">
<description>
Creates a new GdaDictFunction object which rrpresents a function in the dictionary


</description>
<parameters>
<parameter name="dict">
<parameter_description> a #GdaDict object
</parameter_description>
</parameter>
</parameters>
<return> the new object
</return>
</function>

<function name="gda_server_operation_get_node_info">
<description>
Get information about the node identified by @path. The returned #GdaServerOperationNode structure can be 
copied but not modified; it may change or cease to exist if @op changes


</description>
<parameters>
<parameter name="op">
<parameter_description> a #GdaServerOperation object
</parameter_description>
</parameter>
<parameter name="path_format">
<parameter_description> a complete path to a node (starting with &quot;/&quot;)
</parameter_description>
</parameter>
</parameters>
<return> a #GdaServerOperationNode structure, or %NULL if the node was not found
</return>
</function>

<function name="gda_dict_get_objects">
<description>

</description>
<parameters>
<parameter name="dict">
<parameter_description> a #GdaDict object
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> a #Gtype type of object
</parameter_description>
</parameter>
</parameters>
<return> a new list of all the objects of type @type managed by @dict.
</return>
</function>

<function name="gda_data_model_get_column_index_by_name">
<description>
Get the index of the column named @name in @model


</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModel object.
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> a column name
</parameter_description>
</parameter>
</parameters>
<return> the column index, or -1 if no column named @name was found
</return>
</function>

<function name="gda_provider_info_free">
<description>
Deallocates all memory associated to the given #GdaProviderInfo.

</description>
<parameters>
<parameter name="provider_info">
<parameter_description> provider information to free.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_connection_delete_savepoint">
<description>
Delete the SAVEPOINT named @name when not used anymore.


</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection object
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> name of the savepoint to delete
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_handler_numerical_new">
<description>
Creates a data handler for numerical values


</description>
<parameters>
</parameters>
<return> the new object
</return>
</function>

<function name="gda_client_commit_transaction">
<description>
Commits a running transaction on all connections being managed by the given
#GdaClient. It is important to note that this operates on all
connections opened within a #GdaClient, which could not be what
you&apos;re looking for.

To execute a transaction on a unique connection, use
#gda_connection_begin_transaction, #gda_connection_commit_transaction
and #gda_connection_rollback_transaction.


</description>
<parameters>
<parameter name="client">
<parameter_description> a #GdaClient object.
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the transation to commit
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if all transactions could be committed successfully,
or %FALSE if one of them fails.
</return>
</function>

<function name="gda_server_provider_execute_command">
<description>
Executes one or more SQL statements stored in @command, and returns a list of
#GdaDataModel and/or #GdaParameterList (or %NULL) objects for each SQL statement
in @command following the rule (the number and order of items contained in the returned list is the 
same as the number and order of SQL queries in @command if there is no error, 
otherwise it depends on the execution options in @params):
&amp;lt;itemizedlist&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;A #GdaDataModel is in the list if the statement was a SELECT statement and the statement was successufully executed&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;A #GdaParameterList is in the list if the statement was not a SELECT 
statement and the statement was successufully executed. In this case
(if the provider supports it), then the #GdaParameterList may contain:
&amp;lt;itemizedlist&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;a (gint) #GdaParameter named &quot;IMPACTED_ROWS&quot;&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;a (GObject) #GdaParameter named &quot;EVENT&quot; which contains a GdaConnectionEvent&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;/itemizedlist&amp;gt;
&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;%NULL is in the list if the correcponding statement could not be executed&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;/itemizedlist&amp;gt;

For every executed statement, a #GdaDataModel, a #GdaParameterList or %NULL will be appended to the returned list.
The returned list may contain fewer items than the @cmd command contained statements depending on the
options of @command (see gda_command_set_options()).


</description>
<parameters>
<parameter name="provider">
<parameter_description> a #GdaServerProvider object
</parameter_description>
</parameter>
<parameter name="cnc">
<parameter_description> a #GdaConnection object using 
</parameter_description>
</parameter>
<parameter name="cmd">
<parameter_description> a #GdaCommand 
</parameter_description>
</parameter>
<parameter name="params">
<parameter_description> a #GdaParameterList containing a list of optional parameters
</parameter_description>
</parameter>
</parameters>
<return> a new list, or %NULL
</return>
</function>

<function name="gda_dict_field_is_pkey_alone">
<description>
Test if @field is alone a primary key constraint


</description>
<parameters>
<parameter name="field">
<parameter_description> a #GdaDictField object
</parameter_description>
</parameter>
</parameters>
<return>
</return>
</function>

<function name="gda_parameter_set_value_str">
<description>
Same function as gda_parameter_set_value() except that the value
is provided as a string, and may return FALSE if the string did not
represent a correct value for the data type of the parameter.


</description>
<parameters>
<parameter name="param">
<parameter_description> a #GdaParameter object
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a value to set the parameter to, as a string
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_query_field_agg_set_arg">
<description>
Sets the argument of @agg. If @arg is %NULL, then
the argument (if there was one) is removed.

If @agg is not active, then no check on the provided arg
is performed.


</description>
<parameters>
<parameter name="agg">
<parameter_description> a #GdaQueryFieldAgg object
</parameter_description>
</parameter>
<parameter name="arg">
<parameter_description> a #GdaQueryField object
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_client_close_all_connections">
<description>
Closes all connections opened by the given #GdaClient object.

</description>
<parameters>
<parameter name="client">
<parameter_description> a #GdaClient object.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_data_proxy_row_is_inserted">
<description>
Tells if the row number @proxy_row is a row which has been inserted in @proxy
(and is thus not in the proxied data model).


</description>
<parameters>
<parameter name="proxy">
<parameter_description> a #GdaDataProxy object
</parameter_description>
</parameter>
<parameter name="proxy_row">
<parameter_description> A proxy row number
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the row is an inserted row
</return>
</function>

<function name="gda_query_condition_get_cond_type">
<description>
Get the type of @condition


</description>
<parameters>
<parameter name="condition">
<parameter_description> a #GdaQueryCondition object
</parameter_description>
</parameter>
</parameters>
<return> the type
</return>
</function>

<function name="gda_delete_row_from_table">
<description>
This is just a convenient function to delete the row fitting the given condition
from the given table.

@condition must be a valid GValue and must correspond with the GType of the column to use
in the WHERE clause.

The SQL command is like: DELETE FROM table_name WHERE contition_column_name = condition


</description>
<parameters>
<parameter name="cnn">
<parameter_description> an opened connection
</parameter_description>
</parameter>
<parameter name="table_name">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="condition_column_name">
<parameter_description> the name of the column to used in the WHERE condition clause
</parameter_description>
</parameter>
<parameter name="condition">
<parameter_description> a GValue to used to find the row to be deleted 
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred, and FALSE and set error otherwise
</return>
</function>

<function name="gda_data_model_remove_row">
<description>
Removes a row from the data model.


</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModel object.
</parameter_description>
</parameter>
<parameter name="row">
<parameter_description> the row number to be removed.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful, %FALSE otherwise.
</return>
</function>

<function name="gda_entity_field_get_name">
<description>
Get the name of the object implementing the #GdaEntityField interface


</description>
<parameters>
<parameter name="iface">
<parameter_description> an object which implements the #GdaEntityField interface
</parameter_description>
</parameter>
</parameters>
<return> the name
</return>
</function>

<function name="gda_referer_activate">
<description>
Tries to activate the object, does nothing if the object is already active.


</description>
<parameters>
<parameter name="iface">
<parameter_description> an object which implements the #GdaReferer interface
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the object is active after the call
</return>
</function>

<function name="gda_connection_execute_non_select_command">
<description>
Executes a selection command on the given connection.

This function returns the number of rows impacted by the execution of @cmd, or -1
if an error occurred, or -2 if the provider does not return the number of rows impacted.

Note that no check is made regarding the actual number of statements in @cmd or if it really contains a non SELECT
statement. This function is just a convenience function around the gda_connection_execute_command()
function. If @cmd contains several statements, the last #GdaParameterList is returned.

See the documentation of the gda_connection_execute_command() for information
about the @params list of parameters.


</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection object.
</parameter_description>
</parameter>
<parameter name="cmd">
<parameter_description> a #GdaCommand.
</parameter_description>
</parameter>
<parameter name="params">
<parameter_description> parameter list for the command
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store an error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the number of rows impacted (&amp;gt;=0) or -1 or -2 
</return>
</function>

<function name="gda_transaction_status_new">
<description>
Creates a new #GdaTransactionStatus object, which allows a fine-tune and
full control of transactions to be used with providers.


</description>
<parameters>
<parameter name="name">
<parameter_description> name for the transaction
</parameter_description>
</parameter>
</parameters>
<return> the newly created object.
</return>
</function>

<function name="gda_entity_get_field_by_name">
<description>
Get a #GdaEntityField using its name. The notion of &quot;field name&quot; is the
string returned by gda_entity_field_get_name() on each of the fields composing @iface.
However, if that definition does not return any field, then each particular
implementation of @iface may try to give an extra definition to the notion of 
&quot;field name&quot;.

For instance, in the case of the #GdaQuery object, the  gda_entity_field_get_name() is used
as a first try to find a field, and if that fails, then the object tries to find
fields from their SQL naming.

In the case where there can be more than one field with the same name (depending on
@iface&apos;s implementation), then the returned value is %NULL.


</description>
<parameters>
<parameter name="iface">
<parameter_description> an object implementing the #GdaEntity interface
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return> the requested #GdaEntityField or %NULL if the field cannot be found, or if
more than one field has been found.
</return>
</function>

<function name="gda_blob_free">
<description>
Deallocates all memory associated to the given #GdaBlob.

</description>
<parameters>
<parameter name="boxed">
<parameter_description> #GdaBlob to free.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_query_field_value_get_dict_type">
<description>
Get the #GdaDictType type of @field


</description>
<parameters>
<parameter name="field">
<parameter_description> a #GdaQueryFieldValue object
</parameter_description>
</parameter>
</parameters>
<return> the #GdaDictType type
</return>
</function>

<function name="gda_client_get_dsn_specs">
<description>
Get an XML string representing the parameters which can be present in the
DSN string used to open a connection.


</description>
<parameters>
<parameter name="client">
<parameter_description> a #GdaClient object.
</parameter_description>
</parameter>
<parameter name="provider">
<parameter_description> a provider
</parameter_description>
</parameter>
</parameters>
<return> a string (free it after usage), or %NULL if an error occurred

</return>
</function>

<function name="gda_dict_stop_update_dbms_meta_data">
<description>
When the dictionary updates its internal lists of DBMS objects, a call to this function will 
stop that update process. It has no effect when the dictionary is not updating its DBMS data.

</description>
<parameters>
<parameter name="dict">
<parameter_description> a #GdaDict object
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_query_get_parent_query">
<description>
Get the parent query of @query


</description>
<parameters>
<parameter name="query">
<parameter_description> a #GdaQuery object
</parameter_description>
</parameter>
</parameters>
<return> the parent query, or NULL if @query does not have any parent
</return>
</function>

<function name="gda_parameter_replace_param_users">
<description>
For each declared parameter user in the @replacements keys, declare the value stored in
@replacements also as a user of @param.

</description>
<parameters>
<parameter name="param">
<parameter_description> a #GdaParameter object
</parameter_description>
</parameter>
<parameter name="replacements">
<parameter_description> the (objects to be replaced, replacing object) pairs
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_server_operation_set_value_at">
<description>
Set the value for the node at the path formed using @path_format and ... the rules are the same as
for g_strdup_printf())

Here are the corner cases:
&amp;lt;itemizedlist&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;If the path corresponds to a #GdaParameter, then the parameter is set to @value&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;If the path corresponds to a sequence item like for example &quot;/SEQUENCE_NAME/5/NAME&quot; for
the &quot;NAME&quot; value of the 6th item of the &quot;SEQUENCE_NAME&quot; sequence then:
&amp;lt;itemizedlist&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;if the sequence already has 6 or more items, then the value is just set to the corresponding 
value in the 6th item of the sequence&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;if the sequence has less then 6 items, then items are added up to the 6th one before setting
the value to the corresponding in the 6th item of the sequence&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;/itemizedlist&amp;gt;
&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;If the path corresponds to a #GdaDataModel, like for example &quot;/ARRAY/@COLUMN/5&quot; for the value at the
6th row of the &quot;COLUMN&quot; column of the &quot;ARRAY&quot; data model, then:
&amp;lt;itemizedlist&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;if the data model already contains 6 or more rows, then the value is just set&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;if the data model has less than 6 rows, then rows are added up to the 6th one before setting
the value&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;/itemizedlist&amp;gt;
&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;/itemizedlist&amp;gt;


</description>
<parameters>
<parameter name="op">
<parameter_description> a #GdaServerOperation object
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a string
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors or %NULL
</parameter_description>
</parameter>
<parameter name="path_format">
<parameter_description> a complete path to a node (starting with &quot;/&quot;)
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> arguments to use with @path_format to make a complete path
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_log_error">
<description>
Logs the given error in the GDA log file.

</description>
<parameters>
<parameter name="format">
<parameter_description> format string (see the printf(3) documentation).
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> arguments to insert in the error.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_query_field_value_set_default_value">
<description>
Sets the default value of @field, or removes it (if @default_val is %NULL)

</description>
<parameters>
<parameter name="field">
<parameter_description> a #GdaQueryFieldValue object
</parameter_description>
</parameter>
<parameter name="default_val">
<parameter_description> the default value to be set, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_graph_item_set_position">
<description>
Sets the position to be remembered for @item.

</description>
<parameters>
<parameter name="item">
<parameter_description> a #GdaGraphItemItem object
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_dict_aggregate_new">
<description>
Creates a new GdaDictAggregate object which represents an aggregate in the dictionary


</description>
<parameters>
<parameter name="dict">
<parameter_description> a #GdaDict object
</parameter_description>
</parameter>
</parameters>
<return> the new object
</return>
</function>

<function name="gda_server_operation_get_node_parent">
<description>
Get the complete path to the parent of the node defined by @path


</description>
<parameters>
<parameter name="op">
<parameter_description> a #GdaServerOperation object
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> a complete path to a node (starting with &quot;/&quot;)
</parameter_description>
</parameter>
</parameters>
<return> a new string or %NULL if the node does not have any parent or does not exist.
</return>
</function>

<function name="gda_parameter_get_g_type">
<description>
Get the requested data type for @param.


</description>
<parameters>
<parameter name="param">
<parameter_description> a #GdaParameter object
</parameter_description>
</parameter>
</parameters>
<return> the data type
</return>
</function>

<function name="gda_server_operation_get_sequence_name">
<description>

</description>
<parameters>
<parameter name="op">
<parameter_description> a #GdaServerOperation object
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> a complete path to a sequence node (starting with &quot;/&quot;)
</parameter_description>
</parameter>
</parameters>
<return> the name of the sequence at @path
</return>
</function>

<function name="gda_config_free_provider_list">
<description>
Frees a list of #GdaProviderInfo structures.

</description>
<parameters>
<parameter name="list">
<parameter_description> the list to be freed.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_binary_to_string">
<description>
Converts all the non printable characters of bin-&amp;gt;data into the \xxx representation
where xxx is the octal representation of the byte, and the &apos;\&apos; (backslash) character
is converted to &quot;\\&quot;.


</description>
<parameters>
<parameter name="bin">
<parameter_description> a correctly filled @GdaBinary structure
</parameter_description>
</parameter>
<parameter name="maxlen">
<parameter_description> a maximum len used to truncate, or 0 for no maximum length
</parameter_description>
</parameter>
</parameters>
<return> a new string from @bin
</return>
</function>

<function name="gda_column_set_defined_size">
<description>
Sets the defined size of a #GdaColumn.

</description>
<parameters>
<parameter name="column">
<parameter_description> a #GdaColumn.
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the defined size we want to set.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_row_set_id">
<description>
Assigns a new identifier to the given row. This function is
usually called by providers.

</description>
<parameters>
<parameter name="row">
<parameter_description> a #GdaRow (which contains #GValue).
</parameter_description>
</parameter>
<parameter name="id">
<parameter_description> new identifier for the row.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_connection_get_database">
<description>
Gets the name of the currently active database in the given
@GdaConnection.


</description>
<parameters>
<parameter name="cnc">
<parameter_description> A #GdaConnection object.
</parameter_description>
</parameter>
</parameters>
<return> the name of the current database.
</return>
</function>

<function name="gda_connection_close">
<description>
Closes the connection to the underlying data source, but first emits the 
&quot;conn_to_close&quot; signal.

</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection object.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_parameter_list_add_param_from_string">
<description>
Creates and adds a new #GdaParameter to @paramlist. The ID and name of the new parameter
are set as @name. The parameter&apos;s value is set from @str.


</description>
<parameters>
<parameter name="paramlist">
<parameter_description> a #GdaParameterList object
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name to give to the new parameter
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> the type of parameter to add
</parameter_description>
</parameter>
<parameter name="str">
<parameter_description> the string representation of the parameter
</parameter_description>
</parameter>
</parameters>
<return> the new #GdaParameter for information, or %NULL if an error occurred
</return>
</function>

<function name="gda_functions_get_by_name_arg">
<description>
To find a DBMS function which is uniquely identified by its name and the type
of its argument.

About the functions accepting any data type for their argument: if @argtype is not %NULL
then such an function will be a candidate, and if @argtype is %NULL
then only such an function will be a candidate.

If several functions are found, then the function completely matching will be returned, or
an function where the argument type has the same GDA typa as the @argtype, or lastly an
function accepting any data type as argument.


</description>
<parameters>
<parameter name="dict">
<parameter_description> a #GdaDict object
</parameter_description>
</parameter>
<parameter name="funcname">
<parameter_description> the name of the function
</parameter_description>
</parameter>
<parameter name="argtypes">
<parameter_description> a list of types of argument or %NULL
</parameter_description>
</parameter>
</parameters>
<return> The function or NULL if not found
</return>
</function>

<function name="gda_connection_event_free">
<description>
Frees the memory allocated by the event object.

</description>
<parameters>
<parameter name="event">
<parameter_description> the event object.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_server_provider_init_schema_model">
<description>
Sets the column attributes of @model for the requested schema


</description>
<parameters>
<parameter name="model">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="schema">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return> TRUE if there was no error
</return>
</function>

<function name="gda_data_model_array_clear">
<description>
Frees all the rows in @model.

</description>
<parameters>
<parameter name="model">
<parameter_description> the model to clear.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_column_set_caption">
<description>
Sets @column&apos;s @caption.

</description>
<parameters>
<parameter name="column">
<parameter_description> a #GdaColumn.
</parameter_description>
</parameter>
<parameter name="caption">
<parameter_description> caption.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_query_field_value_is_value_null">
<description>
Tells if @field represents a NULL value.


</description>
<parameters>
<parameter name="field">
<parameter_description> a #GdaQueryFieldValue object
</parameter_description>
</parameter>
<parameter name="context">
<parameter_description> a #GdaParameterList object
</parameter_description>
</parameter>
</parameters>
<return>
</return>
</function>

<function name="gda_object_destroy_check">
<description>
Checks that the object has been destroyed, and if not, then calls gda_object_destroy() on it.
This is usefull for objects inheriting the #GdaObject object to be called first line in their
dispose() method.

</description>
<parameters>
<parameter name="gdaobj">
<parameter_description> a #GdaObject object
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_query_field_agg_get_arg">
<description>
Get a list of the other #GdaQueryField objects which are arguments of @agg. If some
of them are missing, then a %NULL is inserted where it should have been.


</description>
<parameters>
<parameter name="agg">
<parameter_description> a #GdaQueryFieldAgg object
</parameter_description>
</parameter>
</parameters>
<return> the #GnomeDbQField argument
</return>
</function>

<function name="gda_connection_get_options">
<description>
Gets the #GdaConnectionOptions used to open this connection.


</description>
<parameters>
<parameter name="cnc">
<parameter_description> a #GdaConnection object.
</parameter_description>
</parameter>
</parameters>
<return> the connection options.
</return>
</function>

<function name="gda_server_operation_get_node_type">
<description>
Convenience function to get the type of a node.


</description>
<parameters>
<parameter name="op">
<parameter_description> a #GdaServerOperation object
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> a complete path to a node (starting with &quot;/&quot;)
</parameter_description>
</parameter>
<parameter name="status">
<parameter_description> a place to store the status of the node, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the type of node, or GDA_SERVER_OPERATION_NODE_UNKNOWN if the node was not found
</return>
</function>

<function name="gda_query_add_field_from_sql">
<description>
Parses @field and if it represents a valid SQL expression for a
field, then add it to @query.


</description>
<parameters>
<parameter name="query">
<parameter_description> a #GdaQuery object
</parameter_description>
</parameter>
<parameter name="field">
<parameter_description> a SQL expression
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> place to store the error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a new #GdaQueryField object, or %NULL
</return>
</function>

<function name="gda_renderer_is_valid">
<description>
Tells if @iface has all the necessary information in @context to be rendered
into a valid statement (which can be executed).


</description>
<parameters>
<parameter name="iface">
<parameter_description> an object which implements the #GdaRenderer interface
</parameter_description>
</parameter>
<parameter name="context">
<parameter_description> rendering context
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @iface can be rendered with @context
</return>
</function>

<function name="gda_column_set_default_value">
<description>
Sets @column&apos;s default #GValue.

</description>
<parameters>
<parameter name="column">
<parameter_description> a #GdaColumn.
</parameter_description>
</parameter>
<parameter name="default_value">
<parameter_description> default #GValue for the column
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_column_index_set_references">
<description>
Sets @dmcia&apos;s @references.

</description>
<parameters>
<parameter name="dmcia">
<parameter_description> a #GdaColumnIndex.
</parameter_description>
</parameter>
<parameter name="ref">
<parameter_description> references.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_main_run">
<description>
Runs the GDA main loop, which is nothing more than the glib main
loop, but with internally added stuff specific for applications using
libgda.

You can specify a function to be called after everything has been correctly
initialized (that is, for initializing your own stuff).

</description>
<parameters>
<parameter name="init_func">
<parameter_description> function to be called when everything has been initialized.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> data to be passed to the init function.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_command_get_options">
<description>
Gets the command options of @cmd.


</description>
<parameters>
<parameter name="cmd">
<parameter_description> a #GdaCommand.
</parameter_description>
</parameter>
</parameters>
<return> the command options of @cmd.
</return>
</function>

<function name="gda_dict_aggregate_set_ret_dict_type">
<description>
Set the return type of a aggregate

</description>
<parameters>
<parameter name="agg">
<parameter_description> a #GdaDictAggregate object
</parameter_description>
</parameter>
<parameter name="dt">
<parameter_description> a #GdaDictType object or #NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_binary_copy">
<description>
Creates a new #GdaBinary structure from an existing one.


</description>
<parameters>
<parameter name="boxed">
<parameter_description> source to get a copy from.
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated #GdaBinary which contains a copy of
information in @boxed.
</return>
</function>

<function name="gda_parameter_list_get_spec">
<description>
Get the specification as an XML string. See the gda_parameter_list_new_from_spec_string()
form more information about the XML specification string format.


</description>
<parameters>
<parameter name="paramlist">
<parameter_description> a #GdaParameterList object
</parameter_description>
</parameter>
</parameters>
<return> a new string
</return>
</function>

<function name="gda_dict_table_get_database">
<description>
Get the database to which the table belongs


</description>
<parameters>
<parameter name="table">
<parameter_description> a #GdaDictTable object
</parameter_description>
</parameter>
</parameters>
<return> a #GdaDictDatabase pointer
</return>
</function>

<function name="gda_server_provider_get_default_dbms_type">
<description>
Get the name of the most common data type which has @type type.

The returned value may be %NULL either if the provider does not implement that method, or if
there is no DBMS data type which could contain data of the @g_type type (for example %NULL may be
returned if a DBMS has integers only up to 4 bytes and a G_TYPE_INT64 is requested).


</description>
<parameters>
<parameter name="provider">
<parameter_description> a server provider.
</parameter_description>
</parameter>
<parameter name="cnc">
<parameter_description> a #GdaConnection object or %NULL
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> a #GType value type
</parameter_description>
</parameter>
</parameters>
<return> the name of the DBMS type, or %NULL
</return>
</function>

<function name="gda_query_set_order_by_field">
<description>
Sets @field to be used in the ORDER BY clause (using the @order and @ascendant attributes) if
@order &amp;gt;= 0. If @order &amp;lt; 0, then @field will not be used in the ORDER BY clause.

</description>
<parameters>
<parameter name="query">
<parameter_description> a #GdaQuery
</parameter_description>
</parameter>
<parameter name="field">
<parameter_description> a #GdaQueryField which is in @query
</parameter_description>
</parameter>
<parameter name="order">
<parameter_description> the order in the list of ORDER BY fields (starts at 0), or -1
</parameter_description>
</parameter>
<parameter name="ascendant">
<parameter_description> TRUE to sort ascending
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_object_get_id">
<description>
Fetch the string ID of the GdaObject object.


</description>
<parameters>
<parameter name="gdaobj">
<parameter_description> a #GdaObject object
</parameter_description>
</parameter>
</parameters>
<return> the id.
</return>
</function>

<function name="gda_config_free_list">
<description>
Frees all memory used by the given GList, which must be the return value
from either #gda_config_list_sections and #gda_config_list_keys.

</description>
<parameters>
<parameter name="list">
<parameter_description> list to be freed.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_query_get_order_by_field">
<description>
Tells if @field (which MUST be in @query) is part of the ORDER BY clause.


</description>
<parameters>
<parameter name="query">
<parameter_description> a #GdaQuery
</parameter_description>
</parameter>
<parameter name="field">
<parameter_description> a #GdaQueryField which is in @query
</parameter_description>
</parameter>
<parameter name="ascendant">
<parameter_description> if not %NULL, will be set TRUE if ascendant sorting and FALSE otherwise
</parameter_description>
</parameter>
</parameters>
<return> -1 if no, and the order where it appears in the ORDER BY list otherwise
</return>
</function>

<function name="gda_client_perform_create_database">
<description>
Creates a new database using the specifications in @op, which must have been obtained using
gda_client_prepare_create_database ()


</description>
<parameters>
<parameter name="client">
<parameter_description> a #GdaClient object.
</parameter_description>
</parameter>
<parameter name="op">
<parameter_description> a #GdaServerOperation object obtained using gda_client_prepare_create_database()
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store en error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred and the database has been created
</return>
</function>

<function name="gda_query_condition_new">
<description>
Creates a new #GdaQueryCondition object


</description>
<parameters>
<parameter name="query">
<parameter_description> a #GdaQuery object
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> the condition type
</parameter_description>
</parameter>
</parameters>
<return> the newly created object
</return>
</function>

<function name="gda_string_hash_to_list">
<description>
Creates a new list of strings, which contains all keys of a given hash 
table. After using it, you should free this list by calling g_list_free.


</description>
<parameters>
<parameter name="hash_table">
<parameter_description> a hash table.
</parameter_description>
</parameter>
</parameters>
<return> a new GList.
</return>
</function>

<function name="gda_data_proxy_set_sample_start">
<description>
Sets the number of the first row to be displayed.

</description>
<parameters>
<parameter name="proxy">
<parameter_description> a #GdaDataProxy object
</parameter_description>
</parameter>
<parameter name="sample_start">
<parameter_description> the number of the first row to be displayed
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_data_model_import_from_string">
<description>
Loads the data from @string into @model.


</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModel
</parameter_description>
</parameter>
<parameter name="string">
<parameter_description> the string to import data from
</parameter_description>
</parameter>
<parameter name="cols_trans">
<parameter_description> a hash table containing which columns of @model will be imported, or %NULL for all columns
</parameter_description>
</parameter>
<parameter name="options">
<parameter_description> list of options for the export
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a place to store errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred.
</return>
</function>

<function name="gda_dict_type_clear_synonyms">
<description>
Removes any synonym attached to @dt

</description>
<parameters>
<parameter name="dt">
<parameter_description> a #GdaDictType object
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_query_get_main_conditions">
<description>
Makes a list of all the conditions (part of the WHERE clause) which
are always verified by @query when it is executed.

Examples: if the WHERE clause is:
--&amp;gt; &quot;A and B&quot; then the list will contains {A, B}
--&amp;gt; &quot;A and (B or C)&quot; it will contain {A, B or C}
--&amp;gt; &quot;A and (B and not C)&quot;, it will contain {A, B, not C}


</description>
<parameters>
<parameter name="query">
<parameter_description> a #GdaQuery object
</parameter_description>
</parameter>
</parameters>
<return> a new list of #GdaQueryCondition objects
</return>
</function>

<function name="gda_data_model_move_iter_prev">
<description>
Sets @iter to the previous available row in @model. @iter must be a valid iterator object obtained
using the gda_data_model_create_iter() method.


</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModel object.
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> a #GdaDataModelIter object
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error occurred
</return>
</function>

<function name="gda_query_join_new_with_targets">
<description>
Creates a new GdaQueryJoin object. Note: the #GdaQueryTarget ranks (1st and 2nd) does not matter, but
is necessary since the join may not be symetrical (LEFT or RIGHT join). Also, the #GdaQueryJoin object
may decide to swap the two if necessary.


</description>
<parameters>
<parameter name="query">
<parameter_description> a #GdaQuery object in which the join will occur
</parameter_description>
</parameter>
<parameter name="target_1">
<parameter_description> the 1st #GdaQueryTarget object participating in the join
</parameter_description>
</parameter>
<parameter name="target_2">
<parameter_description> the 2nd #GdaQueryTarget object participating in the join
</parameter_description>
</parameter>
</parameters>
<return> the new object
</return>
</function>

<function name="gda_object_get_dict">
<description>
Fetch the corresponding #GdaDict object.


</description>
<parameters>
<parameter name="gdaobj">
<parameter_description> a #GdaObject object
</parameter_description>
</parameter>
</parameters>
<return> the #GdaDict object to which @gdaobj is attached to
</return>
</function>

<function name="gda_column_index_new">
<description>

</description>
<parameters>
</parameters>
<return> a newly allocated #GdaColumnIndex object.
</return>
</function>

<function name="gda_value_free">
<description>
Deallocates all memory associated to a #GValue.

</description>
<parameters>
<parameter name="value">
<parameter_description> the resource to free.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_config_list_sections">
<description>
Returns: a list containing all the section names.

</description>
<parameters>
<parameter name="path">
<parameter_description> path for root dir.
</parameter_description>
</parameter>
</parameters>
<return> a list containing all the section names.
</return>
</function>

<function name="gda_connection_event_get_description">
<description>

</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdaConnectionEvent.
</parameter_description>
</parameter>
</parameters>
<return> @event&apos;s description.
</return>
</function>

<function name="gda_value_new_binary">
<description>
Makes a new #GValue of type #GDA_TYPE_BINARY with value @val.


</description>
<parameters>
<parameter name="val">
<parameter_description> value to set for the new #GValue.
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the size of the memory pool pointer to by @val.
</parameter_description>
</parameter>
</parameters>
<return> the newly created #GValue.
</return>
</function>

<function name="gda_data_access_wrapper_row_exists">
<description>
Tests if the wrapper model of @wrapper has a row number @row


</description>
<parameters>
<parameter name="wrapper">
<parameter_description> a #GdaDataAccessWrapper objects
</parameter_description>
</parameter>
<parameter name="row">
<parameter_description> a row number to test existance
</parameter_description>
</parameter>
</parameters>
<return> TRUE if row number @row exists
</return>
</function>

<function name="gda_object_ref_deactivate">
<description>
Desctivates the object (loses the reference to the object)

</description>
<parameters>
<parameter name="ref">
<parameter_description> a #GdaObjectRef object
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_object_dump">
<description>
Writes a textual description of the object to STDOUT. This function only
exists if libergeant is compiled with the &quot;--enable-debug&quot; option. This is
a virtual function.

</description>
<parameters>
<parameter name="gdaobj">
<parameter_description> a #GdaObject object
</parameter_description>
</parameter>
<parameter name="offset">
<parameter_description> the offset (in caracters) at which the dump will start
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_value_new_timestamp_from_timet">
<description>
Makes a new #GValue of type #GDA_TYPE_TIMESTAMP with value @val
(of type time_t).


</description>
<parameters>
<parameter name="val">
<parameter_description> value to set for the new #GValue.
</parameter_description>
</parameter>
</parameters>
<return> the newly created #GValue.
</return>
</function>

<function name="gda_query_field_new_from_xml">
<description>
This is an object factory which does create instances of class inheritants of the #GnomeDbDfield class.
Ths #GdaQueryField object MUST then be attached to @query


</description>
<parameters>
<parameter name="query">
<parameter_description> a #GdaQuery object
</parameter_description>
</parameter>
<parameter name="node">
<parameter_description> an XML node corresponding to a GDA_QUERY_FIELD tag
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the newly created object
</return>
</function>

<function name="gda_command_new">
<description>
Creates a new #GdaCommand from the parameters that should be freed by
calling #gda_command_free.

If there are conflicting options, this will set @options to
#GDA_COMMAND_OPTION_DEFAULT.


</description>
<parameters>
<parameter name="text">
<parameter_description> the text of the command.
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> a #GdaCommandType value.
</parameter_description>
</parameter>
<parameter name="options">
<parameter_description> a #GdaCommandOptions value.
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated #GdaCommand.
</return>
</function>

<function name="gda_config_remove_key">
<description>
Removes the given entry from the configuration database.
If the section is empty, also remove the section.

</description>
<parameters>
<parameter name="path">
<parameter_description> path to the configuration entry.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_server_operation_get_op_type">
<description>
Get the type of operation @op is for


</description>
<parameters>
<parameter name="op">
<parameter_description> a #GdaServerOperation object
</parameter_description>
</parameter>
</parameters>
<return>
</return>
</function>

<function name="gda_object_set_id">
<description>
Sets the string ID of the @gdaobj object.

The string ID must be unique for all the objects related to a given #GdaDict object.

</description>
<parameters>
<parameter name="gdaobj">
<parameter_description> a #GdaObject object
</parameter_description>
</parameter>
<parameter name="strid">
<parameter_description> the string Identifier
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_dict_table_update_dbms_data">
<description>
Synchronises the Table representation with the table structure which is stored in
the DBMS. For this operation to succeed, the connection to the DBMS server MUST be opened
(using the corresponding #GdaConnection object).


</description>
<parameters>
<parameter name="table">
<parameter_description> a #GdaDictTable object
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if no error
</return>
</function>

<function name="gda_value_set_from_value">
<description>
Sets the value of a #GValue from another #GValue. This
is different from #gda_value_copy, which creates a new #GValue.
#gda_value_set_from_value, on the other hand, copies the contents
of @copy into @value, which must already be allocated.


</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue.
</parameter_description>
</parameter>
<parameter name="from">
<parameter_description> the value to copy from.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful, %FALSE otherwise.
</return>
</function>

<function name="gda_query_del_target">
<description>
Removes @target from @query. @target MUST be present within @query. Warning:
All the joins and fields which depended on @target are also removed.

</description>
<parameters>
<parameter name="query">
<parameter_description> a #GdaQuery object
</parameter_description>
</parameter>
<parameter name="target">
<parameter_description> a #GdaQueryTarget object
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gda_query_field_value_get_not_null">
<description>
Tells if @field can receive a NULL value.


</description>
<parameters>
<parameter name="field">
<parameter_description> a #GdaQueryFieldValue object
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @field can&apos;t have a NULL value
</return>
</function>

<function name="gda_query_condition_get_parent">
<description>
Get the #GdaQueryCondition object which is parent of @condition


</description>
<parameters>
<parameter name="condition">
<parameter_description> a #GdaQueryCondition object
</parameter_description>
</parameter>
</parameters>
<return> the parent object, or %NULL
</return>
</function>

<function name="gda_query_join_get_target_1">
<description>
Get the 1st #GdaQueryTarget participating in the join


</description>
<parameters>
<parameter name="join">
<parameter_description> a #GdaQueryJoin object
</parameter_description>
</parameter>
</parameters>
<return> the #GdaQueryTarget
</return>
</function>

<function name="gda_data_model_export_to_string">
<description>
Exports data contained in @model to a string; the format is specified using the @format argument.

Specifically, the parameters in the @options list can be:
&amp;lt;itemizedlist&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;&quot;SEPARATOR&quot;: a string value of which the first character is used as a separator in case of CSV export
&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;&quot;NAME&quot;: a string value used to name the exported data if the export format is XML&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;/itemizedlist&amp;gt;


</description>
<parameters>
<parameter name="model">
<parameter_description> a #GdaDataModel
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> the format in which to export data
</parameter_description>
</parameter>
<parameter name="cols">
<parameter_description> an array containing which columns of @model will be exported, or %NULL for all columns
</parameter_description>
</parameter>
<parameter name="nb_cols">
<parameter_description> the number of columns in @cols
</parameter_description>
</parameter>
<parameter name="rows">
<parameter_description> an array containing which rows of @model will be exported, or %NULL for all rows
</parameter_description>
</parameter>
<parameter name="nb_rows">
<parameter_description> the number of rows in @rows
</parameter_description>
</parameter>
<parameter name="options">
<parameter_description> list of options for the export
</parameter_description>
</parameter>
</parameters>
<return> a new string.
</return>
</function>

<function name="gda_data_handler_get_value_from_str">
<description>
Creates a new GValue which represents the STR value given as argument. This is
the opposite of the function gda_data_handler_get_str_from_value(). The type argument
is used to determine the real data type requested for the returned value.

If the str string is NULL, then the returned GValue is of type GDA_TYPE_NULL;
if the str string does not correspond to a valid STR string for the requested type, then
NULL is returned.


</description>
<parameters>
<parameter name="dh">
<parameter_description> an object which implements the #GdaDataHandler interface
</parameter_description>
</parameter>
<parameter name="str">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> 
</parameter_description>
</parameter>
</parameters>
<return> the new GValue or NULL on error
</return>
</function>

</root>
