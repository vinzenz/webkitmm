/* $Id: dicttype.hg,v 1.2 2006/11/08 00:07:37 murrayc Exp $ */
// -*- C++ -*- // this is for the .hg, I realize gensig puts one in

/* dicttype.h
 *
 * Copyright 2006 libgdamm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or(at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <libgdamm/object.h>
#include <libgdamm/xmlstorage.h>


_DEFS(libgdamm,libgda)
_PINCLUDE(libgdamm/private/object_p.h)

namespace Gnome
{

namespace Gda
{

class Connection;

/** Represents a data type in the DBMS.
 * DBMS systems usually have a large set of data types (which can sometimes be expanded by users). Each DictType 
 * object represents one data type. The libgda library provides some data types, and so it is possible, for each 
 * DictType object, to get the corresponding libgda data type.
 *
 * Every data type can be represented by a DictType (even user defined data types). Complex data types (data types 
 * described as the aggregation of several other data types, similar to C structures) are handled like any other data 
 * type and it is not possible to individually access the different components of the complex data type (it is, however, 
 * possible to write a plugin for this data type). 
 * 
 * @ingroup Dictionaries.
 */
class DictType
: public Gda::Object,
  public XmlStorage
{
  _CLASS_GOBJECT(DictType, GdaDictType, GDA_DICT_TYPE, Gda::Object, GdaObject)
  _IMPLEMENTS_INTERFACE(XmlStorage)
protected:

  _CTOR_DEFAULT

public:
  _WRAP_CREATE()

  _WRAP_METHOD(void set_sqlname(const Glib::ustring& sqlname), gda_dict_type_set_sqlname)
  _WRAP_METHOD(Glib::ustring get_sqlname() const, gda_dict_type_get_sqlname)

  _WRAP_METHOD(void set_g_type(GType g_type), gda_dict_type_set_g_type)
  _WRAP_METHOD(GType get_g_type() const, gda_dict_type_get_g_type)

  _WRAP_METHOD(void add_synonym(const Glib::ustring& synonym), gda_dict_type_add_synonym)

  #m4 _CONVERSION(`const GSList*', `Glib::SListHandle<Glib::ustring>', `$2(const_cast<GSList*>($3), Glib::OWNERSHIP_NONE)')
  _WRAP_METHOD(Glib::SListHandle<Glib::ustring> get_synonyms() const, gda_dict_type_get_synonyms)

  _WRAP_METHOD(void clear_synonyms(), gda_dict_type_clear_synonyms)

 //There are no properties, signals or vfuncs.
};

} // namespace Gda
} // namespace Gnome

