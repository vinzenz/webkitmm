/* webview.h
 *
 * Copyright 2008 Jonathon Jongsma
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */
 
_DEFS(webkitmm,webkit)
_PINCLUDE(glibmm/private/object_p.h)

#include <glibmm/object.h>
#include <webkitmm/networkrequest.h>

namespace WebKit
{

_WRAP_ENUM(DownloadStatus, WebKitDownloadStatus, NO_GTYPE)
_WRAP_ENUM(DownloadError, WebKitDownloadError, NO_GTYPE)

class Download : public Glib::Object
{
  _CLASS_GOBJECT(Download, WebKitDownload, WEBKIT_DOWNLOAD, Glib::Object, GObject)
  _WRAP_CTOR(Download(const Glib::RefPtr<NetworkRequest>& request), webkit_download_new)

public:
  _WRAP_CREATE(const Glib::RefPtr<NetworkRequest>& request)

  _WRAP_METHOD(void cancel(), webkit_download_cancel)
  _WRAP_METHOD(guint64 get_current_size() const, webkit_download_get_current_size)
  _WRAP_METHOD(std::string get_destination_uri() const, webkit_download_get_destination_uri)
  _WRAP_METHOD(double get_elapsed_time() const, webkit_download_get_elapsed_time)
  _WRAP_METHOD(Glib::RefPtr<NetworkRequest> get_network_request(), webkit_download_get_network_request)
  _WRAP_METHOD(Glib::RefPtr<const NetworkRequest> get_network_request() const, webkit_download_get_network_request, constversion)
  _WRAP_METHOD(double get_progress() const, webkit_download_get_progress)
  _WRAP_METHOD(DownloadStatus get_status() const, webkit_download_get_status)
  _WRAP_METHOD(std::string get_suggested_filename() const, webkit_download_get_suggested_filename)
  _WRAP_METHOD(guint64 get_total_size() const, webkit_download_get_total_size)
  _WRAP_METHOD(std::string get_uri() const, webkit_download_get_uri)
  _WRAP_METHOD(void set_destination_uri(const std::string& uri), webkit_download_set_destination_uri)
  _WRAP_METHOD(void start(), webkit_download_start)

  // Signals
  _WRAP_SIGNAL(bool error(int current_bytes, int total_bytes, const std::string& error), "error", no_default_handler)

};

} // namespace WebKit
