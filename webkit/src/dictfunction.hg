/* $Id: dictfunction.hg,v 1.2 2006/11/08 00:07:37 murrayc Exp $ */
// -*- C++ -*- // this is for the .hg, I realize gensig puts one in

/* dictfunction.h
 *
 * Copyright 2006 libgdamm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or(at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <libgdamm/object.h>
#include <libgdamm/xmlstorage.h>
#include <libgdamm/dicttype.h>
#include <libgdamm/dict.h>


_DEFS(libgdamm,libgda)
_PINCLUDE(libgdamm/private/object_p.h)

namespace Gnome
{

namespace Gda
{

class Connection;

/** Represents a function in the DBMS.
 * DictFunction represents a function, with zero or more input parameters, and one and only one return type.
 * Therefore it does not represent procedures which do not return any data type. Also the argument types are always of 
 * the IN kind (no OUT or IN OUT arguments). There may one day be a specific object for procedures. Likewise, it does not 
 * represent a function returning a SET OF a given data type. There may one day be a specific object for such functions.
 *
 * Because functions can be polymorphic, the name is not enough to identify them, so the DBMS provides a unique id which 
 * can be used to uniquely identify a function. 
 * 
 * @ingroup Dictionaries
 */
class DictFunction
: public Gda::Object,
  public XmlStorage
{
  _CLASS_GOBJECT(DictFunction, GdaDictFunction, GDA_DICT_FUNCTION, Gda::Object, GdaObject)
  _IMPLEMENTS_INTERFACE(XmlStorage)
protected:

  _WRAP_CTOR(DictFunction(const Glib::RefPtr<Dict>& dict), gda_dict_function_new)

public:
  _WRAP_CREATE(const Glib::RefPtr<Dict>& dict)

  _WRAP_METHOD(void set_dbms_id(const Glib::ustring& id), gda_dict_function_set_dbms_id )
  _WRAP_METHOD(Glib::ustring get_dbms_id() const, gda_dict_function_get_dbms_id)
  _WRAP_METHOD(void set_sqlname(const Glib::ustring& sqlname), gda_dict_function_set_sqlname)
  _WRAP_METHOD(Glib::ustring get_sqlname() const, gda_dict_function_get_sqlname)

  _WRAP_METHOD(void set_arg_dict_types(const Glib::SListHandle<DictType>& arg_types), gda_dict_function_set_arg_dict_types)

#m4 _CONVERSION(`const GSList*',`Glib::SListHandle< Glib::RefPtr<const DictType> >',`$2((GSList*)$3, Glib::OWNERSHIP_NONE)')
  _WRAP_METHOD(Glib::SListHandle< Glib::RefPtr<const DictType> > get_arg_dict_types() const, gda_dict_function_get_arg_dict_types)
  
    
  _WRAP_METHOD(void set_ret_dict_type(const Glib::RefPtr<DictType>& dt), gda_dict_function_set_ret_dict_type)

  _WRAP_METHOD(Glib::RefPtr<DictType> get_ret_dict_type(), gda_dict_function_get_ret_dict_type, refreturn)
  _WRAP_METHOD(Glib::RefPtr<const DictType> get_ret_dict_type() const, gda_dict_function_get_ret_dict_type, constversion)

  _WRAP_METHOD(bool accepts_arg_dict_types(const Glib::SListHandle<DictType>& arg_types), gda_dict_function_accepts_arg_dict_types)

};

} // namespace Gda
} // namespace Gnome

