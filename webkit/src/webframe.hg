/* webframe.h
 *
 * Copyright 2008 Jonathon Jongsma
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */
 
_DEFS(webkitmm,webkit)
_PINCLUDE(glibmm/private/object_p.h)

#include <glibmm/object.h>
#include <webkitmm/networkrequest.h>
#include <gtkmm/printoperation.h>

#include <JavaScriptCore/JSBase.h>

namespace WebKit
{

_WRAP_ENUM(LoadStatus, WebKitLoadStatus, NO_GTYPE)

class WebView;

class WebFrame : public Glib::Object
{
  _CLASS_GOBJECT(WebFrame, WebKitWebFrame, WEBKIT_WEB_FRAME, Glib::Object, GObject)

  protected:
  _WRAP_CTOR(WebFrame(WebView& web_view), webkit_web_frame_new)
  public:
  _WRAP_CREATE(WebView& web_view)

  _WRAP_METHOD(Glib::RefPtr<WebFrame> find_frame(const std::string& name), webkit_web_frame_find_frame)
  _WRAP_METHOD(Glib::RefPtr<const WebFrame> find_frame(const std::string& name) const, webkit_web_frame_find_frame, constversion)
  _WRAP_METHOD(JSGlobalContextRef get_global_context() const, webkit_web_frame_get_global_context)
  _WRAP_METHOD(LoadStatus get_load_status() const, webkit_web_frame_get_load_status)
  _WRAP_METHOD(std::string get_name() const, webkit_web_frame_get_name)
  _WRAP_METHOD(Glib::RefPtr<WebFrame> get_parent(), webkit_web_frame_get_parent)
  _WRAP_METHOD(Glib::RefPtr<const WebFrame> get_parent() const, webkit_web_frame_get_parent, constversion)
  _WRAP_METHOD(std::string get_title() const, webkit_web_frame_get_title)
  _WRAP_METHOD(std::string get_uri() const, webkit_web_frame_get_uri)
  _WRAP_METHOD(WebView& get_web_view(), webkit_web_frame_get_web_view)
  _WRAP_METHOD(const WebView& get_web_view() const, webkit_web_frame_get_web_view, constversion)
  _WRAP_METHOD(void load_alternate_string(const std::string& content, const std::string& base_url, const std::string& unreachable_url), webkit_web_frame_load_alternate_string)
  _WRAP_METHOD(void load_request(const Glib::RefPtr<NetworkRequest>& request), webkit_web_frame_load_request)
  _WRAP_METHOD(void load_string(const std::string& content, const std::string& mime_type, const std::string& encoding, const std::string& base_uri), webkit_web_frame_load_string)
  _WRAP_METHOD(void load_uri(const std::string& base_uri), webkit_web_frame_load_uri)
  _WRAP_METHOD(void print(), webkit_web_frame_print)
  #ifdef GLIBMM_EXCEPTIONS_ENABLED
  Gtk::PrintOperationResult print_full(const Glib::RefPtr<Gtk::PrintOperation>& operation, Gtk::PrintOperationAction action);
  #else
  Gtk::PrintOperationResult print_full(const Glib::RefPtr<Gtk::PrintOperation>& operation, Gtk::PrintOperationAction action, std::auto_ptr<Glib::Error>& error);
  #endif //GLIBMM_EXCEPTIONS_ENABLED
  _WRAP_METHOD(void stop_loading(), webkit_web_frame_stop_loading)
  _WRAP_METHOD(void reload(), webkit_web_frame_reload)

  _IGNORE(webkit_web_frame_print_full)

  // signals
  _WRAP_SIGNAL(void cleared(), "cleared", no_default_handler)
  _WRAP_SIGNAL(void load_committed(), "load-committed", no_default_handler)
  _WRAP_SIGNAL(void load_done(bool), "load-done", no_default_handler)
  _WRAP_SIGNAL(void title_changed(const std::string& title), "title-changed", no_default_handler)
  _WRAP_SIGNAL(void hovering_over_link(const std::string& a, const std::string& b), "hovering-over-link", no_default_handler)

  // properties
  _WRAP_PROPERTY("name", std::string)
  _WRAP_PROPERTY("title", std::string)
  _WRAP_PROPERTY("uri", std::string)
};

} // namespace WebKit
