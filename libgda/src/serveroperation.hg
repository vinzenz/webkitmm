/* $Id: serveroperation.hg,v 1.2 2006/11/08 00:52:25 murrayc Exp $ */
// -*- C++ -*- // this is for the .hg, I realize gensig puts one in

/* serveroperation.h
 *
 * Copyright 2001      Free Software Foundation
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

//#include <libgdamm/connection.h>
#include <libgdamm/command.h>
#include <libgdamm/datamodelindex.h>
#include <libgdamm/client.h>
#include <libgda/gda-server-provider.h>

_DEFS(libgdamm,libgda)
_PINCLUDE(glibmm/private/object_p.h)

namespace Gnome
{

namespace Gda
{


class Connection;

//_WRAP_ENUM(ClientSpecsType, GdaClientSpecsType)
_WRAP_ENUM(ServerOperationNodeType, GdaServerOperationNodeType)
_WRAP_ENUM(ServerOperationNodeStatus, GdaServerOperationNodeStatus)

/** @defgroup DDL Data definition (DDL) queries
 */

/** Handles any DDL query in an abstract way.
 *
 * @ingroup DDL
 */
class ServerOperation : public Glib::Object
{
  _CLASS_GOBJECT(ServerOperation, GdaServerOperation, GDA_SERVER_OPERATION, Glib::Object, GObject)

public:
  // The C version of these take varargs for some reason.
  _WRAP_METHOD_DOCS_ONLY(gda_server_operation_get_value_at)
  Value get_value_at(const Glib::ustring& path) const;

  _WRAP_METHOD_DOCS_ONLY(gda_server_operation_set_value_at)
#ifdef GLIBMM_EXCEPTIONS_ENABLED
  void set_value_at(const Glib::ustring& path, const Glib::ustring& value);
#else
  void set_value_at(const Glib::ustring& path, const Glib::ustring& value, std::auto_ptr<Glib::Error>& error);
#endif // GLIBMM_EXCEPTIONS_ENABLED

  _WRAP_METHOD(ServerOperationNodeType get_node_type(const Glib::ustring& path, ServerOperationNodeStatus& status) const, gda_server_operation_get_node_type)
 //_WRAP_METHOD(ServerOperationNodeType get_node_type_v(const Glib::ustring& *path_array),  gda_server_operation_get_node_type_v)

  //_WRAP_METHOD(GdaParameterList* get_node_parameter_list(const Glib::ustring& path) const, gda_server_operation_get_node_plist)
  //_WRAP_METHOD(GdaParameterList *gda_server_operation_get_node_plist_v(const Glib::ustring& *path_array)

  //_WRAP_METHOD(GdaParameter* get_node_param(const Glib::ustring& path) const, gda_server_operation_get_node_param)
  //_WRAP_METHOD(GdaParameter* gda_server_operation_get_node_param_v(const Glib::ustring& *path_array), gda_server_operation_get_node_param_v)

  //_WRAP_METHOD(GdaDataModel* get_node_datamodel(const Glib::ustring& path) const, gda_server_operation_get_node_datamodel, refreturn)
  //_WRAP_METHOD(GdaDataModel* get_node_datamodel_v(const Glib::ustring& *path_array), gda_server_operation_get_node_datamodel_v, refreturn)

  //_WRAP_METHOD(int get_node_seq_size(const Glib::ustring& path) const, gda_server_operation_get_node_seq_size)
  //_WRAP_METHOD(int get_node_seq_size_v(const Glib::ustring& path_array) const, gda_server_operation_get_node_seq_size_v)


 //TODO: vfuncs.
};

} // namespace Gda
} // namespace Gnome

