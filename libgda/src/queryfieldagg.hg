// -*- C++ -*- // this is for the .hg, I realize gensig puts one in

/* queryfieldagg.h
 *
 * Copyright 2003 libgdamm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <glibmm/object.h>
#include <libgdamm/dict.h>
#include <libgdamm/datamodel.h>

#include <libgdamm/xmlstorage.h>
#include <libgdamm/queryfield.h>
#include <libgdamm/query.h>
#include <libgdamm/referer.h>

_DEFS(libgdamm,libgda)
_PINCLUDE(libgdamm/private/queryfield_p.h)

namespace Gnome
{

namespace Gda
{

/** Represents a function (selected by a DictAggregate object).
 * 
 * @ingroup Queries
 */
class QueryFieldAgg
 : public QueryField,
   public Referer
{
  _CLASS_GOBJECT(QueryFieldAgg, GdaQueryFieldAgg, GDA_QUERY_FIELD_AGG, QueryField, GdaQueryField)
  _IMPLEMENTS_INTERFACE(Referer)

public:
  _WRAP_CTOR(QueryFieldAgg(const Glib::RefPtr<Query>& query, const Glib::ustring& agg_name), gda_query_field_agg_new)
  
  _WRAP_METHOD(Glib::RefPtr<DictAggregate> get_ref_agg(), gda_query_field_agg_get_ref_agg, refreturn)
  _WRAP_METHOD(Glib::RefPtr<const DictAggregate> get_ref_agg() const, gda_query_field_agg_get_ref_agg, constversion)

  _WRAP_METHOD(void set_arg(const Glib::RefPtr<QueryField>& arg), gda_query_field_agg_set_arg)

  _WRAP_METHOD(Glib::RefPtr<QueryField> get_arg(), gda_query_field_agg_get_arg, refreturn)
  _WRAP_METHOD(Glib::RefPtr<const QueryField> get_arg() const, gda_query_field_agg_get_arg, refreturn)
};

} // namespace Gda
} // namespace Gnome

